<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WinGone&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-24T17:13:34.982Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>WangYinggang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gateway集成knife4j</title>
    <link href="http://example.com/2021/04/25/gateway%E9%9B%86%E6%88%90knife4j/"/>
    <id>http://example.com/2021/04/25/gateway%E9%9B%86%E6%88%90knife4j/</id>
    <published>2021-04-24T17:13:56.000Z</published>
    <updated>2021-04-24T17:13:34.982Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-创建夫工程cloud-nacos-gateway-knife4j"><a href="#1-创建夫工程cloud-nacos-gateway-knife4j" class="headerlink" title="1.创建夫工程cloud-nacos-gateway-knife4j"></a>1.创建夫工程cloud-nacos-gateway-knife4j</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-nacos-gateway-knife4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>order<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>user<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springboot.version</span>&gt;</span>2.3.2.RELEASE<span class="tag">&lt;/<span class="name">springboot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cloud.alibaba.version</span>&gt;</span>2.2.3.RELEASE<span class="tag">&lt;/<span class="name">cloud.alibaba.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cloud.dependencies.version</span>&gt;</span>Hoxton.SR8<span class="tag">&lt;/<span class="name">cloud.dependencies.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cloud.nacos.version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">cloud.nacos.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.plus.version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">mybatis.plus.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.75<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">alibaba.nacos.client</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">alibaba.nacos.client</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">knife4j.version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">knife4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springboot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cloud.dependencies.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cloud.alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cloud.nacos.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.nacos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span> $&#123;alibaba.nacos.client&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;knife4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-创建网关服务gateway"><a href="#2-创建网关服务gateway" class="headerlink" title="2.创建网关服务gateway"></a>2.创建网关服务gateway</h1><h2 id="导入依赖-1"><a href="#导入依赖-1" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-nacos-gateway-knife4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        nacos--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cloud.nacos.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        网关gateway --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        knife4j--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件yml"><a href="#配置文件yml" class="headerlink" title="配置文件yml"></a>配置文件yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway-knife4j</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">$&#123;nacos.nacos-host&#125;:$&#123;nacos.nacos-port&#125;</span></span><br><span class="line">        <span class="attr">userName:</span> <span class="string">&quot;nacos&quot;</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">&quot;nacos&quot;</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">$&#123;nacos.nacos-host&#125;:$&#123;nacos.nacos-port&#125;</span></span><br><span class="line">        <span class="attr">userName:</span> <span class="string">&quot;nacos&quot;</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">&quot;nacos&quot;</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 启用自动根据服务ID生成路由</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span> <span class="comment"># 设置路由的路径为小写的服务ID</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span> <span class="comment"># 唯一id ，随便起，不能重复</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://test</span> <span class="comment"># 匹配注册中心的服务</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">Path=/test/**</span> <span class="comment"># 匹配的规则</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">              <span class="comment"># 去掉路由前缀，访问 localhost：8088/test/v2/api 转发的就是 localhost:8089/v2/api</span></span><br><span class="line">              <span class="comment"># 1 : 代表剥离路径的个数</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line"><span class="comment">#        - id: order-service</span></span><br><span class="line"><span class="comment">#          uri: lb://order-service</span></span><br><span class="line"><span class="comment">#          predicates:</span></span><br><span class="line"><span class="comment">#            - Path=/api/order/**</span></span><br><span class="line"><span class="comment">#        - id: user-service</span></span><br><span class="line"><span class="comment">#          uri: lb://user-service</span></span><br><span class="line"><span class="comment">#          predicates:</span></span><br><span class="line"><span class="comment">#            - Path=/api/user/**</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">nacos-host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">nacos-port:</span> <span class="number">8848</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="微服务集成配置类"><a href="#微服务集成配置类" class="headerlink" title="微服务集成配置类"></a>微服务集成配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qsn.gateway.conf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.SwaggerResource;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.SwaggerResourcesProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微服务集成配置类</span></span><br><span class="line"><span class="comment"> * 注解<span class="doctag">@Import</span>(BeanValidatorPluginsConfiguration.class)的作用是 knife4j增强功能（其中就用权限控制即输入密码才能看文档）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerProvider</span> <span class="keyword">implements</span> <span class="title">SwaggerResourcesProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String API_URI = <span class="string">&quot;/v2/api-docs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路由加载器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RouteLocator routeLocator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 网关应用名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String applicationName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SwaggerResource&gt; <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//接口资源列表</span></span><br><span class="line">        List&lt;SwaggerResource&gt; resources = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//服务名称列表</span></span><br><span class="line">        List&lt;String&gt; routeHosts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获取所有可用的应用名称</span></span><br><span class="line">        routeLocator.getRoutes().filter(route -&gt; route.getUri().getHost() != <span class="keyword">null</span>)</span><br><span class="line">                .filter(route -&gt; !applicationName.equals(route.getUri().getHost()))</span><br><span class="line">                .subscribe(route -&gt; routeHosts.add(route.getUri().getHost()));</span><br><span class="line">        <span class="comment">// 去重，多负载服务只添加一次</span></span><br><span class="line">        Set&lt;String&gt; existsServer = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        routeHosts.forEach(host -&gt; &#123;</span><br><span class="line">            <span class="comment">// 拼接url</span></span><br><span class="line">            String url = <span class="string">&quot;/&quot;</span> + host + API_URI;</span><br><span class="line">            <span class="comment">//不存在则添加</span></span><br><span class="line">            <span class="keyword">if</span> (!existsServer.contains(url)) &#123;</span><br><span class="line">                existsServer.add(url);</span><br><span class="line">                SwaggerResource swaggerResource = <span class="keyword">new</span> SwaggerResource();</span><br><span class="line">                swaggerResource.setUrl(url);</span><br><span class="line">                swaggerResource.setName(host);</span><br><span class="line">                resources.add(swaggerResource);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> resources;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="swagger访问接口"><a href="#swagger访问接口" class="headerlink" title="swagger访问接口"></a>swagger访问接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qsn.gateway.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * swagger访问接口</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/swagger-resources&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> SecurityConfiguration securityConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> UiConfiguration uiConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SwaggerResourcesProvider swaggerResources;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwaggerHandler</span><span class="params">(SwaggerResourcesProvider swaggerResources)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.swaggerResources = swaggerResources;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configuration/security&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ResponseEntity&lt;SecurityConfiguration&gt;&gt; securityConfiguration() &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(<span class="keyword">new</span> ResponseEntity&lt;&gt;(</span><br><span class="line">                Optional.ofNullable(securityConfiguration).orElse(SecurityConfigurationBuilder.builder().build()), HttpStatus.OK));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configuration/ui&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ResponseEntity&lt;UiConfiguration&gt;&gt; uiConfiguration() &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(<span class="keyword">new</span> ResponseEntity&lt;&gt;(</span><br><span class="line">                Optional.ofNullable(uiConfiguration).orElse(UiConfigurationBuilder.builder().build()), HttpStatus.OK));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取接口信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ResponseEntity&gt; <span class="title">swaggerResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just((<span class="keyword">new</span> ResponseEntity&lt;&gt;(swaggerResources.get(), HttpStatus.OK)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-创建订单服务"><a href="#3-创建订单服务" class="headerlink" title="3.创建订单服务"></a>3.创建订单服务</h1><h2 id="导入依赖-2"><a href="#导入依赖-2" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-nacos-gateway-knife4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>order<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--    knife4j     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    需要 knife4j 的权限控制（账号密码） 才需要引用此包     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7100</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://$&#123;nacos.nacos-host&#125;:3306/my_test?useUnicode=true&amp;autoReconnect=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="comment"># driver-class-name: com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">order-service</span></span><br><span class="line">  <span class="comment">#  profiles:</span></span><br><span class="line">  <span class="comment">#    active: dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#指定nacos配置</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">$&#123;nacos.nacos-host&#125;:$&#123;nacos.nacos-port&#125;</span></span><br><span class="line">        <span class="comment"># public环境</span></span><br><span class="line">        <span class="attr">namespace:</span></span><br><span class="line">      <span class="comment">#        # 自定义的环境（dev/test）</span></span><br><span class="line">      <span class="comment">#        namespace: 2619670c-d55b-407d-bda5-e0f510a37fe6</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">$&#123;nacos.nacos-host&#125;:$&#123;nacos.nacos-port&#125;</span></span><br><span class="line">        <span class="comment">#        namespace: 2619670c-d55b-407d-bda5-e0f510a37fe6</span></span><br><span class="line">        <span class="attr">namespace:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="comment"># 公共配置</span></span><br><span class="line">        <span class="string">extension-configs[0]:</span></span><br><span class="line">          <span class="attr">data-id:</span> <span class="string">share-config.yml</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">SHARE_GROUP</span></span><br><span class="line">          <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#指定seata配置</span></span><br><span class="line">    <span class="attr">alibaba:</span></span><br><span class="line">      <span class="attr">seata:</span></span><br><span class="line">        <span class="attr">tx-service-group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="string">com.alibaba.nacos.client.*:</span> <span class="string">WARN</span></span><br><span class="line"></span><br><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="comment"># 开启Swagger的Basic认证功能,默认是false</span></span><br><span class="line">  <span class="comment"># 注：（1）默认账号/密码  admin/123321; （2）但是如果不配置密码。 即使输入对了，也始终在输入密码的地方重新循环;（3）如果用浏览器记住密码了则不用输入， swagger会直接读取进去不会再手动输入一次；</span></span><br><span class="line">  <span class="attr">basic:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Basic认证用户名</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">test</span></span><br><span class="line">    <span class="comment"># Basic认证密码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1234567</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">nacos-host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">nacos-port:</span> <span class="number">8848</span></span><br><span class="line"><span class="comment">## 开启生产环境屏蔽(true看不到文档；false可以看到文档，但是密码失效)</span></span><br><span class="line"><span class="comment">#  production: false</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置Swagger主页信息"><a href="#配置Swagger主页信息" class="headerlink" title="配置Swagger主页信息"></a>配置Swagger主页信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qsn.order.conf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j;</span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Predicates;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置Swagger主页信息</span></span><br><span class="line"><span class="comment"> * 需要 knife4j 的权限控制（账号密码） 才需要引用此包:  <span class="doctag">@Import</span>(BeanValidatorPluginsConfiguration.class), 对应jar：spring-boot-starter-validation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@EnableKnife4j</span></span><br><span class="line"><span class="meta">@Import(BeanValidatorPluginsConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建RestApi 并包扫描controller</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.qsn.order&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">&quot;/error.*&quot;</span>)))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Swagger页面 信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder().</span><br><span class="line">                title(<span class="string">&quot;订单模块&quot;</span>).</span><br><span class="line">                contact(<span class="string">&quot;wyg&quot;</span>).</span><br><span class="line">                version(<span class="string">&quot;1.0 version&quot;</span>).</span><br><span class="line">                termsOfServiceUrl(<span class="string">&quot;api/order/**&quot;</span>).</span><br><span class="line">                description(<span class="string">&quot;订单模块-这是一个 cloud+nacos+gateway+knife4j 的项目&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-创建夫工程cloud-nacos-gateway-knife4j&quot;&gt;&lt;a href=&quot;#1-创建夫工程cloud-nacos-gateway-knife4j&quot; class=&quot;headerlink&quot; title=&quot;1.创建夫工程cloud-nacos-gatew</summary>
      
    
    
    
    
    <category term="1.swagger" scheme="http://example.com/tags/1-swagger/"/>
    
  </entry>
  
  <entry>
    <title>yml配置</title>
    <link href="http://example.com/2021/04/24/%E5%85%AC%E5%85%B1%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2021/04/24/%E5%85%AC%E5%85%B1%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2021-04-24T04:48:16.000Z</published>
    <updated>2021-04-24T17:12:44.077Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">## ----------------------------公用配置开始---------------------------- ###</span></span><br><span class="line"><span class="comment">#数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3308/my_test?useUnicode=true&amp;autoReconnect=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="comment"># driver-class-name: com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="comment">#ORM框架</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment">#外部化xml配置</span></span><br><span class="line">  <span class="comment">#configure-location: classpath:mybatis-configure.xml</span></span><br><span class="line">  <span class="comment">#指定外部化 MyBatis Properties 配置，通过该配置可以抽离配置，实现不同环境的配置部署</span></span><br><span class="line">  <span class="comment">#configuration-properties: classpath:mybatis/configure.properties</span></span><br><span class="line">  <span class="comment">#xml扫描，多个目录用逗号或者分号分隔（告诉 Mapper 所对应的 XML 文件位置）</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mapper/**/*.xml</span></span><br><span class="line">  <span class="comment">#扫描实体类</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.qsn.stock.test</span></span><br><span class="line">  <span class="comment">#项目启动会检查xml配置存在(只在开发时候打开)</span></span><br><span class="line">  <span class="attr">check-config-location:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#SIMPLE：该执行器类型不做特殊的事情，为每个语句的执行创建一个新的预处理语句,REUSE：该执行器类型会复用预处理语句,BATCH：该执行器类型会批量执行所有的更新语句</span></span><br><span class="line">  <span class="attr">default-executor-type:</span> <span class="string">REUSE</span></span><br><span class="line"><span class="comment"># 配置feign-OK-HTTP</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">okhttp:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 连接/响应时间</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment">#建立连接所用的时间，适用于网络状况正常的情况下，两端连接所需要的时间</span></span><br><span class="line">  <span class="attr">ConnectTimeOut:</span> <span class="number">3000</span></span><br><span class="line">  <span class="comment">#建立连接后从服务端读取到可用资源所用的时间</span></span><br><span class="line">  <span class="attr">ReadTimeOut:</span> <span class="number">5000</span></span><br><span class="line"><span class="comment">#分布式事务框架</span></span><br><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">application-id:</span> <span class="string">order-service</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">my_test_tx_group</span>    <span class="comment">#此处配置自定义的seata事务分组名称</span></span><br><span class="line">  <span class="attr">enable-auto-data-source-proxy:</span> <span class="literal">true</span>    <span class="comment">#开启数据库代理</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">namespace:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">$&#123;nacos.nacos-host&#125;:$&#123;nacos.nacos-port&#125;</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">SEATA_GROUP</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-server</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">$&#123;nacos.nacos-host&#125;:$&#123;nacos.nacos-port&#125;</span></span><br><span class="line">      <span class="attr">namespace:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">vgroup-mapping:</span></span><br><span class="line">      <span class="attr">stock-service_group:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">disable-global-transaction:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">rm:</span></span><br><span class="line">      <span class="attr">report-success-enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">## ----------------------------nacos-公用配置结束---------------------------- ###</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
    <category term="yml" scheme="http://example.com/tags/yml/"/>
    
  </entry>
  
  <entry>
    <title>1.8新特性之Stream</title>
    <link href="http://example.com/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/Stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/Stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-04-23T05:34:36.000Z</published>
    <updated>2021-04-23T15:58:28.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDK-1-8-新特性之Stream-详解"><a href="#JDK-1-8-新特性之Stream-详解" class="headerlink" title="JDK 1.8 新特性之Stream 详解"></a>JDK 1.8 新特性之Stream 详解</h1><p>虽然java 10已经发布，11 已经在路上，虽然 java EE 已经更名为 jakarta EE，但是大多数人连jdk1.8的新特性都不太了解，本人也是如此，所以在学习Java 8 API 添加的 Stream 的时候 做一些个人笔记，希望帮助自己的同时也能帮到大家。</p><hr><p>首先对stream的操作可以分为两类，中间操作(intermediate operations)和结束操作(terminal operations):</p><ul><li>中间操作总是会惰式执行，调用中间操作只会生成一个标记了该操作的新stream。</li><li>结束操作会触发实际计算，计算发生时会把所有中间操作积攒的操作以pipeline的方式执行，这样可以减少迭代次数。计算完成之后stream就会失效。</li></ul><p>虽然大部分情况下stream是容器调用Collection.stream()方法得到的，但stream和collections有以下不同：</p><ul><li><p>无存储。stream不是一种数据结构，它只是某种数据源的一个视图，数据源可以是一个数组，Java容器或I/O channel等。</p></li><li><p>为函数式编程而生。对stream的任何修改都不会修改背后的数据源，比如对stream执行过滤操作并不会删除被过滤的元素，而是会产生一个不包含被过滤元素的新stream。</p></li><li><p>惰式执行。stream上的操作并不会立即执行，只有等到用户真正需要结果的时候才会执行。</p></li><li><p>可消费性。stream只能被“消费”一次，一旦遍历过就会失效，就像容器的迭代器那样，想要再次遍历必须重新生成。</p></li></ul><hr><blockquote><h1 id="一、获取stream"><a href="#一、获取stream" class="headerlink" title="一、获取stream"></a>一、获取stream</h1></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、数组</span></span><br><span class="line">String[] arr = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;cd&quot;</span>, <span class="string">&quot;ef&quot;</span>&#125;;</span><br><span class="line">Stream&lt;String&gt; arrStream = Arrays.stream(arr);</span><br><span class="line"><span class="comment">// 2、集合</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;cd&quot;</span>, <span class="string">&quot;ef&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; colStream = list.stream();</span><br><span class="line"><span class="comment">// 3、值</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;cd&quot;</span>, <span class="string">&quot;ef&quot;</span>);</span><br></pre></td></tr></table></figure><hr><blockquote><h1 id="二、stream方法使用"><a href="#二、stream方法使用" class="headerlink" title="二、stream方法使用"></a>二、stream方法使用</h1></blockquote><p>user类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wang.yinggang.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; list = Arrays.asList(</span><br><span class="line">   <span class="comment">// name，age</span></span><br><span class="line">    <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>, <span class="number">11</span>),</span><br><span class="line">    <span class="keyword">new</span> User(<span class="string">&quot;王五&quot;</span>, <span class="number">20</span>),</span><br><span class="line">    <span class="keyword">new</span> User(<span class="string">&quot;王五&quot;</span>, <span class="number">91</span>),</span><br><span class="line">    <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>, <span class="number">8</span>),</span><br><span class="line">    <span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>),</span><br><span class="line">    <span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>),</span><br><span class="line">    <span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h3 id="1、forEach"><a href="#1、forEach" class="headerlink" title="1、forEach()"></a>1、forEach()</h3><p>使用该方法迭代流中的每个数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * forEach 迭代输出每条数据.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testForEach</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// java 8 前</span></span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 前&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(User user: list)&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// java 8 lambda</span></span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 lambda&quot;</span>);</span><br><span class="line">  list.forEach(user -&gt; System.out.println(user));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// java 8 stream lambda</span></span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 stream lambda&quot;</span>);</span><br><span class="line">  list.stream().forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>console-&gt;</p><p><img src="/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/Stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/image-20210420184536111.png" alt="image-20210420184536111"></p><hr><h3 id="2、sorted"><a href="#2、sorted" class="headerlink" title="2、sorted()"></a>2、sorted()</h3><p>使用该方法排序数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sort 排序.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;-----排序前-----&quot;</span>);</span><br><span class="line">  list.forEach(user -&gt; System.out.println(user));</span><br><span class="line">  System.out.println(<span class="string">&quot;-----排序后-----&quot;</span>);</span><br><span class="line">  <span class="comment">// java 8 前</span></span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 前&quot;</span>);</span><br><span class="line">  Collections.sort(list, <span class="keyword">new</span> Comparator&lt;User&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(User o1, User o2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> o1.getAge().compareTo(o2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// java 8 stream 方法引用</span></span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 stream 方法引用&quot;</span>);</span><br><span class="line">  list.stream().sorted(Comparator.comparing(User::getAge)).forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>console-&gt;</p><p><img src="/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/Stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/image-20210420184610720.png" alt="image-20210420184610720"></p><hr><h3 id="3、filter-："><a href="#3、filter-：" class="headerlink" title="3、filter()："></a>3、filter()：</h3><p>使用该方法过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * filter 过滤.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 输出年龄大于50的人</span></span><br><span class="line">  System.out.println(<span class="string">&quot;-----过滤前-----&quot;</span>);</span><br><span class="line">  list.forEach(user -&gt; System.out.println(user));</span><br><span class="line">  System.out.println(<span class="string">&quot;-----过滤后-----&quot;</span>);</span><br><span class="line">  <span class="comment">// java 8 前</span></span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 前&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(User user: list)&#123;</span><br><span class="line">    <span class="keyword">if</span> (user.getAge() &gt; <span class="number">50</span>) &#123;</span><br><span class="line">      System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// java 8 stream</span></span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 stream&quot;</span>);</span><br><span class="line">  list.stream().filter((User user) -&gt; user.getAge() &gt; <span class="number">50</span>).forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>console-&gt;</p><p><img src="/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/Stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/image-20210420184627641.png" alt="image-20210420184627641"></p><hr><h3 id="4、limit-："><a href="#4、limit-：" class="headerlink" title="4、limit()："></a>4、limit()：</h3><p>使用该方法截断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * limit 截断.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLimit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 从第三个开始截断，只输出前三个</span></span><br><span class="line">  System.out.println(<span class="string">&quot;-----截断前-----&quot;</span>);</span><br><span class="line">  list.forEach(user -&gt; System.out.println(user));</span><br><span class="line">  System.out.println(<span class="string">&quot;-----截断后-----&quot;</span>);</span><br><span class="line">  <span class="comment">// java 8 前</span></span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 前&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// java 8 stream</span></span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 stream&quot;</span>);</span><br><span class="line">  list.stream().limit(<span class="number">3</span>).forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>console-&gt;</p><p><img src="/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/Stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/image-20210420184639493.png" alt="image-20210420184639493"></p><hr><h3 id="5、skip-："><a href="#5、skip-：" class="headerlink" title="5、skip()："></a>5、skip()：</h3><p>与limit互斥，使用该方法跳过元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * skip 跳过.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSkip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 跳过前三个元素，从第四个开始输出</span></span><br><span class="line">  System.out.println(<span class="string">&quot;-----跳过前-----&quot;</span>);</span><br><span class="line">  list.forEach(user -&gt; System.out.println(user));</span><br><span class="line">  System.out.println(<span class="string">&quot;-----跳过后-----&quot;</span>);</span><br><span class="line">  <span class="comment">// java 8 前</span></span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 前&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// java 8 stream</span></span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 stream&quot;</span>);</span><br><span class="line">  list.stream().skip(<span class="number">3</span>).forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>console-&gt;</p><p><img src="/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/Stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/image-20210420184654798.png" alt="image-20210420184654798"></p><hr><h3 id="6、distinct-："><a href="#6、distinct-：" class="headerlink" title="6、distinct()："></a>6、distinct()：</h3><p>使用该方法去重，注意：必须重写对应泛型的hashCode()和equals()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * distinct 去重.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDistinct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 因为Arrays.asList() 返回的是Arrays的内部类ArrayList，操作remove，add会报错</span></span><br><span class="line">  List&lt;User&gt; users = <span class="keyword">new</span> ArrayList(list);</span><br><span class="line">  <span class="comment">// 为list去除重复数据</span></span><br><span class="line">  System.out.println(<span class="string">&quot;-----去重前-----&quot;</span>);</span><br><span class="line">  list.forEach(user -&gt; System.out.println(user));</span><br><span class="line">  System.out.println(<span class="string">&quot;-----去重后-----&quot;</span>);</span><br><span class="line">  <span class="comment">// java 8 前</span></span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 前&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; users.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = users.size() - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (users.get(j).getAge() == users.get(i).getAge() &amp;&amp; users.get(j).getName()</span><br><span class="line">          .equals(users.get(i).getName())) &#123;</span><br><span class="line">        users.remove(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// java 8 stream</span></span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 stream&quot;</span>);</span><br><span class="line">  users.stream().distinct().forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>console-&gt;</p><p><img src="/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/Stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/image-20210420184707525.png" alt="image-20210420184707525"></p><hr><p>***根据上述方法，完成去重+按照年龄大于40以后从小到大+只取前二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 去重+按照年龄大于40以后从小到大+只取前二</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  list.stream().distinct().filter(user -&gt; user.getAge() &gt; <span class="number">40</span>).sorted(</span><br><span class="line">      Comparator.comparing(User::getAge)).limit(<span class="number">2</span>).forEach(user -&gt; System.out</span><br><span class="line">      .println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>console-&gt;</p><p><img src="/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/Stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/image-20210420184723600.png" alt="image-20210420184723600"></p><hr><h3 id="7、max，min，sum，avg，count"><a href="#7、max，min，sum，avg，count" class="headerlink" title="7、max，min，sum，avg，count"></a>7、max，min，sum，avg，count</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试计算.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  IntSummaryStatistics num = list.stream().mapToInt(u -&gt; u.getAge())</span><br><span class="line">      .summaryStatistics();</span><br><span class="line">  System.out.println(<span class="string">&quot;总共人数：&quot;</span> + num.getCount());</span><br><span class="line">  System.out.println(<span class="string">&quot;平均年龄：&quot;</span> + num.getAverage());</span><br><span class="line">  System.out.println(<span class="string">&quot;最大年龄：&quot;</span> + num.getMax());</span><br><span class="line">  System.out.println(<span class="string">&quot;最小年龄：&quot;</span> + num.getMin());</span><br><span class="line">  System.out.println(<span class="string">&quot;年龄之和：&quot;</span> + num.getSum());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>console-&gt;</p><p><img src="/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/Stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/image-20210420184737679.png" alt="image-20210420184737679"></p><hr><h3 id="8、map-："><a href="#8、map-：" class="headerlink" title="8、map()："></a>8、map()：</h3><p>接收一个方法作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * map 映射.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 只输出所有人的年龄</span></span><br><span class="line">  list.stream().forEach(user -&gt; System.out.println(user));</span><br><span class="line">  System.out.println(<span class="string">&quot;映射后-----&gt;&quot;</span>);</span><br><span class="line">  List&lt;Integer&gt; ages = list.stream().map(user -&gt; user.getAge()).collect(toList());</span><br><span class="line">  ages.forEach(age -&gt; System.out.println(age));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 小写转大写</span></span><br><span class="line">  List&lt;String&gt; words = Arrays.asList(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;vvvv&quot;</span>, <span class="string">&quot;cccc&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;全部大写----&gt;&quot;</span>);</span><br><span class="line">  List&lt;String&gt; collect = words.stream().map(s -&gt; s.toUpperCase()).collect(toList());</span><br><span class="line">  collect.forEach(s -&gt; System.out.println(s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>console-&gt;</p><p><img src="/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/Stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/image-20210420184750670.png" alt="image-20210420184750670"></p><hr><h3 id="9、flatMap-："><a href="#9、flatMap-：" class="headerlink" title="9、flatMap()："></a>9、flatMap()：</h3><p>对每个元素执行mapper指定的操作，并用所有mapper返回的Stream中的元素组成一个新的Stream作为最终返回结果，通俗易懂就是将原来的stream中的所有元素都展开组成一个新的stream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * flatMap .</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFlatMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//创建一个 装有两个泛型为integer的集合</span></span><br><span class="line">   Stream&lt;List&lt;Integer&gt;&gt; stream = Stream.of(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), Arrays.asList(<span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">   <span class="comment">// 将两个合为一个</span></span><br><span class="line">   Stream&lt;Integer&gt; integerStream = stream.flatMap(</span><br><span class="line">       (Function&lt;List&lt;Integer&gt;, Stream&lt;Integer&gt;&gt;) integers -&gt; integers.stream());</span><br><span class="line">   <span class="comment">// 为新的集合</span></span><br><span class="line">   List&lt;Integer&gt; collect = integerStream.collect(toList());</span><br><span class="line">   System.out.println(<span class="string">&quot;新stream大小:&quot;</span>+collect.size());</span><br><span class="line">   System.out.println(<span class="string">&quot;-----合并后-----&quot;</span>);</span><br><span class="line">   collect.forEach(o -&gt; System.out.println(o));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>console-&gt;</p><p>!<img src="/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/Stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210420184758938.png" alt="image-20210420184758938"></p><hr><h3 id="10、findFirst-："><a href="#10、findFirst-：" class="headerlink" title="10、findFirst() ："></a>10、findFirst() ：</h3><p>使用该方法获取第一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * findFirst 获取第一个元素.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">  User user = list.stream().findFirst().get();</span><br><span class="line">  System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>console-&gt;</p><p><img src="/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/Stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/image-20210420184809569.png" alt="image-20210420184809569"></p><hr><h3 id="11、reduce-："><a href="#11、reduce-：" class="headerlink" title="11、reduce() ："></a>11、reduce() ：</h3><p>多面手</p><p><em>reduce</em> 操作可以实现从一组元素中生成一个值</p><p><code>sum()</code>、<code>max()</code>、<code>min()</code>、<code>count()</code>等都是<em>reduce</em>操作，将他们单独设为函数只是因为常用</p><p>例如：找到年龄最大的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  List&lt;User&gt; list = Arrays.asList(</span><br><span class="line">      <span class="comment">// name，age</span></span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>, <span class="number">11</span>),</span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;王五&quot;</span>, <span class="number">20</span>),</span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;王五&quot;</span>, <span class="number">91</span>),</span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>, <span class="number">8</span>),</span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>),</span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>),</span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  Optional&lt;User&gt; reduce = list.stream().reduce((s1, s2) -&gt; s1.getAge() &gt; s2.getAge() ? s1 : s2);</span><br><span class="line">  User user = reduce.get();</span><br><span class="line">  System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">  List&lt;User&gt; list = Arrays.asList(</span><br><span class="line">      <span class="comment">// name，age</span></span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>, <span class="number">11</span>),</span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;王五&quot;</span>, <span class="number">20</span>),</span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;王五&quot;</span>, <span class="number">91</span>),</span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>, <span class="number">8</span>),</span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>),</span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>),</span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>)</span><br><span class="line">  );</span><br><span class="line">  Optional&lt;User&gt; max = list.stream().max(Comparator.comparing(User::getAge));</span><br><span class="line">  User user = max.get();</span><br><span class="line">  System.out.println(user);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/Stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/image-20210420184816705.png" alt="image-20210420184816705"></p><p>例如：求所有人的年龄和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  List&lt;User&gt; list = Arrays.asList(</span><br><span class="line">      <span class="comment">// name，age</span></span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>, <span class="number">11</span>),</span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;王五&quot;</span>, <span class="number">20</span>),</span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;王五&quot;</span>, <span class="number">91</span>),</span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>, <span class="number">8</span>),</span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>),</span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>),</span><br><span class="line">      <span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 求年龄之和</span></span><br><span class="line">  Integer reduce = list.stream().reduce(<span class="number">0</span>, <span class="comment">// 该参数为初始值</span></span><br><span class="line">      (integer, user) -&gt; integer + user.getAge(), <span class="comment">// 该参数为累加器，新元素如何累加</span></span><br><span class="line">      (integer, integer2) -&gt; integer + integer2);<span class="comment">// 多个部分如何合并</span></span><br><span class="line">  System.out.println(reduce);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>console</p><p><img src="/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/Stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/image-20210420184823841.png" alt="image-20210420184823841"></p><hr><h3 id="12、collect"><a href="#12、collect" class="headerlink" title="12、collect()"></a>12、collect()</h3><p>使用collect()做字符串join</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  @Test</span><br><span class="line">  public void reduce() &#123;</span><br><span class="line">    &#x2F;&#x2F; 使用Collectors.joining()拼接字符串</span><br><span class="line">    Stream&lt;String&gt; stream &#x3D; Stream.of(&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;,&quot;赵六&quot;);</span><br><span class="line">&#x2F;&#x2F;    String s &#x3D; stream.collect(Collectors.joining()); &#x2F;&#x2F; 张三李四王五赵六</span><br><span class="line">&#x2F;&#x2F;    String s &#x3D; stream.collect(Collectors.joining(&quot;-&quot;)); &#x2F;&#x2F; 张三-李四-王五-赵六</span><br><span class="line">    String s &#x3D; stream.collect(Collectors.joining(&quot;-&quot;, &quot;(&quot;, &quot;)&quot;)); &#x2F;&#x2F; (张三-李四-王五-赵六)</span><br><span class="line">    System.out.println(s);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="13、toList"><a href="#13、toList" class="headerlink" title="13、toList"></a>13、toList</h3><p>使用 toList 接收处理完成的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">  list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">  list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">  list.add(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">  list.add(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">  list.add(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">  List&lt;String&gt; collect = list.stream().distinct().collect(Collectors.toList());</span><br><span class="line">  System.out.println(list);  <span class="comment">// [1, 1, 2, 4, 4, 6]</span></span><br><span class="line">  System.out.println(collect); <span class="comment">// [1, 2, 4, 6]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14、Collectors"><a href="#14、Collectors" class="headerlink" title="14、Collectors"></a>14、Collectors</h3><p>集合转字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testJoining</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//直接相连</span></span><br><span class="line">      String authors = list.stream().map(User::getName).collect(Collectors.joining());</span><br><span class="line">      System.out.println(<span class="string">&quot;获取作者集合字符串： &quot;</span> + authors);<span class="comment">//张三李四王五张三李四王五张三李四王五张三张三张三</span></span><br><span class="line">      <span class="comment">//增加连接符 - distinct去除重复元素</span></span><br><span class="line">      String authorsJoin = list.stream().map(User::getName).distinct().collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;获取作者集合字符串-有连接符： &quot;</span> + authorsJoin);<span class="comment">//张三,李四,王五</span></span><br><span class="line">      String collect = list.stream().map(User::getName).distinct().collect(Collectors.joining(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;获取作者集合字符串-有连接符-有开始结束符号： &quot;</span> + collect);<span class="comment">//[张三,李四,王五]</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取对象集合指定的字段或数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      List&lt;String&gt; authorList = list.stream().map(User::getName).collect(toList());</span><br><span class="line">      System.out.println(<span class="string">&quot;获取指定字段的集合： &quot;</span> + authorList);<span class="comment">//[张三, 李四, 王五, 张三, 李四, 王五, 张三, 李四, 王五, 张三, 张三, 张三]</span></span><br><span class="line"></span><br><span class="line">      List&lt;String&gt; authorDistinct = list.stream().map(User::getName).distinct().collect(toList());</span><br><span class="line">      System.out.println(<span class="string">&quot;获取指定字段的集合： &quot;</span> + authorDistinct);<span class="comment">//[张三, 李四, 王五]</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="15、GroupBy"><a href="#15、GroupBy" class="headerlink" title="15、GroupBy()"></a>15、GroupBy()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分组</span></span><br><span class="line"><span class="comment"> * 此处需要注意，返回的Collector收集器是不支持并发的</span></span><br><span class="line"><span class="comment"> * 当需要进行排序的时候可使用TreeMap进行排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGroupBy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据人员分组</span></span><br><span class="line">        <span class="comment">//&lt;name 对象集合&gt;</span></span><br><span class="line">    Map&lt;String, List&lt;User&gt;&gt; collect = list.stream().collect(Collectors.groupingBy(User::getName));</span><br><span class="line">    System.out.println(collect);</span><br><span class="line">    <span class="comment">//根据人员分组计数</span></span><br><span class="line">        <span class="comment">//&lt;name 对象数量&gt;</span></span><br><span class="line">    Map&lt;String, Long&gt; collect1 = list.stream().collect(Collectors.groupingBy(User::getName, Collectors.counting()));</span><br><span class="line">    System.out.println(collect1);</span><br><span class="line">    <span class="comment">//获取人员的平均值 -默认是hashMap是无序的</span></span><br><span class="line">    Map&lt;String, Double&gt; sorted = list.stream().collect(Collectors.groupingBy(User::getName, Collectors.averagingDouble(item -&gt; item.getAge())));</span><br><span class="line">    System.out.println(<span class="string">&quot;获取每组年龄的平均值： &quot;</span> + sorted);</span><br><span class="line">    <span class="comment">//倒序排列-key的倒序-自定义一个比较器</span></span><br><span class="line">    Map&lt;String, Double&gt; sortedTreeMapComparator = list.stream().collect(Collectors.groupingBy(User::getName, () -&gt; <span class="keyword">new</span> TreeMap&lt;&gt;(Comparator.reverseOrder()), Collectors.averagingDouble((item -&gt; item.getAge()))));</span><br><span class="line">    System.out.println(<span class="string">&quot;获取人员的平均值-倒序： &quot;</span> + sortedTreeMapComparator);</span><br><span class="line">    <span class="comment">//倒序排列-key的倒序-treeMp指定是降序map，调用descendingMap</span></span><br><span class="line">    Map&lt;String, Double&gt; sortedTreeMap = list.stream().collect(Collectors.groupingBy(User::getName, () -&gt; <span class="keyword">new</span> TreeMap().descendingMap(), Collectors.averagingDouble((item -&gt; item.getAge()))));</span><br><span class="line">    System.out.println(<span class="string">&quot;获取人员的平均值-倒序： &quot;</span> + sortedTreeMap);<span class="comment">/**/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>线程安全的</p><p>​    ↓</p><p>​    ↓</p><p>​    ↓</p><h3 id="16、groupingByConcurrent"><a href="#16、groupingByConcurrent" class="headerlink" title="16、groupingByConcurrent"></a>16、groupingByConcurrent</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分组能够保证线程安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGroupByConcurrent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ConcurrentMap&lt;String, List&lt;User&gt;&gt; collect = list.stream().collect(Collectors.groupingByConcurrent(User::getName));</span><br><span class="line">    System.out.println(<span class="string">&quot;根据人员名称进行分组： &quot;</span> + collect);</span><br><span class="line">    ConcurrentMap&lt;String, Long&gt; collect1 = list.stream().collect(Collectors.groupingByConcurrent(User::getName, Collectors.counting()));</span><br><span class="line">    System.out.println(<span class="string">&quot;根据人员进行分组并计算数量： &quot;</span> + collect1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-将一个对象集合转成另一个对象的集合"><a href="#1-将一个对象集合转成另一个对象的集合" class="headerlink" title="1.将一个对象集合转成另一个对象的集合"></a>1.将一个对象集合转成另一个对象的集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">优雅的将一个对象的集合转化成另一个对象的集合</span><br><span class="line"></span><br><span class="line">List&lt;OrderDetail&gt; orderDetailList = orderDetailService.listOrderDetails();</span><br><span class="line">List&lt;CartDTO&gt; cartDTOList = orderDetailList.stream()</span><br><span class="line">                .map(e -&gt; <span class="keyword">new</span> CartDTO(e.getProductId(), e.getProductQuantity()))</span><br><span class="line">                .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="2-集合交集"><a href="#2-集合交集" class="headerlink" title="2.集合交集"></a>2.集合交集</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">交集 (list1 + list2)</span><br><span class="line"></span><br><span class="line">List&lt;T&gt; intersect = list1.stream()</span><br><span class="line">                         .filter(list2::contains)</span><br><span class="line">                         .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="3-集合差集"><a href="#3-集合差集" class="headerlink" title="3.集合差集"></a>3.集合差集</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(list1 - list2)</span></span><br><span class="line">List&lt;String&gt; reduce1 = list1.stream().filter(item -&gt; !list2.contains(item)).collect(toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">//(list2 - list1)</span></span><br><span class="line">List&lt;String&gt; reduce2 = list2.stream().filter(item -&gt; !list1.contains(item)).collect(toList());</span><br></pre></td></tr></table></figure><h3 id="4-集合并集"><a href="#4-集合并集" class="headerlink" title="4.集合并集"></a>4.集合并集</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用并行流</span></span><br><span class="line">List&lt;String&gt; listAll = list1.parallelStream().collect(toList());</span><br><span class="line">List&lt;String&gt; listAll2 = list2.parallelStream().collect(toList());</span><br><span class="line">listAll.addAll(listAll2);</span><br></pre></td></tr></table></figure><h3 id="5-去重并集"><a href="#5-去重并集" class="headerlink" title="5.去重并集"></a>5.去重并集</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; listAllDistinct = listAll.stream()</span><br><span class="line">.distinct().collect(toList());</span><br></pre></td></tr></table></figure><h3 id="6-从List中过滤出一个元素"><a href="#6-从List中过滤出一个元素" class="headerlink" title="6.从List中过滤出一个元素"></a>6.从List中过滤出一个元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User match = users.stream()</span><br><span class="line">.filter((user) -&gt; user.getId() == <span class="number">1</span>).findAny().get();</span><br></pre></td></tr></table></figure><h3 id="7-Map集合转-List"><a href="#7-Map集合转-List" class="headerlink" title="7.Map集合转 List"></a>7.Map集合转 List</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; list = map.entrySet().stream().sorted(Comparator.comparing(e -&gt; e.getKey()))</span><br><span class="line">.map(e -&gt; <span class="keyword">new</span> Person(e.getKey(), e.getValue())).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">List&lt;Person&gt; list = map.entrySet().stream().sorted(Comparator.comparing(Map.Entry::getValue)).map(e -&gt; <span class="keyword">new</span> Person(e.getKey(), e.getValue())).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">List&lt;Person&gt; list = map.entrySet().stream().sorted(Map.Entry.comparingByKey()).map(e -&gt; <span class="keyword">new</span> Person(e.getKey(), e.getValue())).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="8-Collectors-toList"><a href="#8-Collectors-toList" class="headerlink" title="8.Collectors toList"></a>8.Collectors toList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">streamArr.collect(Collectors.toList());</span><br><span class="line">List&lt;Integer&gt; collectList = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">System.out.println(<span class="string">&quot;collectList: &quot;</span> + collectList);</span><br><span class="line"><span class="comment">// 打印结果 collectList: [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="9-Collectors-toMap"><a href="#9-Collectors-toMap" class="headerlink" title="9.Collectors toMap"></a>9.Collectors toMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">map value 为对象 student</span><br><span class="line">Map&lt;Integer, Student&gt; map = list.stream().collect(Collectors.toMap(Student::getId, student -&gt; student));</span><br><span class="line"><span class="comment">// 遍历打印结果</span></span><br><span class="line">map.forEach((key, value) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;key: &quot;</span> + key + <span class="string">&quot;    value: &quot;</span> + value);</span><br><span class="line">&#125;);</span><br><span class="line">map value 为对象中的属性</span><br><span class="line">Map&lt;Integer, String&gt; map = list.stream().collect(Collectors.toMap(Student::getId, Student::getName));</span><br><span class="line">map.forEach((key, value) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;key: &quot;</span> + key + <span class="string">&quot;    value: &quot;</span> + value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="10-List集合转-Map"><a href="#10-List集合转-Map" class="headerlink" title="10.List集合转 Map"></a>10.List集合转 Map</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*使用Collectors.toMap形式*/</span></span><br><span class="line">Map result = peopleList.stream().collect(Collectors.toMap(p -&gt; p.name, p -&gt; p.age, (k1, k2) -&gt; k1));</span><br><span class="line"><span class="comment">//其中Collectors.toMap方法的第三个参数为键值重复处理策略，如果不传入第三个参数，当有相同的键时，会抛出一个IlleageStateException。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">Map&lt;Integer, String&gt; result1 = list.stream().collect(Collectors.toMap(Hosting::getId, Hosting::getName));</span><br><span class="line"><span class="comment">//List&lt;People&gt; -&gt; Map&lt;String,Object&gt;</span></span><br><span class="line">List&lt;People&gt; peopleList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">peopleList.add(<span class="keyword">new</span> People(<span class="string">&quot;test1&quot;</span>, <span class="string">&quot;111&quot;</span>));</span><br><span class="line">peopleList.add(<span class="keyword">new</span> People(<span class="string">&quot;test2&quot;</span>, <span class="string">&quot;222&quot;</span>));</span><br><span class="line">Map result = peopleList.stream().collect(HashMap::<span class="keyword">new</span>,(map,p)-&gt;map.put(p.name,p.age),Map::putAll);</span><br></pre></td></tr></table></figure><h3 id="11-List-转-Map-lt-Integer-Apple-gt"><a href="#11-List-转-Map-lt-Integer-Apple-gt" class="headerlink" title="11.List 转 Map&lt;Integer,Apple&gt;"></a>11.List 转 Map&lt;Integer,Apple&gt;</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * List&lt;Apple&gt; -&gt; Map&lt;Integer,Apple&gt;</span></span><br><span class="line"><span class="comment"> * 需要注意的是：</span></span><br><span class="line"><span class="comment"> * toMap 如果集合对象有重复的key，会报错Duplicate key ....</span></span><br><span class="line"><span class="comment"> *  apple1,apple12的id都为1。</span></span><br><span class="line"><span class="comment"> *  可以用 (k1,k2)-&gt;k1 来设置，如果有重复的key,则保留key1,舍弃key2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Map&lt;Integer, Apple&gt; appleMap = appleList.stream().collect(Collectors.toMap(Apple::getId, a -&gt; a,(k1, k2) -&gt; k1));</span><br></pre></td></tr></table></figure><h3 id="12-List-转-List-lt-Map-lt-String-Object-gt-gt"><a href="#12-List-转-List-lt-Map-lt-String-Object-gt-gt" class="headerlink" title="12.List 转 List&lt;Map&lt;String,Object&gt;&gt;"></a>12.List 转 List&lt;Map&lt;String,Object&gt;&gt;</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Map&lt;String,Object&gt;&gt; personToMap = peopleList.stream().map((p) -&gt; &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>, p.name);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>, p.age);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;).collect(Collectors.toList());</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; personToMap = peopleList.stream().collect(ArrayList::<span class="keyword">new</span>, (list, p) -&gt; &#123;</span><br><span class="line">   Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>, p.name);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>, p.age);</span><br><span class="line">    list.add(map);</span><br><span class="line">&#125;, List::addAll);</span><br></pre></td></tr></table></figure><p>字典查询和数据转换 toMap时，如果value为null,会报空指针异常<br>解决办法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, List&lt;Dict&gt;&gt; resultMaps = Arrays.stream(dictTypes)</span><br><span class="line">.collect(Collectors.toMap(i -&gt; i, i -&gt; Optional.ofNullable(dictMap.get(i)).orElse(<span class="keyword">new</span> ArrayList&lt;&gt;()), (k1, k2) -&gt; k2));</span><br></pre></td></tr></table></figure><p>解决办法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, List&lt;Dict&gt;&gt; resultMaps = Arrays.stream(dictTypes)</span><br><span class="line">.filter(i -&gt; dictMap.get(i) != <span class="keyword">null</span>).collect(Collectors.toMap(i -&gt; i, dictMap::get, (k1, k2) -&gt; k2));</span><br></pre></td></tr></table></figure><p>解决办法三：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; memberMap = list.stream().collect(HashMap::<span class="keyword">new</span>, (m,v)-&gt;</span><br><span class="line">    m.put(v.getId(), v.getImgPath()),HashMap::putAll);</span><br><span class="line">System.out.println(memberMap);</span><br></pre></td></tr></table></figure><p>解决办法四：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; memberMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">list.forEach((answer) -&gt; memberMap.put(answer.getId(), answer.getImgPath()));</span><br><span class="line">System.out.println(memberMap);</span><br><span class="line"></span><br><span class="line">Map&lt;String, String&gt; memberMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Member member : list) &#123;</span><br><span class="line">    memberMap.put(member.getId(), member.getImgPath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设有一个User实体类，有方法getId(),getName(),getAge()等方法，现在想要将User类型的流收集到一个Map中，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;User&gt; userStream = Stream.of(<span class="keyword">new</span> User(<span class="number">0</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">18</span>), <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;张四&quot;</span>, <span class="number">19</span>), <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;张五&quot;</span>, <span class="number">19</span>), <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;老张&quot;</span>, <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, User&gt; userMap = userSteam.collect(Collectors.toMap(User::getId, item -&gt; item));</span><br><span class="line"><span class="comment">//&#123;0=Userr(id=0, name=张三, age=18), 1=Userr(id=1, name=张四, age=19), 2=Userr(id=2, name=张五, age=19), 3=Userr(id=3, name=老张, age=50)&#125;</span></span><br></pre></td></tr></table></figure><p>假设要得到按年龄分组的Map&lt;Integer,List&gt;,可以按这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, List&lt;User&gt;&gt; ageMap = userStream.collect(Collectors.toMap(User::getAge, Collections::singletonList, (a, b) -&gt; &#123;</span><br><span class="line">            List&lt;User&gt; resultList = <span class="keyword">new</span> ArrayList&lt;&gt;(a);</span><br><span class="line">            resultList.addAll(b);</span><br><span class="line">            <span class="keyword">return</span> resultList;</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, String&gt; map = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .collect(Collectors.toMap(</span><br><span class="line">        p -&gt; p.age,</span><br><span class="line">        p -&gt; p.name,</span><br><span class="line">        (name1, name2) -&gt; name1 + <span class="string">&quot;;&quot;</span> + name2));</span><br><span class="line"></span><br><span class="line">System.out.println(map);</span><br><span class="line"><span class="comment">// &#123;18=Max, 23=Peter;Pamela, 12=David&#125;</span></span><br></pre></td></tr></table></figure><h3 id="13-Map-转-另一个Map"><a href="#13-Map-转-另一个Map" class="headerlink" title="13.Map 转 另一个Map"></a>13.Map 转 另一个Map</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例1 Map&lt;String, List&lt;String&gt;&gt; 转 Map&lt;String,User&gt;</span></span><br><span class="line">Map&lt;String,List&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;java&quot;</span>, Arrays.asList(<span class="string">&quot;1.7&quot;</span>, <span class="string">&quot;1.8&quot;</span>));</span><br><span class="line">map.entrySet().stream();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; versions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Map&lt;String, User&gt; collect = map.entrySet().stream()</span><br><span class="line">                .collect(Collectors.toMap(</span><br><span class="line">                        item -&gt; item.getKey(),</span><br><span class="line">                        item -&gt; <span class="keyword">new</span> User(item.getValue())));</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例2 Map&lt;String,Integer&gt;  转 Map&lt;String,Double&gt;</span></span><br><span class="line">Map&lt;String, Integer&gt; pointsByName = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">Map&lt;String, Integer&gt; maxPointsByName = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">Map&lt;String, Double&gt; gradesByName = pointsByName.entrySet().stream()</span><br><span class="line">        .map(entry -&gt; <span class="keyword">new</span> AbstractMap.SimpleImmutableEntry&lt;&gt;(</span><br><span class="line">                entry.getKey(), ((<span class="keyword">double</span>) entry.getValue() /</span><br><span class="line">                        maxPointsByName.get(entry.getKey())) * <span class="number">100d</span>))</span><br><span class="line">        .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));</span><br></pre></td></tr></table></figure><h3 id="14-List-lt-String-gt-转String"><a href="#14-List-lt-String-gt-转String" class="headerlink" title="14.List&lt; String&gt; 转String"></a>14.List&lt; String&gt; 转String</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java8 String.join 方式</span></span><br><span class="line">List&lt;String&gt; webs = Arrays.asList(<span class="string">&quot;voidcc.com&quot;</span>, <span class="string">&quot;voidmvn.com&quot;</span>, <span class="string">&quot;voidtool.com&quot;</span>);</span><br><span class="line"><span class="comment">//webs 必须是List&lt;String&gt;</span></span><br><span class="line">String allwebs = String.join(<span class="string">&quot;,&quot;</span>, webs);</span><br><span class="line">System.out.println(allwebs);</span><br><span class="line"></span><br><span class="line"><span class="comment">//stream</span></span><br><span class="line">List&lt;String&gt; webs = Arrays.asList(<span class="string">&quot;voidcc.com&quot;</span>, <span class="string">&quot;voidmvn.com&quot;</span>, <span class="string">&quot;voidtool.com&quot;</span>);</span><br><span class="line">String allwebs = webs.stream().collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">System.out.println(allwebs);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="15-Collectors-toSet"><a href="#15-Collectors-toSet" class="headerlink" title="15.Collectors toSet"></a>15.Collectors toSet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; result = Stream.of(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;aa&quot;</span>).collect(HashSet::<span class="keyword">new</span>, HashSet::add, HashSet::addAll);</span><br><span class="line"><span class="comment">//Collectors类中已经预定义好了toList，toSet，toMap，toCollection等方便使用的方法，所以以上代码还可以简化如下：</span></span><br><span class="line">Set&lt;String&gt; result2 = Stream.of(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;aa&quot;</span>).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">Set&lt;Integer&gt; collectSet = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).collect(Collectors.toSet());</span><br><span class="line">System.out.println(<span class="string">&quot;collectSet: &quot;</span> + collectSet);</span><br><span class="line"><span class="comment">// 打印结果 collectSet: [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">Stack stack1 = stream.collect(Collectors.toCollection(Stack::<span class="keyword">new</span>));</span><br><span class="line"><span class="comment">// collect toString</span></span><br><span class="line">String str = stream.collect(Collectors.joining()).toString();</span><br></pre></td></tr></table></figure><h3 id="16-排序"><a href="#16-排序" class="headerlink" title="16.排序"></a>16.排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按照自然顺序进行排序 如果要自定义排序sorted 传入自定义的 Comparator</span></span><br><span class="line">list.stream()</span><br><span class="line">    .sorted()</span><br><span class="line">    .filter((s) -&gt; s.startsWith(<span class="string">&quot;a&quot;</span>))</span><br><span class="line">    .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象排序比较 请重写对象的equals()和hashCode()方法</span></span><br><span class="line">list.sorted((a, b) -&gt; b.compareTo(a))</span><br><span class="line"></span><br><span class="line">Collections.sort(names, (a, b) -&gt; b.compareTo(a));</span><br></pre></td></tr></table></figure><h3 id="17-比较"><a href="#17-比较" class="headerlink" title="17.比较"></a>17.比较</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Person&gt; comparator = (p1, p2) -&gt; p1.firstName.compareTo(p2.firstName);</span><br><span class="line"></span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Doe&quot;</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Wonderland&quot;</span>);</span><br><span class="line"></span><br><span class="line">comparator.compare(p1, p2);             <span class="comment">// &gt; 0</span></span><br><span class="line">comparator.reversed().compare(p1, p2);  <span class="comment">// &lt; 0</span></span><br></pre></td></tr></table></figure><h3 id="18-Collectors-groupingBy-分组"><a href="#18-Collectors-groupingBy-分组" class="headerlink" title="18.Collectors groupingBy 分组"></a>18.Collectors groupingBy 分组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, List&lt;User&gt;&gt; ageMap2 = userStream</span><br><span class="line">.collect(Collectors.groupingBy(User::getAge));</span><br></pre></td></tr></table></figure><p>对集合按照多个属性分组<br>将多个字段拼接成一个新字段，然后再使用groupBy分组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, List&lt;EntryDeliveryDetailywk&gt;&gt; detailmap = details.stream()</span><br><span class="line">.collect(Collectors.groupingBy(<span class="keyword">this</span>::fetchGroupKey));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">fetchGroupKey</span><span class="params">(EntryDeliveryDetailywk detail)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> detail.getSkuId().toString()</span><br><span class="line">        + detail.getItemsName()</span><br><span class="line">        + detail.getWarehouseId().toString()</span><br><span class="line">        + detail.getSupplierId().toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>groupingBy 分组后操作<br>//Collectors中还提供了一些对分组后的元素进行downStream处理的方法：<br>//counting方法返回所收集元素的总数；<br>//summing方法会对元素求和；<br>//maxBy和minBy会接受一个比较器，求最大值，最小值；<br>//mapping函数会应用到downstream结果上，并需要和其他函数配合使用；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, Long&gt; sexCount = userStream.collect(Collectors.groupingBy(User::getSex,Collectors.counting()));</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, Integer&gt; ageCount = userStream.collect(Collectors.groupingBy(User::getSex,Collectors.summingInt(User::getAge)));</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, Optional&lt;User&gt;&gt; ageMax =  userStream.collect(Collectors.groupingBy(User::getSex,Collectors.maxBy(Comparator.comparing(User::getAge))));</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, List&lt;String&gt;&gt; nameMap =  userStream.collect(Collectors.groupingBy(User::getSex,Collectors.mapping(User::getName,Collectors.toList())));</span><br></pre></td></tr></table></figure><p>groupingBy 根据<strong>年龄</strong>来分组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, List&gt; peopleByAge = peoples.stream()</span><br><span class="line">.filter(p -&gt; p.age &gt; <span class="number">12</span>).collect(Collectors.groupingBy(p -&gt; p.age, Collectors.toList()));</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>groupingBy 根据<strong>年龄</strong>分组，年龄对应的键值<strong>List存储</strong>的为Person的姓名:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, List&gt; peopleByAge = people.stream()</span><br><span class="line">.collect(Collectors.groupingBy(p -&gt; p.age, Collectors.mapping((Person p) -&gt; p.name, Collectors.toList())));</span><br><span class="line"><span class="comment">//mapping即为对各组进行投影操作，和Stream的map方法基本一致。</span></span><br></pre></td></tr></table></figure><p>groupingBy 根据<strong>姓名</strong>分组，获取每个姓名下人的年龄总和:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map sumAgeByName = peoples.stream().collect(Collectors.groupingBy(p -&gt; p.name, Collectors.reducing(<span class="number">0</span>, (Person p) -&gt; p.age, Integer::sum)));</span><br><span class="line"><span class="comment">/* 或者使用summingInt方法 */</span></span><br><span class="line">sumAgeByName = peoples.stream().collect(Collectors.groupingBy(p -&gt; p.name, Collectors.summingInt((Person p) -&gt; p.age)));</span><br></pre></td></tr></table></figure><p>groupingBy Boolean分组:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Boolean, List&lt;Integer&gt;&gt; collectGroup = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">            .collect(Collectors.groupingBy(it -&gt; it &gt; <span class="number">3</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;collectGroup : &quot;</span> + collectGroup);</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="comment">// collectGroup : &#123;false=[1, 2, 3], true=[4]&#125;</span></span><br></pre></td></tr></table></figure><p>groupingBy 按年龄分组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, List&lt;Person&gt;&gt; personsByAge = persons.stream().collect(Collectors.groupingBy(p -&gt; p.age));</span><br><span class="line">personsByAge.forEach((age, p) -&gt; System.out.format(<span class="string">&quot;age %s: %s\n&quot;</span>, age, p));</span><br><span class="line"><span class="comment">// age 18: [Max]</span></span><br><span class="line"><span class="comment">// age 23: [Peter, Pamela]</span></span><br><span class="line"><span class="comment">// age 12: [David]</span></span><br></pre></td></tr></table></figure><p>Map.merge() 类似于分组之后sum</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; studentScoreMap2 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       studentScoreList.forEach(studentScore -&gt; studentScoreMap2.merge(</span><br><span class="line">         studentScore.getStuName(),</span><br><span class="line">         studentScore.getScore(),</span><br><span class="line">         Integer::sum));</span><br></pre></td></tr></table></figure><p>Collectors partitioningBy<br>Collectors中还提供了partitioningBy方法，接受一个Predicate函数，该函数返回boolean值，用于将内容分为两组。假设User实体中包含性别信息getSex()，可以按如下写法将userStream按性别分组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Boolean, List&lt;User&gt;&gt; sexMap = userStream</span><br><span class="line">.collect(Collectors.partitioningBy(item -&gt; item.getSex() &gt; <span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>可以看到Java8的分组功能相当强大，当然你还可以完成更复杂的功能。另外Collectors中还存在一个类似groupingBy的方法：partitioningBy，它们的区别是partitioningBy为键值为Boolean类型的groupingBy，这种情况下它比groupingBy更有效率。<br>partitioningBy 将数字的Stream分解成奇数集合和偶数集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Boolean, List&lt;Integer&gt;&gt; collectParti = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">            .collect(Collectors.partitioningBy(it -&gt; it % <span class="number">2</span> == <span class="number">0</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;collectParti : &quot;</span> + collectParti);</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="comment">// collectParti : &#123;false=[1, 3], true=[2, 4]&#125;</span></span><br></pre></td></tr></table></figure><p>Collectors joining<br>Collectors.joining 收集Stream中的值，该方法可以方便地将Stream得到一个字符串。joining函数接受三个参数，分别表示允（用以分隔元素）、前缀和后缀:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">String names = peoples.stream().map(p-&gt;p.name).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">String strJoin = Stream.of(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">        .collect(Collectors.joining(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;strJoin: &quot;</span> + strJoin);</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="comment">// strJoin: [1,2,3,4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串连接</span></span><br><span class="line">String phrase = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .filter(p -&gt; p.age &gt;= <span class="number">18</span>)</span><br><span class="line">    .map(p -&gt; p.name)</span><br><span class="line">    .collect(Collectors.joining(<span class="string">&quot; and &quot;</span>, <span class="string">&quot;In Germany &quot;</span>, <span class="string">&quot; are of legal age.&quot;</span>));</span><br><span class="line">System.out.println(phrase);</span><br><span class="line"><span class="comment">// In Germany Max and Peter and Pamela are of legal age.</span></span><br></pre></td></tr></table></figure><p>组合 Collectors:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Boolean, Long&gt; partiCount = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">        .collect(Collectors.partitioningBy(it -&gt; it.intValue() % <span class="number">2</span> == <span class="number">0</span>,</span><br><span class="line">                Collectors.counting()));</span><br><span class="line">System.out.println(<span class="string">&quot;partiCount: &quot;</span> + partiCount);</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="comment">// partiCount: &#123;false=2, true=2&#125;</span></span><br></pre></td></tr></table></figure><p>Collectors分别提供了求平均值averaging、总数couting、最小值minBy、最大值maxBy、求和suming等操作。但是假如你希望将流中结果聚合为一个总和、平均值、最大值、最小值，那么Collectors.summarizing(Int/Long/Double)就是为你准备的，它可以一次行获取前面的所有结果，其返回值为(Int/Long/Double)SummaryStatistics。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DoubleSummaryStatistics dss = people.collect(Collectors.summarizingDouble((Person p)-&gt;p.age));</span><br><span class="line"><span class="keyword">double</span> average=dss.getAverage();</span><br><span class="line"><span class="keyword">double</span> max=dss.getMax();</span><br><span class="line"><span class="keyword">double</span> min=dss.getMin();</span><br><span class="line"><span class="keyword">double</span> sum=dss.getSum();</span><br><span class="line"><span class="keyword">double</span> count=dss.getCount();</span><br><span class="line"></span><br><span class="line">IntSummaryStatistics ageSummary = persons</span><br><span class="line">        .stream()</span><br><span class="line">        .collect(Collectors.summarizingInt(p -&gt; p.age));</span><br><span class="line"></span><br><span class="line">System.out.println(ageSummary);</span><br><span class="line"><span class="comment">// IntSummaryStatistics&#123;count=4, sum=76, min=12, average=19.000000, max=23&#125;</span></span><br></pre></td></tr></table></figure><p>使用collect可以将Stream转换成值。maxBy和minBy允许用户按照某个特定的顺序生成一个值。<br>averagingDouble:求平均值，Stream的元素类型为double<br>averagingInt:求平均值，Stream的元素类型为int<br>averagingLong:求平均值，Stream的元素类型为long<br>counting:Stream的元素个数<br>maxBy:在指定条件下的，Stream的最大元素<br>minBy:在指定条件下的，Stream的最小元素<br>reducing: reduce操作<br>summarizingDouble:统计Stream的数据(double)状态，其中包括count，min，max，sum和平均。<br>summarizingInt:统计Stream的数据(int)状态，其中包括count，min，max，sum和平均。<br>summarizingLong:统计Stream的数据(long)状态，其中包括count，min，max，sum和平均。<br>summingDouble:求和，Stream的元素类型为double<br>summingInt:求和，Stream的元素类型为int<br>summingLong:求和，Stream的元素类型为long</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Integer&gt; collectMaxBy = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">            .collect(Collectors.maxBy(Comparator.comparingInt(o -&gt; o)));</span><br><span class="line">System.out.println(<span class="string">&quot;collectMaxBy:&quot;</span> + collectMaxBy.get());</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="comment">// collectMaxBy:4</span></span><br></pre></td></tr></table></figure><p>Collectors averagingInt<br>计算集合的平均年龄</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Double averageAge = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .collect(Collectors.averagingInt(p -&gt; p.age));</span><br><span class="line"></span><br><span class="line">System.out.println(averageAge);     <span class="comment">// 19.0</span></span><br></pre></td></tr></table></figure><p>自定义 Collector</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Collector&lt;Person, StringJoiner, String&gt; personNameCollector =</span><br><span class="line">    Collector.of(</span><br><span class="line">        () -&gt; <span class="keyword">new</span> StringJoiner(<span class="string">&quot; | &quot;</span>),          <span class="comment">// supplier</span></span><br><span class="line">        (j, p) -&gt; j.add(p.name.toUpperCase()),  <span class="comment">// accumulator</span></span><br><span class="line">        (j1, j2) -&gt; j1.merge(j2),               <span class="comment">// combiner</span></span><br><span class="line">        StringJoiner::toString);                <span class="comment">// finisher</span></span><br><span class="line"></span><br><span class="line">String names = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .collect(personNameCollector);</span><br><span class="line"></span><br><span class="line">System.out.println(names);  <span class="comment">// MAX | PETER | PAMELA | DAVID</span></span><br></pre></td></tr></table></figure><h3 id="19-两个集合对象-根据对象属性相同相加得到新的对象"><a href="#19-两个集合对象-根据对象属性相同相加得到新的对象" class="headerlink" title="19.两个集合对象 根据对象属性相同相加得到新的对象"></a>19.两个集合对象 根据对象属性相同相加得到新的对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testsumList</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Student&gt; sumlist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    students.parallelStream().collect(Collectors.groupingBy(o-&gt;o.getA(),Collectors.toList())).forEach(</span><br><span class="line">            (id,t)-&gt;&#123;</span><br><span class="line">                t.stream().reduce(</span><br><span class="line">                        (a,b)-&gt;<span class="keyword">new</span> Student(a.getA(),a.getB()+b.getB(),a.getC()+b.getC())</span><br><span class="line">                ).ifPresent(sumlist::add);</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line">    System.out.println(sumlist);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JDK-1-8-新特性之Stream-详解&quot;&gt;&lt;a href=&quot;#JDK-1-8-新特性之Stream-详解&quot; class=&quot;headerlink&quot; title=&quot;JDK 1.8 新特性之Stream 详解&quot;&gt;&lt;/a&gt;JDK 1.8 新特性之Stream 详解&lt;/</summary>
      
    
    
    
    
    <category term="1.8新特性之Stream" scheme="http://example.com/tags/1-8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BStream/"/>
    
  </entry>
  
  <entry>
    <title>Lambda表达式</title>
    <link href="http://example.com/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-04-23T04:48:33.000Z</published>
    <updated>2021-04-23T15:42:46.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="（一）、初识Lambda"><a href="#（一）、初识Lambda" class="headerlink" title="（一）、初识Lambda"></a>（一）、初识Lambda</h1><h3 id="什么是Lambda表达式"><a href="#什么是Lambda表达式" class="headerlink" title="什么是Lambda表达式"></a>什么是Lambda表达式</h3><p>Lambda表达式是表示可传递匿名函数的一种简洁方式，Lambda表达式没有名称，但是有参数列表、函数主体、返回类型，还可能有一个可以抛出的异常列表。它是Java8新增的特性，有了它我们再也不用像之前那样写一堆笨重的匿名类代码了，我们先来体验一下。</p><h3 id="与匿名函数对比"><a href="#与匿名函数对比" class="headerlink" title="与匿名函数对比"></a>与匿名函数对比</h3><p>下面我们先举个例子，有这样一个表示<strong>口罩</strong>的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.more.study;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 口罩</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mask</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 品牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再创建一个口罩列表，添加一些口罩对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Mask&gt; maskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">maskList.add(<span class="keyword">new</span> Mask(<span class="string">&quot;3M&quot;</span>, <span class="string">&quot;KN95&quot;</span>));</span><br><span class="line">maskList.add(<span class="keyword">new</span> Mask(<span class="string">&quot;3M&quot;</span>, <span class="string">&quot;FFP2&quot;</span>));</span><br><span class="line">maskList.add(<span class="keyword">new</span> Mask(<span class="string">&quot;Honeywell&quot;</span>, <span class="string">&quot;KN95&quot;</span>));</span><br><span class="line">maskList.add(<span class="keyword">new</span> Mask(<span class="string">&quot;Honeywell&quot;</span>, <span class="string">&quot;N95&quot;</span>));</span><br></pre></td></tr></table></figure><p>现在我们按照品牌给这个口罩列表进行排序。在Java8之前，我们可以用匿名函数进行实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">maskList.sort(<span class="keyword">new</span> Comparator&lt;Mask&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Mask o1, Mask o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getBrand().compareTo(o2.getBrand());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们再使用Lambda表达式实现一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maskList.sort((Mask o1, Mask o2) -&gt; o1.getBrand().compareTo(o2.getBrand()));</span><br></pre></td></tr></table></figure><p>显而易见，使用Lambda表达式以后，代码看起来更清晰更简洁了。假如你还是一脸懵圈的话也没关系，这里我只是想显摆一下Lambda表达式很牛掰，接下来我会一点点地详细讲解清楚。</p><h3 id="Lambda表达式的组成"><a href="#Lambda表达式的组成" class="headerlink" title="Lambda表达式的组成"></a>Lambda表达式的组成</h3><p>Lambda表达式由三部分组成，以上面的口罩排序的例子为例，如下图：<br><img src="/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/1.png" alt="img"></p><ol><li><strong>参数列表</strong>：本例中是两个<code>Mask</code>对象的参数，采用的是Comparator接口中compare方法的参数。</li><li><strong>箭头</strong>：<code>-&gt;</code>把参数列表和主体分隔为两个部分。</li><li><strong>主体</strong>：本例中是把比较口罩品牌的表达式作为Lambda表达式的返回。主体可以修改成另外一种写法，含义是一样的：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">maskList.sort((Mask o1, Mask o2) -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> o1.getBrand().compareTo(o2.getBrand());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Lambda表达式的基本语法"><a href="#Lambda表达式的基本语法" class="headerlink" title="Lambda表达式的基本语法"></a>Lambda表达式的基本语法</h3><p>从上面的例子中的两个种写法中，可以看出Lambda表达式有两种基本语法，分别如下：</p><ol><li>(参数列表) <code>-&gt;</code> 表达式</li><li>(参数列表) <code>-&gt;</code> { 多条语句 }</li></ol><p>只看这两条干瘪的语法，理解起来比较困难，实践出真知，我们来多举几个例子。</p><h3 id="Lambda表达式示例"><a href="#Lambda表达式示例" class="headerlink" title="Lambda表达式示例"></a>Lambda表达式示例</h3><ol><li>我们提到的例子，Lambda表达式的参数列表有两个Mask类型的参数，主体是比较两个Mask对象的品牌，返回的是一个int类型。<strong>当主体是一个表达式时，不需要return语句，隐含return该表达式的返回值。</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Mask o1, Mask o2) -&gt; o1.getBrand().compareTo(o2.getBrand())</span><br></pre></td></tr></table></figure><ol><li>参数列表中仅有一个Mask类型的参数，返回的是一个String类型，是该Mask对象的品牌信息。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Mask mask) -&gt; mask.getBrand()</span><br></pre></td></tr></table></figure><ol><li>参数列表中仅有一个Mask类型的参数，返回的是一个boolean类型，是该Mask对象的类型是否为N95。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Mask mask) -&gt; mask.getType() == <span class="string">&quot;N95&quot;</span></span><br></pre></td></tr></table></figure><ol><li>参数列表中没有任何参数，返回的是一个int类型。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() -&gt; <span class="number">996</span></span><br></pre></td></tr></table></figure><ol><li>参数列表中有两个int类型的参数，但是没有返回值（void）。<strong>在主体中可以写多条语句，不过记住要用<code>&#123;</code>和<code>&#125;</code>将其包裹。</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;万猫学社想对你说：&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;第一个参数是：&quot;</span> + x);</span><br><span class="line">    System.out.println(<span class="string">&quot;第二个参数是：&quot;</span> + y);</span><br><span class="line">    System.out.println(<span class="string">&quot;两数之和是：&quot;</span> + (x + y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小测试"><a href="#小测试" class="headerlink" title="小测试"></a>小测试</h3><p>看了这么多的例子，是不是撸胳膊挽袖子准备大干一场？别急，检验出真知，我们先简单测试一下。以下的Lambda表达式有哪几个是正确的？</p><ol><li><code>() -&gt; &#123;&#125;</code></li><li><code>() -&gt; &quot;万猫学社&quot;</code></li><li><code>() -&gt; &#123; &quot;万猫学社&quot; &#125;</code></li><li><code>() -&gt; &#123; return &quot;万猫学社&quot;; &#125;</code></li><li><code>() -&gt; return &quot;万猫学社&quot;;</code></li></ol><p>请思考片刻…<br>.<br>.<br>.<br><img src="/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/2.jpg" alt="img"><br>.<br>.<br>.</p><p><strong>宣布答案</strong>：第1、2和4个是正确的，第3和5个是错误的。我们来逐个分析一下：</p><ol><li><code>() -&gt; &#123;&#125;</code>：正确，这个Lambda表达式没有参数，也没有任何返回。</li><li><code>() -&gt; &quot;万猫学社&quot;</code>：正确，这个Lambda表达式没有参数，主体是一个表达式，返回String类型。</li><li><code>() -&gt; &#123; &quot;万猫学社&quot; &#125;</code>：错误，<code>&quot;万猫学社&quot;</code>是一个表达式，不是一个语句，不能使用<code>&#123;</code>和<code>&#125;</code>将其包裹，可以修改为<code>() -&gt; &quot;万猫学社&quot;</code>。</li><li><code>() -&gt; &#123; return &quot;万猫学社&quot;; &#125;</code>：正确，这个Lambda表达式没有参数，主体是一个语句，使用<code>&#123;</code>和<code>&#125;</code>将其包裹，返回String类型。</li><li><code>() -&gt; return &quot;万猫学社&quot;;</code>：错误，<code>return &quot;万猫学社&quot;;</code>是一个语句，不是一个表达式，必须使用<code>&#123;</code>和<code>&#125;</code>将其包裹，可以修改为<code>() -&gt; &#123; return &quot;万猫学社&quot;; &#125;</code>。</li></ol><p>如果你全部答对，恭喜你，你已经基本掌握Lambda表达式的基本语法；如果你有答错的，没关系，重新再看一遍，再复习巩固一下。<br>学习的路上，我与你一起前行。</p><h1 id="（二）：Lambda的使用"><a href="#（二）：Lambda的使用" class="headerlink" title="（二）：Lambda的使用"></a>（二）：Lambda的使用</h1><h3 id="在哪使用Lambda表达式？"><a href="#在哪使用Lambda表达式？" class="headerlink" title="在哪使用Lambda表达式？"></a>在哪使用Lambda表达式？</h3><p>在上一篇文章（<a href="https://blog.csdn.net/heihaozi/article/details/104203328">传送门</a>）中介绍了Lambda表达式的基本语法，其中的举了一个Lambda表达式的例子，就是按照品牌给口罩列表进行排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maskList.sort((Mask o1, Mask o2) -&gt; o1.getBrand().compareTo(o2.getBrand()));</span><br></pre></td></tr></table></figure><p>这里使用的<code>sort</code>方法的参数类型是<code>Comparator&lt;T&gt;</code>，我们就是把Lambda表达式作为<code>Comparator&lt;T&gt;</code>传入<code>sort</code>方法中的。<code>Comparator&lt;T&gt;</code>就是一个函数式接口，那么什么是函数式接口？</p><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><p>函数式接口就是有且仅有一个抽象方法的接口。上面提到的<code>Comparator&lt;T&gt;</code>接口，虽然有很多默认方法，但有且仅有一个抽象方法<code>compare</code>，所以它仍然是一个函数式接口。再举一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.concurrent;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Callable</code>接口只有一个<code>call</code>抽象方法，所以它也是函数式接口。</p><p>你可以已经发现了，<code>Callable</code>接口上有一个注解<code>@FunctionalInterface</code>，该注解用于标志该接口是一个函数式接口。如果你编写了一个不是函数式接口的接口，并且加了<code>@FunctionalInterface</code>注解，编译就会报错，需要注意一下。</p><p>看了以上的例子，是不是撸胳膊挽袖子准备大干一场？别急，检验出真知，我们先简单测试一下。以下三个接口，哪些是函数式接口，哪些不是函数式接口？</p><ol><li>Runnable</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Task</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.jmx.snmp.tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Task</span> <span class="keyword">extends</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Serializable</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请思考片刻…<br>.<br>.<br>.<br><img src="/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/2.jpg" alt="img"><br>.<br>.<br>.<br><strong>宣布答案</strong>：</p><ol><li><code>Runnable</code>只有一个抽象方法<code>run</code>，所以是函数式接口</li><li><code>Task</code>有两个抽象方法，分别是自己的<code>cancel</code>方法和从<code>Runnable</code>继承而来的<code>run</code>方法，所以不是函数式接口。</li><li><code>Serializable</code>没有任何一个方法，所以不是函数式接口。</li></ol><p>怎么样？都答对了嘛？</p><h3 id="实现函数式接口"><a href="#实现函数式接口" class="headerlink" title="实现函数式接口"></a>实现函数式接口</h3><p>了解了什么是函数式接口以后，我们就可以直接使用Lambda表达式为函数式接口提供实现了，并且还可以把整个Lambda表达式作为函数式接口的实例。比如上面提到的<code>Runnable</code>接口，我们就是这样直接赋值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Runnable runnable = () -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;万猫学社&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>到目前为止，我们已经知道在哪使用Lambda表达式，那么该如何正确的使用Lambda表达式呢？</p><h3 id="怎么使用Lambda表达式？"><a href="#怎么使用Lambda表达式？" class="headerlink" title="怎么使用Lambda表达式？"></a>怎么使用Lambda表达式？</h3><p>从上面<code>Runnable</code>接口实例的例子中，可以看出：<code>Runnable</code>接口的<code>run</code>方法没有入参没有返回，该方法的签名是<code>() -&gt; void</code>；Lambda表达式同样的也没有入参没有返回，该表达式的签名是<code>() -&gt; void</code>。</p><p>也就是说：<strong>函数式接口的抽象方法的签名和Lambda表达式的签名必须一致。</strong></p><p>再比如，按照品牌给口罩列表进行排序的例子，<code>Comparator&lt;T&gt;</code>接口的<code>compare</code>方法的签名是<code>(T ,T) -&gt; int</code>,Lambda表达式的签名同样也是<code>(T ,T) -&gt; int</code>。</p><p>为了加深理解，我们再来做个小测试，看看哪些代码正确使用了Lambda表达式？</p><ol><li><code>Callable</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Callable&lt;String&gt; callable = () -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;万猫学社&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li><code>Runnable</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Runnable runnable = () -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;万猫学社&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li><code>Comparator&lt;Mask&gt;</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">maskList.sort((Mask o1, Mask o2) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (o1.getBrand().equals(o2.getBrand())) &#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getType().compareTo(o2.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getBrand().compareTo(o2.getBrand());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>请思考片刻…<br>.<br>.<br>.<br><img src="/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/2.jpg" alt="img"><br>.<br>.<br>.<br><strong>宣布答案</strong>：</p><ol><li><code>Callable</code>：正确，Lambda表达式的签名是<code>() -&gt; String</code>，与<code>Callable&lt;String&gt;</code>接口的唯一抽象方法<code>call</code>的签名匹配，所以是正确的。</li><li><code>Runnable</code>：错误，Lambda表达式的签名是<code>() -&gt; String</code>，但是<code>Runnable</code>接口的唯一抽象方法<code>run</code>的签名是<code>() -&gt; void</code>，两者不匹配，所以是错误的。</li><li><code>Comparator&lt;Mask&gt;</code>:正确，Lambda表达式的签名是<code>(Mask, Mask) -&gt; int</code>，与<code>Comparator&lt;Mask&gt;</code>接口的唯一抽象方法<code>compare</code>的签名匹配，所以是正确的。</li></ol><p>怎么样？都答对了嘛？</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>有且仅有一个抽象方法的接口叫做<strong>函数式接口</strong>，Lambda表达式可以直接作为函数式接口的实例，函数式接口的抽象方法的签名和Lambda表达式的签名必须一致。</p><h1 id="（三）：更简洁的Lambda"><a href="#（三）：更简洁的Lambda" class="headerlink" title="（三）：更简洁的Lambda"></a>（三）：更简洁的Lambda</h1><h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><p>编译器可以通过函数式接口推断出Lambda表达式的参数类型，所以在编写Lambda表达式时，可以省略参数类型。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Mask&gt; comparator = (Mask o1, Mask o2) -&gt; o1.getBrand().compareTo(o2.getBrand());</span><br></pre></td></tr></table></figure><p>就可以简写为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Mask&gt; comparator = (o1, o2) -&gt; o1.getBrand().compareTo(o2.getBrand());</span><br></pre></td></tr></table></figure><p>另外，当Lambda表达式只有一个参数的时候，不仅可以省略参数类型，还可以省略到参数名称两边的括号，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;Mask&gt; predicate = (Mask mask) -&gt; mask.getType() == <span class="string">&quot;N95&quot;</span>;</span><br></pre></td></tr></table></figure><p>就可以简写为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;Mask&gt; predicate = mask -&gt; mask.getType() == <span class="string">&quot;N95&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><h4 id="什么是方法引用？"><a href="#什么是方法引用？" class="headerlink" title="什么是方法引用？"></a>什么是方法引用？</h4><p>方法引用是Java8中引入的新特性，它提供了一种引用方法而不执行方法的方式，可以让我们重复使用现用方法的定义，做为某些Lambda表达式的另一种更简洁的写法。</p><p>比如前面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Mask&gt; comparator = (o1, o2) -&gt; o1.getBrand().compareTo(o2.getBrand());</span><br></pre></td></tr></table></figure><p>使用方法引用以后，可以简写为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Mask&gt; comparator = Comparator.comparing(Mask::getBrand);</span><br></pre></td></tr></table></figure><p>当你需要方法引用时，目标引用放在分隔符<code>::</code>前，方法的名称放在分隔符<code>::</code>后。比如，上面的<code>Mask::getBrand</code>，就是引用了<code>Mask</code>中定义的<code>getBrand</code>方法。方法名称后不需要加括号，因为我们并没有实际调用它。方法引用提高了代码的可读性，也使逻辑更加清晰。</p><h4 id="怎么构建方法引用？"><a href="#怎么构建方法引用？" class="headerlink" title="怎么构建方法引用？"></a>怎么构建方法引用？</h4><p>可以构建方法引用的场景的有四种：</p><h5 id="1-静态方法"><a href="#1-静态方法" class="headerlink" title="1. 静态方法"></a>1. 静态方法</h5><p>指向静态方法的引用，语法：<code>类名::静态方法名</code>，类名放在分隔符<code>::</code>前，:静态方法名放在分隔符<code>::</code>后。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(String str) -&gt; Integer.parseInt(str)</span><br></pre></td></tr></table></figure><p>使用方法引用以后，可以简写为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer::parseInt</span><br></pre></td></tr></table></figure><h5 id="2-内部对象的实例方法"><a href="#2-内部对象的实例方法" class="headerlink" title="2. 内部对象的实例方法"></a>2. 内部对象的实例方法</h5><p>指向Lambda表达式内部对象的实例方法的引用，语法：<code>类名::实例方法名</code>，类名放在分隔符<code>::</code>前，:实例方法名放在分隔符<code>::</code>后。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Mask mask) -&gt; mask.getBrand()</span><br></pre></td></tr></table></figure><p>使用方法引用以后，可以简写为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mask::getBrand</span><br></pre></td></tr></table></figure><h5 id="3-外部对象的实例方法"><a href="#3-外部对象的实例方法" class="headerlink" title="3. 外部对象的实例方法"></a>3. 外部对象的实例方法</h5><p>指向Lambda表达式外部对象的实例方法的引用，语法：<code>实例名::实例方法名</code>，类名放在分隔符<code>::</code>前，:实例方法名放在分隔符<code>::</code>后。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String type = <span class="string">&quot;N95&quot;</span>;</span><br><span class="line">Predicate&lt;String&gt; predicate = (String str) -&gt; type.equals(str);</span><br><span class="line">System.out.println(predicate.test(<span class="string">&quot;N95&quot;</span>));</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>其中，<code>type</code>是一个Lambda表达式外部的局部变量，使用方法引用以后，可以简写为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String type = <span class="string">&quot;N95&quot;</span>;</span><br><span class="line">Predicate&lt;String&gt; predicate = type::equals;</span><br><span class="line">System.out.println(predicate.test(<span class="string">&quot;N95&quot;</span>));</span><br></pre></td></tr></table></figure><p>如果对于<code>Predicate</code>接口还不熟悉，没关系，以后的文章会介绍到，这里暂且知道它的抽象方法的签名是<code>(T) -&gt; boolean</code>就可以了。</p><h5 id="4-构造方法"><a href="#4-构造方法" class="headerlink" title="4. 构造方法"></a>4. 构造方法</h5><p>指向构造方法的引用，语法：<code>类名::new</code>，类名放在分隔符<code>::</code>前，<code>new</code>放在分隔符<code>::</code>后。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(String brand, String type) -&gt; <span class="keyword">new</span> Mask(brand, type)</span><br></pre></td></tr></table></figure><p>使用方法引用以后，可以简写为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mask::<span class="keyword">new</span></span><br></pre></td></tr></table></figure><h4 id="小测试-1"><a href="#小测试-1" class="headerlink" title="小测试"></a>小测试</h4><p>看了这么多，是不是摩拳擦掌准备试一试了？我们就来几个小测试：</p><ol><li><code>(char[] array) -&gt; new String(array)</code></li><li><code>(String str) -&gt; str.length()</code></li><li><code>(String type) -&gt; mask.setType(type)</code>，其中的<code>mask</code>是一个<code>Mask</code>对象的局部变量。</li><li><code>(String str) -&gt; System.out.println(str)</code></li></ol><p>请思考片刻…<br>.<br>.<br>.<br><img src="/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/2.jpg" alt="img"><br>.<br>.<br>.</p><p><strong>宣布答案</strong>：</p><ol><li>因为<code>(char[] array) -&gt; new String(array)</code>是一个构造方法的Lambda表达式，此种方法引用的语法是：<code>类名::new</code>，所以正确答案是：<code>String::new</code>。</li><li>因为<code>(String str) -&gt; str.length()</code>是一个内部对象的实例方法的Lambda表达式，此种方法引用的语法是：<code>类名::实例方法名</code>，所以正确答案是：<code>String::length</code>。</li><li>因为<code>(String type) -&gt; mask.setType(type)</code>中的<code>mask</code>是一个<code>Mask</code>对象的局部变量，它是一个包含外部对象的Lambda表达式，此种方法引用的语法是：<code>实例名::实例方法名</code>，所以正确答案是<code>mask::setType</code>。</li><li>因为<code>(String str) -&gt; System.out.println(str)</code>是一个静态方法的Lambda表达式，此种方法引用的语法是：<code>类名::静态方法名</code>，所以正确答案是<code>System.out::println</code>。</li></ol><p>怎么样？都答对了嘛？</p><h1 id="（四）：常用的函数式接口"><a href="#（四）：常用的函数式接口" class="headerlink" title="（四）：常用的函数式接口"></a>（四）：常用的函数式接口</h1><p>在Java8支持Lambda表达式以后，为了满足Lambda表达式的一些典型使用场景，JDK为我们提供了大量常用的函数式接口。它们主要在 java.util.function 包中，下面简单介绍几个其中的接口及其使用示例。</p><h3 id="Supplier接口"><a href="#Supplier接口" class="headerlink" title="Supplier接口"></a>Supplier接口</h3><p><code>Supplier</code>接口是对象实例的提供者，定义了一个名叫<code>get</code>的抽象方法，它没有任何入参，并返回一个泛型T对象，具体源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.function;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码比较简单，我们来个例子。这是之前提过的表示<strong>口罩</strong>的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.more.study;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 口罩</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mask</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mask</span><span class="params">(String brand, String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 品牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们使用Lambda表达式声明一个<code>Supplier</code>的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;Mask&gt; supplier = () -&gt; <span class="keyword">new</span> Mask(<span class="string">&quot;3M&quot;</span>, <span class="string">&quot;N95&quot;</span>);</span><br></pre></td></tr></table></figure><p>用它来创建品牌为3M、类型为N95的<code>Mask</code>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mask mask = supplier.get();</span><br><span class="line">System.out.println(<span class="string">&quot;Brand: &quot;</span> + mask.getBrand() + <span class="string">&quot;, Type: &quot;</span> + mask.getType());</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Brand: 3M, Type: N95</span><br></pre></td></tr></table></figure><p>特别需要注意的是，本例中每一次调用<code>get</code>方法都会创建新的对象。</p><h3 id="Consumer接口"><a href="#Consumer接口" class="headerlink" title="Consumer接口"></a>Consumer接口</h3><p><code>Consumer</code>接口是一个类似消费者的接口，定义了一个名叫<code>accept</code>的抽象方法，它的入参是一个泛型T对象，没有任何返回（void），主要源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.function;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合上面的<code>Supplier</code>接口，我们来个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;Mask&gt; supplier = () -&gt; <span class="keyword">new</span> Mask(<span class="string">&quot;3M&quot;</span>, <span class="string">&quot;N95&quot;</span>);</span><br><span class="line">Consumer&lt;Mask&gt; consumer = (Mask mask) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Brand: &quot;</span> + mask.getBrand() + <span class="string">&quot;, Type: &quot;</span> + mask.getType());</span><br><span class="line">&#125;;</span><br><span class="line">consumer.accept(supplier.get());</span><br></pre></td></tr></table></figure><p>首先使用Lambda表达式声明一个<code>Supplier</code>的实例，它是用来创建品牌为3M、类型为N95的<code>Mask</code>实例；再使用Lambda表达式声明一个<code>Consumer</code>的实例，它是用于打印出<code>Mask</code>实例的相关信息；最后<code>Consumer</code>消费了<code>Supplier</code>生产的<code>Mask</code>。运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Brand: 3M, Type: N95</span><br></pre></td></tr></table></figure><h3 id="Predicate接口"><a href="#Predicate接口" class="headerlink" title="Predicate接口"></a>Predicate接口</h3><p><code>Predicate</code>接口是判断是与否的接口，定义了一个名叫<code>test</code>的抽象方法，它的入参是一个泛型T对象，并返回一个boolean类型，主要源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.function;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合上面的<code>Supplier</code>接口，我们来个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;Mask&gt; supplier = () -&gt; <span class="keyword">new</span> Mask(<span class="string">&quot;3M&quot;</span>, <span class="string">&quot;N95&quot;</span>);</span><br><span class="line">Predicate&lt;Mask&gt; n95 = (Mask mask) -&gt; <span class="string">&quot;N95&quot;</span>.equals(mask.getType());</span><br><span class="line">Predicate&lt;Mask&gt; kn95 = (Mask mask) -&gt; <span class="string">&quot;KN95&quot;</span>.equals(mask.getType());</span><br><span class="line">System.out.println(<span class="string">&quot;是否为N95口罩：&quot;</span> + n95.test(supplier.get()));</span><br><span class="line">System.out.println(<span class="string">&quot;是否为KN95口罩：&quot;</span> + kn95.test(supplier.get()));</span><br></pre></td></tr></table></figure><p>首先使用Lambda表达式声明一个<code>Supplier</code>的实例，它是用来创建品牌为3M、类型为N95的<code>Mask</code>实例；再使用Lambda表达式声明一个<code>Predicate</code>的实例<strong>n95</strong>，它是用于判断是否为N95口罩；再使用Lambda表达式声明一个<code>Predicate</code>的实例<strong>kn95</strong>，它是用于判断是否为KN95口罩；最后分别用两个<code>Predicate</code>判断<code>Supplier</code>生产的<code>Mask</code>。运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">是否为N95口罩：true</span><br><span class="line">是否为KN95口罩：false</span><br></pre></td></tr></table></figure><h3 id="Function接口"><a href="#Function接口" class="headerlink" title="Function接口"></a>Function接口</h3><p><code>Function</code>接口是对实例进行处理转换的接口，定义了一个名叫<code>apply</code>的抽象方法，它的入参是一个泛型T对象，并返回一个泛型T对象，主要源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.function;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合上面的<code>Supplier</code>接口，我们来个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;Mask&gt; supplier = () -&gt; <span class="keyword">new</span> Mask(<span class="string">&quot;3M&quot;</span>, <span class="string">&quot;N95&quot;</span>);</span><br><span class="line">Function&lt;Mask, String&gt; brand = (Mask mask) -&gt; mask.getBrand();</span><br><span class="line">Function&lt;Mask, String&gt; type = (Mask mask) -&gt; mask.getType();</span><br><span class="line">System.out.println(<span class="string">&quot;口罩品牌：&quot;</span> + brand.apply(supplier.get()));</span><br><span class="line">System.out.println(<span class="string">&quot;口罩类型：&quot;</span> + type.apply(supplier.get()));</span><br></pre></td></tr></table></figure><p>首先使用Lambda表达式声明一个<code>Supplier</code>的实例，它是用来创建品牌为3M、类型为N95的<code>Mask</code>实例；再使用Lambda表达式声明一个<code>Function</code>的实例<strong>brand</strong>，它是用于获取口罩的品牌；再使用Lambda表达式声明一个<code>Function</code>的实例<strong>type</strong>，它是用于获取口罩的类型；最后分别用两个<code>Function</code>分析<code>Supplier</code>生产的<code>Mask</code>。运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">口罩品牌：3M</span><br><span class="line">口罩类型：N95</span><br><span class="line">12</span><br></pre></td></tr></table></figure><h3 id="BiFunction接口"><a href="#BiFunction接口" class="headerlink" title="BiFunction接口"></a>BiFunction接口</h3><p><code>Function</code>接口的入参只有一个泛型对象，JDK还为我们提供了两个泛型对象入参的接口：<code>BiFunction</code>接口，主要源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.function;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BiFunction</span>&lt;<span class="title">T</span>, <span class="title">U</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t, U u)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以用<code>BiFunction</code>接口传入两个<code>String</code>直接创建<code>Mask</code>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BiFunction&lt;String,String,Mask&gt; biFunction = (String brand, String type) -&gt; <span class="keyword">new</span> Mask(brand, type);</span><br><span class="line">Mask mask = biFunction.apply(<span class="string">&quot;3M&quot;</span>, <span class="string">&quot;N95&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Brand: &quot;</span> + mask.getBrand() + <span class="string">&quot;, Type: &quot;</span> + mask.getType());</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Brand: 3M, Type: N95</span><br></pre></td></tr></table></figure><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>以上介绍的几个常用的函数式接口入参和返回，都是泛型对象的，也就是必须为引用类型。当我们传入或获取的是基本数据类型时，将会发生自动装箱和自动拆箱，带来不必要的性能损耗，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;Long&gt; supplier = () -&gt; System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> timeMillis = supplier.get();</span><br></pre></td></tr></table></figure><p>在上面例子里，发生了一次自动装箱（long被装箱为Long）和一次自动拆箱（Long被拆箱为long），如何避免这种不必要的性能损耗呢？JDK为我们提供相应的函数式接口，如<code>LongSupplier</code>接口，定义了一个名叫<code>getAsLong</code>的抽象方法，签名是<code>() -&gt; long</code>。上面的例子可以优化为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LongSupplier supplier = () -&gt; System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> timeMillis = supplier.getAsLong();</span><br></pre></td></tr></table></figure><p>类似这样的接口还有很多，我为大家整理了一下：</p><h4 id="Supplier相关的接口"><a href="#Supplier相关的接口" class="headerlink" title="Supplier相关的接口"></a>Supplier相关的接口</h4><table><thead><tr><th>接口名称</th><th>方法名称</th><th>方法签名</th></tr></thead><tbody><tr><td>Supplier</td><td>get</td><td>() -&gt; T</td></tr><tr><td>BooleanSupplier</td><td>getAsBoolean</td><td>() -&gt; boolean</td></tr><tr><td>DoubleSupplier</td><td>getAsDouble</td><td>() -&gt; double</td></tr><tr><td>IntSupplier</td><td>getAsInt</td><td>() -&gt; int</td></tr><tr><td>LongSupplier</td><td>getAsLong</td><td>() -&gt; long</td></tr></tbody></table><h4 id="Consumer相关的接口"><a href="#Consumer相关的接口" class="headerlink" title="Consumer相关的接口"></a>Consumer相关的接口</h4><table><thead><tr><th>接口名称</th><th>方法名称</th><th>方法签名</th></tr></thead><tbody><tr><td>Consumer</td><td>accept</td><td>(T) -&gt; void</td></tr><tr><td>DoubleConsumer</td><td>accept</td><td>(double) -&gt; void</td></tr><tr><td>IntConsumer</td><td>accept</td><td>(int) -&gt; void</td></tr><tr><td>LongConsumer</td><td>accept</td><td>(long) -&gt; void</td></tr><tr><td>ObjDoubleConsumer</td><td>accept</td><td>(T, double) -&gt; void</td></tr><tr><td>ObjIntConsumer</td><td>accept</td><td>(T, int) -&gt; void</td></tr><tr><td>ObjLongConsumer</td><td>accept</td><td>(T, long) -&gt; void</td></tr></tbody></table><h4 id="Predicate相关的接口"><a href="#Predicate相关的接口" class="headerlink" title="Predicate相关的接口"></a>Predicate相关的接口</h4><table><thead><tr><th>接口名称</th><th>方法名称</th><th>方法签名</th></tr></thead><tbody><tr><td>Predicate</td><td>test</td><td>(T) -&gt; boolean</td></tr><tr><td>BiPredicate</td><td>test</td><td>(T, U) -&gt; boolean</td></tr><tr><td>DoublePredicate</td><td>test</td><td>(double) -&gt; boolean</td></tr><tr><td>IntPredicate</td><td>test</td><td>(int) -&gt; boolean</td></tr><tr><td>LongPredicate</td><td>test</td><td>(long) -&gt; boolean</td></tr></tbody></table><h4 id="Function相关的接口"><a href="#Function相关的接口" class="headerlink" title="Function相关的接口"></a>Function相关的接口</h4><table><thead><tr><th>接口名称</th><th>方法名称</th><th>方法签名</th></tr></thead><tbody><tr><td>Function</td><td>apply</td><td>(T) -&gt; R</td></tr><tr><td>BiFunction</td><td>apply</td><td>(T, U) -&gt; R</td></tr><tr><td>DoubleFunction</td><td>apply</td><td>(double) -&gt; R</td></tr><tr><td>DoubleToIntFunction</td><td>applyAsInt</td><td>(double) -&gt; int</td></tr><tr><td>DoubleToLongFunction</td><td>applyAsLong</td><td>(double) -&gt; long</td></tr><tr><td>IntFunction</td><td>apply</td><td>(int) -&gt; R</td></tr><tr><td>IntToDoubleFunction</td><td>applyAsDouble</td><td>(int) -&gt; double</td></tr><tr><td>IntToLongFunction</td><td>applyAsLong</td><td>(int) -&gt; long</td></tr><tr><td>LongFunction</td><td>apply</td><td>(long) -&gt; R</td></tr><tr><td>LongToDoubleFunction</td><td>applyAsDouble</td><td>(long) -&gt; double</td></tr><tr><td>LongToIntFunction</td><td>applyAsInt</td><td>(long) -&gt; int</td></tr><tr><td>ToDoubleFunction</td><td>applyAsDouble</td><td>(T) -&gt; double</td></tr><tr><td>ToDoubleBiFunction</td><td>applyAsDouble</td><td>(T, U) -&gt; double</td></tr><tr><td>ToIntFunction</td><td>applyAsInt</td><td>(T) -&gt; int</td></tr><tr><td>ToIntBiFunction</td><td>applyAsInt</td><td>(T, U) -&gt; int</td></tr><tr><td>ToLongFunction</td><td>applyAsLong</td><td>(T) -&gt; long</td></tr><tr><td>ToLongBiFunction</td><td>applyAsLong</td><td>(T, U) -&gt; long</td></tr></tbody></table><h1 id="（五）：Comparator复合"><a href="#（五）：Comparator复合" class="headerlink" title="（五）：Comparator复合"></a>（五）：Comparator复合</h1><h3 id="Comparator的使用"><a href="#Comparator的使用" class="headerlink" title="Comparator的使用"></a>Comparator的使用</h3><p>在之前文章的例子中，我们使用<code>Comparator.comparing</code>静态方法构建了一个<code>Comparator</code>接口的实例，我们再来简单介绍一下。先来看看Mask类是怎么写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> one.more.study;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 口罩</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 万猫学社</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mask</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mask</span><span class="params">(String brand, String type, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 品牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Mask&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;brand=&#x27;&quot;</span> + brand + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, type=&#x27;&quot;</span> + type + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，根据口罩品牌对口罩列表进行正序排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Mask&gt; maskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">maskList.add(<span class="keyword">new</span> Mask(<span class="string">&quot;3M&quot;</span>, <span class="string">&quot;KN95&quot;</span>,<span class="number">17.8</span>));</span><br><span class="line">maskList.add(<span class="keyword">new</span> Mask(<span class="string">&quot;Honeywell&quot;</span>, <span class="string">&quot;KN95&quot;</span>,<span class="number">18.8</span>));</span><br><span class="line">maskList.add(<span class="keyword">new</span> Mask(<span class="string">&quot;3M&quot;</span>, <span class="string">&quot;FFP2&quot;</span>,<span class="number">19.8</span>));</span><br><span class="line">maskList.add(<span class="keyword">new</span> Mask(<span class="string">&quot;Honeywell&quot;</span>, <span class="string">&quot;N95&quot;</span>,<span class="number">19.5</span>));</span><br><span class="line">maskList.sort(Comparator.comparing(Mask::getBrand));</span><br><span class="line"><span class="keyword">for</span> (Mask mask : maskList) &#123;</span><br><span class="line">    System.out.println(mask);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Mask&#123;brand&#x3D;&#39;3M&#39;, type&#x3D;&#39;KN95&#39;, price&#x3D;17.8&#125;</span><br><span class="line">Mask&#123;brand&#x3D;&#39;3M&#39;, type&#x3D;&#39;FFP2&#39;, price&#x3D;19.8&#125;</span><br><span class="line">Mask&#123;brand&#x3D;&#39;Honeywell&#39;, type&#x3D;&#39;KN95&#39;, price&#x3D;18.8&#125;</span><br><span class="line">Mask&#123;brand&#x3D;&#39;Honeywell&#39;, type&#x3D;&#39;N95&#39;, price&#x3D;19.5&#125;</span><br></pre></td></tr></table></figure><h3 id="逆序"><a href="#逆序" class="headerlink" title="逆序"></a>逆序</h3><p>需求改了，要求按照口罩品牌进行逆序排列，这是还需不需要再构建一个<code>Comparator</code>接口的实例呢？答案是不需要，<code>Comparator</code>接口有一个默认方法<code>reversed</code>可以使其逆序，把上面的例子稍微修改一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maskList.sort(Comparator.comparing(Mask::getBrand).reversed());</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Mask&#123;brand&#x3D;&#39;Honeywell&#39;, type&#x3D;&#39;KN95&#39;, price&#x3D;18.8&#125;</span><br><span class="line">Mask&#123;brand&#x3D;&#39;Honeywell&#39;, type&#x3D;&#39;N95&#39;, price&#x3D;19.5&#125;</span><br><span class="line">Mask&#123;brand&#x3D;&#39;3M&#39;, type&#x3D;&#39;KN95&#39;, price&#x3D;17.8&#125;</span><br><span class="line">Mask&#123;brand&#x3D;&#39;3M&#39;, type&#x3D;&#39;FFP2&#39;, price&#x3D;19.8&#125;</span><br></pre></td></tr></table></figure><h3 id="比较器链"><a href="#比较器链" class="headerlink" title="比较器链"></a>比较器链</h3><p>需求又改了，先按照口罩品牌逆序排序，如果口罩品牌一样，再按照口罩类型正序排序。<code>Comparator</code>接口还有一个默认方法<code>thenComparing</code>就是做这个的，它的入参也是一个<code>Function</code>接口的实例，如果前一个比较器的比较结果相同，就当前的比较器再进行比较，我们再来修改一下上面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">maskList.sort(Comparator.comparing(Mask::getBrand)</span><br><span class="line">        .reversed()</span><br><span class="line">        .thenComparing(Mask::getType));</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Mask&#123;brand&#x3D;&#39;Honeywell&#39;, type&#x3D;&#39;KN95&#39;, price&#x3D;18.8&#125;</span><br><span class="line">Mask&#123;brand&#x3D;&#39;Honeywell&#39;, type&#x3D;&#39;N95&#39;, price&#x3D;19.5&#125;</span><br><span class="line">Mask&#123;brand&#x3D;&#39;3M&#39;, type&#x3D;&#39;FFP2&#39;, price&#x3D;19.8&#125;</span><br><span class="line">Mask&#123;brand&#x3D;&#39;3M&#39;, type&#x3D;&#39;KN95&#39;, price&#x3D;17.8&#125;</span><br></pre></td></tr></table></figure><p>需求又又改了，先按照口罩品牌逆序排序，如果口罩品牌一样，再按照口罩价格正序排序。口罩价格是<code>double</code>类型，如果使用<code>thenComparing</code>会导致自动装箱，造成资源的白白浪费。所以，推荐使用<code>thenComparingDouble</code>方法，它的入参是<code>ToDoubleFunction</code>，代码修改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">maskList.sort(Comparator.comparing(Mask::getBrand)</span><br><span class="line">        .reversed()</span><br><span class="line">        .thenComparingDouble(Mask::getPrice));</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Mask&#123;brand&#x3D;&#39;Honeywell&#39;, type&#x3D;&#39;KN95&#39;, price&#x3D;18.8&#125;</span><br><span class="line">Mask&#123;brand&#x3D;&#39;Honeywell&#39;, type&#x3D;&#39;N95&#39;, price&#x3D;19.5&#125;</span><br><span class="line">Mask&#123;brand&#x3D;&#39;3M&#39;, type&#x3D;&#39;KN95&#39;, price&#x3D;17.8&#125;</span><br><span class="line">Mask&#123;brand&#x3D;&#39;3M&#39;, type&#x3D;&#39;FFP2&#39;, price&#x3D;19.8&#125;</span><br></pre></td></tr></table></figure><p>类似这样支持基础数据类型的方法还有两个，分别是：<code>thenComparingInt</code>方法，它的入参是<code>ToIntFunction</code>；<code>thenComparingLong</code>方法，它的入参是<code>ToLongFunction</code>。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th>默认方法名称</th><th>作用</th><th>入参</th><th>入参签名</th></tr></thead><tbody><tr><td>reversed</td><td>逆序</td><td>无</td><td>无</td></tr><tr><td>thenComparing</td><td>比较器链</td><td>Function</td><td>(T) -&gt; R</td></tr><tr><td>thenComparingInt</td><td>比较器链</td><td>ToIntFunction</td><td>(T) -&gt; int</td></tr><tr><td>thenComparingLong</td><td>比较器链</td><td>ToLongFunction</td><td>(T) -&gt; long</td></tr><tr><td>thenComparingDouble</td><td>比较器链</td><td>ToDoubleFunction</td><td>(T) -&gt; double</td></tr></tbody></table><h3 id><a href="#" class="headerlink" title></a></h3><h1 id="（六）：Consumer、Predicate、Function复合"><a href="#（六）：Consumer、Predicate、Function复合" class="headerlink" title="（六）：Consumer、Predicate、Function复合"></a>（六）：Consumer、Predicate、Function复合</h1><h3 id="Consumer复合"><a href="#Consumer复合" class="headerlink" title="Consumer复合"></a>Consumer复合</h3><p><code>Consumer</code>接口中，有一个默认方法<code>andThen</code>，它的入参还是<code>Consumer</code>接口的实例。做完上一个<code>Consumer</code>的操作以后，再做当前<code>Consumer</code>的操作，就像工厂的流水线一样，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;Mask&gt; brand = m -&gt; m.setBrand(<span class="string">&quot;3M&quot;</span>);</span><br><span class="line">Consumer&lt;Mask&gt; type = m -&gt; m.setType(<span class="string">&quot;N95&quot;</span>);</span><br><span class="line">Consumer&lt;Mask&gt; price = m -&gt; m.setPrice(<span class="number">19.9</span>);</span><br><span class="line">Consumer&lt;Mask&gt; print = System.out::println;</span><br><span class="line"></span><br><span class="line">brand.andThen(type)</span><br><span class="line">        .andThen(price)</span><br><span class="line">        .andThen(print)</span><br><span class="line">        .accept(<span class="keyword">new</span> Mask());</span><br></pre></td></tr></table></figure><p>上面的代码分别声明了4个<code>Consumer</code>接口的实例，然后再把它们组装成一个流水线，先把口罩品牌赋值为3M，再把口罩类型赋值为N95，再把口罩价格赋值为19.9，最后把口罩实例打印出来，运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mask&#123;brand&#x3D;&#39;3M&#39;, type&#x3D;&#39;N95&#39;, price&#x3D;19.9&#125;</span><br></pre></td></tr></table></figure><h3 id="Predicate复合"><a href="#Predicate复合" class="headerlink" title="Predicate复合"></a>Predicate复合</h3><p>Predicate接口一共有3个默认方法：<code>negate</code>、<code>and</code>和<code>or</code>，用它们可以创建更加复杂的Predicate接口实例。</p><h4 id="negate方法"><a href="#negate方法" class="headerlink" title="negate方法"></a>negate方法</h4><p>negate方法就是做非运算。比如，判断口罩类型是N95：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mask mask = <span class="keyword">new</span> Mask(<span class="string">&quot;Honeywell&quot;</span>, <span class="string">&quot;N95&quot;</span>,<span class="number">19.5</span>);</span><br><span class="line">Predicate&lt;Mask&gt; isN95 = m -&gt; <span class="string">&quot;N95&quot;</span>.equals(m.getType());</span><br><span class="line">System.out.println(isN95.test(mask));</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><p>那么，使用negate方法以后，就变成了判断口罩类型不是N95：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mask mask = <span class="keyword">new</span> Mask(<span class="string">&quot;Honeywell&quot;</span>, <span class="string">&quot;N95&quot;</span>,<span class="number">19.5</span>);</span><br><span class="line">Predicate&lt;Mask&gt; isN95 = m -&gt; <span class="string">&quot;N95&quot;</span>.equals(m.getType());</span><br><span class="line">System.out.println(isN95.negate().test(mask));</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">false</span><br></pre></td></tr></table></figure><h4 id="and方法"><a href="#and方法" class="headerlink" title="and方法"></a>and方法</h4><p>and方法就是做与运算。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Mask mask = <span class="keyword">new</span> Mask(<span class="string">&quot;Honeywell&quot;</span>, <span class="string">&quot;N95&quot;</span>,<span class="number">19.5</span>);</span><br><span class="line">Predicate&lt;Mask&gt; isN95 = m -&gt; <span class="string">&quot;N95&quot;</span>.equals(m.getType());</span><br><span class="line">Predicate&lt;Mask&gt; lessThan20 = m -&gt; m.getPrice() &lt; <span class="number">20.0</span>;</span><br><span class="line">System.out.println(isN95.and(lessThan20).test(mask));</span><br></pre></td></tr></table></figure><p>上面的代码分别声明了2个<code>Predicate</code>接口的实例，分别是<strong>判断口罩类型是N95</strong>和<strong>判断口罩价格小于20</strong>，使用<code>and</code>方法以后，表示口罩类型是N95 <strong>并且</strong> 口罩价格小于20，运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><h4 id="or方法"><a href="#or方法" class="headerlink" title="or方法"></a>or方法</h4><p>or方法就是做或运算。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Mask mask = <span class="keyword">new</span> Mask(<span class="string">&quot;Honeywell&quot;</span>, <span class="string">&quot;N95&quot;</span>, <span class="number">21.5</span>);</span><br><span class="line">Predicate&lt;Mask&gt; isN95 = m -&gt; <span class="string">&quot;N95&quot;</span>.equals(m.getType());</span><br><span class="line">Predicate&lt;Mask&gt; lessThan20 = m -&gt; m.getPrice() &lt; <span class="number">20.0</span>;</span><br><span class="line">System.out.println(isN95.or(lessThan20).test(mask));</span><br></pre></td></tr></table></figure><p>上面的代码分别声明了2个<code>Predicate</code>接口的实例，分别是<strong>判断口罩类型是N95</strong>和<strong>判断口罩价格小于20</strong>，使用<code>or</code>方法以后，表示口罩类型是N95 <strong>或者</strong> 口罩价格小于20，运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><h4 id="and方法和or方法组合使用"><a href="#and方法和or方法组合使用" class="headerlink" title="and方法和or方法组合使用"></a>and方法和or方法组合使用</h4><p>当and方法和or方法组合使用时，优先级是由在Lambda表达式链中的位置决定的，从左到右优先级从高到低，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mask mask = <span class="keyword">new</span> Mask(<span class="string">&quot;3M&quot;</span>, <span class="string">&quot;N95&quot;</span>, <span class="number">21.5</span>);</span><br><span class="line">Predicate&lt;Mask&gt; is3M = m -&gt; <span class="string">&quot;3M&quot;</span>.equals(m.getType());</span><br><span class="line">Predicate&lt;Mask&gt; isN95 = m -&gt; <span class="string">&quot;N95&quot;</span>.equals(m.getType());</span><br><span class="line">Predicate&lt;Mask&gt; lessThan20 = m -&gt; m.getPrice() &lt; <span class="number">20.0</span>;</span><br><span class="line">System.out.println(is3M.or(isN95).and(lessThan20).test(mask));</span><br></pre></td></tr></table></figure><p>上面的代码分别声明了3个<code>Predicate</code>接口的实例，分别是<strong>判断口罩品牌是3M</strong>、<strong>判断口罩类型是N95</strong>和<strong>判断口罩价格小于20</strong>，3个<code>Predicate</code>组合以后是<code>is3M.or(isN95).and(lessThan20)</code>，根据从左到右优先级从高到低，组合以后的逻辑是<code>(is3M || isN95 ) &amp;&amp; lessThan20</code>，所以运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">false</span><br></pre></td></tr></table></figure><h3 id="Function复合"><a href="#Function复合" class="headerlink" title="Function复合"></a>Function复合</h3><p>Function接口一共有2个默认方法，分别是：<code>andThen</code>和<code>compose</code>，用它们可以创建更加复杂的Function接口实例。</p><h4 id="andThen方法"><a href="#andThen方法" class="headerlink" title="andThen方法"></a>andThen方法</h4><p><code>Function</code>接口的<code>andThen</code>方法，和<code>Consumer</code>接口的类似，它的入参还是<code>Function</code>接口的实例。做完上一个<code>Function</code>的操作以后，再做当前<code>Function</code>的操作，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;Integer, Integer&gt; plusTwo = x -&gt; x + <span class="number">2</span>;</span><br><span class="line">Function&lt;Integer, Integer&gt; timesThree = x -&gt; x * <span class="number">3</span>;</span><br><span class="line">System.out.println(plusTwo.andThen(timesThree).apply(<span class="number">1</span>));</span><br><span class="line">System.out.println(plusTwo.andThen(timesThree).apply(<span class="number">2</span>));</span><br><span class="line">System.out.println(plusTwo.andThen(timesThree).apply(<span class="number">3</span>));</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><p>上面的代码分别声明了2个<code>Function</code>接口的实例，先加2，然后再乘以3，也就是<code>(x + 2) * 3</code>，运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">12</span><br><span class="line">15</span><br></pre></td></tr></table></figure><h4 id="compose方法"><a href="#compose方法" class="headerlink" title="compose方法"></a>compose方法</h4><p><code>Function</code>接口的<code>compose</code>方法，和<code>andThen</code>方法相反的，先做当前<code>Function</code>的操作，然后再做上一个<code>Function</code>的操作，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;Integer, Integer&gt; plusTwo = x -&gt; x + <span class="number">2</span>;</span><br><span class="line">Function&lt;Integer, Integer&gt; timesThree = x -&gt; x * <span class="number">3</span>;</span><br><span class="line">System.out.println(plusTwo.compose(timesThree).apply(<span class="number">1</span>));</span><br><span class="line">System.out.println(plusTwo.compose(timesThree).apply(<span class="number">2</span>));</span><br><span class="line">System.out.println(plusTwo.compose(timesThree).apply(<span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>上面的代码分别声明了2个<code>Function</code>接口的实例，先乘以3，然后再加2，也就是<code>(x * 3) + 2</code>，运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">8</span><br><span class="line">11</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;（一）、初识Lambda&quot;&gt;&lt;a href=&quot;#（一）、初识Lambda&quot; class=&quot;headerlink&quot; title=&quot;（一）、初识Lambda&quot;&gt;&lt;/a&gt;（一）、初识Lambda&lt;/h1&gt;&lt;h3 id=&quot;什么是Lambda表达式&quot;&gt;&lt;a href=&quot;#什</summary>
      
    
    
    
    
    <category term="1.8新特性Lambda" scheme="http://example.com/tags/1-8%E6%96%B0%E7%89%B9%E6%80%A7Lambda/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch springdata</title>
    <link href="http://example.com/2021/04/12/ES%E7%AC%94%E8%AE%B0/springdata+es/"/>
    <id>http://example.com/2021/04/12/ES%E7%AC%94%E8%AE%B0/springdata+es/</id>
    <published>2021-04-12T03:48:33.000Z</published>
    <updated>2021-04-08T16:56:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-创建spring项目"><a href="#1-创建spring项目" class="headerlink" title="1.创建spring项目"></a>1.创建spring项目</h2><h2 id="2创建依赖"><a href="#2创建依赖" class="headerlink" title="2创建依赖"></a>2创建依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yinggang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>es<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-application-properties配置文件"><a href="#3-application-properties配置文件" class="headerlink" title="3.application.properties配置文件"></a>3.application.properties配置文件</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># es服务地址</span></span><br><span class="line"><span class="meta">elasticsearch.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="comment"># es服务端口</span></span><br><span class="line"><span class="meta">elasticsearch.port</span>=<span class="string">9200</span></span><br><span class="line"><span class="comment"># 配置日志级别,开启debug日志</span></span><br><span class="line"><span class="meta">logging.level.com.yinggang.es</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure><h2 id="4-主程序"><a href="#4-主程序" class="headerlink" title="4.主程序"></a>4.主程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataElasticSearchMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringDataElasticSearchMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-数据实体类Product"><a href="#5-数据实体类Product" class="headerlink" title="5.数据实体类Product"></a>5.数据实体类Product</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yinggang.es;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Document;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Field;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.FieldType;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="comment">//实体类映射操作 主分片 3 副本 1</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;product&quot;, shards = 3, replicas = 1)</span>      </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;<span class="comment">//商品唯一标识</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * type : 字段数据类型</span></span><br><span class="line"><span class="comment">     * analyzer : 分词器类型</span></span><br><span class="line"><span class="comment">     * index : 是否索引(默认:true)</span></span><br><span class="line"><span class="comment">     * Keyword : 短语,不进行分词</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Field</span>(type = FieldType.Text,analyzer = &quot;ik_max_word&quot;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">//商品名称</span></span><br><span class="line">    <span class="comment">//Keyword 不分词</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String category;<span class="comment">//分类名称</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Double)</span></span><br><span class="line">    <span class="keyword">private</span> Double price;<span class="comment">//商品价格</span></span><br><span class="line">    <span class="comment">//不能用图片路径查询</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword, index = false)</span></span><br><span class="line">    <span class="keyword">private</span> String images;<span class="comment">//图片地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-配置类ElasticsearchConfig"><a href="#6-配置类ElasticsearchConfig" class="headerlink" title="6.配置类ElasticsearchConfig"></a>6.配置类ElasticsearchConfig</h2><ul><li>ElasticsearchRestTemplate 是 spring-data-elasticsearch 项目中的一个类，和其他 spring 项目中的 template 类似。 </li><li> 在新版的 spring-data-elasticsearch 中，ElasticsearchRestTemplate 代替了原来的 ElasticsearchTemplate。 </li><li> 原因是 ElasticsearchTemplate 基于 TransportClient，TransportClient 即将在 8.x 以后的版本中移除。所 以，我们推荐使用 ElasticsearchRestTemplate。 </li><li>ElasticsearchRestTemplate 基 于 RestHighLevelClient 客户端的。需要自定义配置类，继承 AbstractElasticsearchConfiguration，并实现 elasticsearchClient()抽象方法，创建 RestHighLevelClient 对 象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yinggang.es;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.config.AbstractElasticsearchConfiguration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//关联配置文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;elasticsearch&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchConfig</span> <span class="keyword">extends</span> <span class="title">AbstractElasticsearchConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String host ;</span><br><span class="line">    <span class="keyword">private</span> Integer port ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写父类方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">elasticsearchClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestClientBuilder builder = RestClient.builder(<span class="keyword">new</span> HttpHost(host, port));</span><br><span class="line">        RestHighLevelClient restHighLevelClient = <span class="keyword">new</span> RestHighLevelClient(builder);</span><br><span class="line">        <span class="keyword">return</span> restHighLevelClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-Dao层"><a href="#7-Dao层" class="headerlink" title="7.Dao层"></a>7.Dao层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yinggang.es;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.repository.ElasticsearchRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Long 是主键</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductDao</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Product</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-索引操作"><a href="#8-索引操作" class="headerlink" title="8.索引操作"></a>8.索引操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yinggang.es;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataESIndexTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchRestTemplate elasticsearchRestTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建索引并增加映射配置</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建索引&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建索引，系统初始化会自动创建索引</span></span><br><span class="line">        <span class="keyword">boolean</span> flg = elasticsearchRestTemplate.deleteIndex(Product.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除索引 = &quot;</span> + flg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-查看索引"><a href="#9-查看索引" class="headerlink" title="9.查看索引"></a>9.查看索引</h2><p><a href="http://106.54.95.74:9200/_cat/indices?v">http://106.54.95.74:9200/_cat/indices?v</a></p><h2 id="10-文档操作"><a href="#10-文档操作" class="headerlink" title="10.文档操作"></a>10.文档操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yinggang.es;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataESProductDaoTest02</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductDao productDao;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        product.setId(<span class="number">2L</span>);</span><br><span class="line">        product.setTitle(<span class="string">&quot;华为手机&quot;</span>);</span><br><span class="line">        product.setCategory(<span class="string">&quot;手机&quot;</span>);</span><br><span class="line">        product.setPrice(<span class="number">2999.0</span>);</span><br><span class="line">        product.setImages(<span class="string">&quot;http://www.yinggang/hw.jpg&quot;</span>);</span><br><span class="line">        productDao.save(product);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询当前索引的数据</span></span><br><span class="line">    <span class="comment">/* http://106.54.95.74:9200/pro/_doc/2 */</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="comment">//id 相同</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        product.setId(<span class="number">1L</span>);</span><br><span class="line">        product.setTitle(<span class="string">&quot;小米 2 手机&quot;</span>);</span><br><span class="line">        product.setCategory(<span class="string">&quot;手机&quot;</span>);</span><br><span class="line">        product.setPrice(<span class="number">9999.0</span>);</span><br><span class="line">        product.setImages(<span class="string">&quot;http://www.yinggang/xm.jpg&quot;</span>);</span><br><span class="line">        productDao.save(product);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据 id 查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Product product = productDao.findById(<span class="number">1L</span>).get();</span><br><span class="line">        System.out.println(product);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Iterable&lt;Product&gt; products = productDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Product product : products) &#123;</span><br><span class="line">            System.out.println(product);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        product.setId(<span class="number">1L</span>);</span><br><span class="line">        productDao.delete(product);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//批量新增</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Product&gt; productList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Product product = <span class="keyword">new</span> Product();</span><br><span class="line">            product.setId(Long.valueOf(i));</span><br><span class="line">            product.setTitle(<span class="string">&quot;[&quot;</span>+i+<span class="string">&quot;]小米手机&quot;</span>);</span><br><span class="line">            product.setCategory(<span class="string">&quot;手机&quot;</span>);</span><br><span class="line">            product.setPrice(<span class="number">1999.0</span>+i);</span><br><span class="line">            product.setImages(<span class="string">&quot;http://www.yinggang/xm.jpg&quot;</span>);</span><br><span class="line">            productList.add(product);</span><br><span class="line">        &#125;</span><br><span class="line">        productDao.saveAll(productList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByPageable</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置排序(排序方式，正序还是倒序，排序的 id)</span></span><br><span class="line">        Sort sort = Sort.by(Sort.Direction.DESC,<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> currentPage=<span class="number">0</span>;<span class="comment">//当前页，第一页从 0 开始，1 表示第二页</span></span><br><span class="line">        <span class="keyword">int</span> pageSize = <span class="number">5</span>;<span class="comment">//每页显示多少条</span></span><br><span class="line">        <span class="comment">//设置查询分页</span></span><br><span class="line">        PageRequest pageRequest = PageRequest.of(currentPage, pageSize,sort);</span><br><span class="line">        <span class="comment">//分页查询</span></span><br><span class="line">        Page&lt;Product&gt; productPage = productDao.findAll(pageRequest);</span><br><span class="line">        <span class="keyword">for</span> (Product Product : productPage.getContent()) &#123;</span><br><span class="line">            System.out.println(Product);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-文档搜索"><a href="#11-文档搜索" class="headerlink" title="11.文档搜索"></a>11.文档搜索</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yinggang.es;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.es.Product;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.es.ProductDao;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.TermQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataESSearchTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductDao productDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * term 查询</span></span><br><span class="line"><span class="comment">     * search(termQueryBuilder) 调用搜索方法，参数查询构建器对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">termQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot; 小米&quot;</span>);</span><br><span class="line">        Iterable&lt;Product&gt; products = productDao.search(termQueryBuilder);</span><br><span class="line">        <span class="keyword">for</span> (Product product : products) &#123;</span><br><span class="line">            System.out.println(product);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * term 查询加分页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">termQueryByPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> currentPage = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> pageSize = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//设置查询分页</span></span><br><span class="line">        PageRequest pageRequest = PageRequest.of(currentPage, pageSize);</span><br><span class="line">        </span><br><span class="line">        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot; 小米&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Iterable&lt;Product&gt; products = productDao.search(termQueryBuilder, pageRequest);</span><br><span class="line">        <span class="keyword">for</span> (Product product : products) &#123;</span><br><span class="line">            System.out.println(product);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-创建spring项目&quot;&gt;&lt;a href=&quot;#1-创建spring项目&quot; class=&quot;headerlink&quot; title=&quot;1.创建spring项目&quot;&gt;&lt;/a&gt;1.创建spring项目&lt;/h2&gt;&lt;h2 id=&quot;2创建依赖&quot;&gt;&lt;a href=&quot;#2创建依赖&quot; c</summary>
      
    
    
    
    
    <category term="elasticsearch" scheme="http://example.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch原生api</title>
    <link href="http://example.com/2021/04/12/ES%E7%AC%94%E8%AE%B0/es%E7%AC%94%E8%AE%B0%E5%8E%9F%E7%94%9F/"/>
    <id>http://example.com/2021/04/12/ES%E7%AC%94%E8%AE%B0/es%E7%AC%94%E8%AE%B0%E5%8E%9F%E7%94%9F/</id>
    <published>2021-04-12T03:48:33.000Z</published>
    <updated>2021-04-08T16:55:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、创建springboot项目"><a href="#一、创建springboot项目" class="headerlink" title="一、创建springboot项目"></a>一、创建springboot项目</h2><h3 id="1-创建springboot-web项目"><a href="#1-创建springboot-web项目" class="headerlink" title="1.创建springboot web项目"></a>1.创建springboot web项目</h3><p>这个比较简单，不详细说了。<br>注意本文使用<strong>springboot版本是2.2.0，此本版内部依赖的ES客户端版本是6.8.1</strong>。</p><h3 id="2-在pom文件中增加es依赖"><a href="#2-在pom文件中增加es依赖" class="headerlink" title="2.在pom文件中增加es依赖"></a>2.在pom文件中增加es依赖</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--es--&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>版本号就是跟随springboot版本；</p><p><strong>注意：</strong><br>如果es服务安装的是es7及以上版本，需要springboot版本为2.2.0及以上，不然启动项目会提示failed load nodes…<br>本文服务端安装的是ES7.3.0，支持的客户端版本最低是6.8.0，所以需要springboot依赖的es版本超过6.8.0。</p><p>如果要自定义ES版本号，指定下就行：<br><img src="/2021/04/12/ES%E7%AC%94%E8%AE%B0/es%E7%AC%94%E8%AE%B0%E5%8E%9F%E7%94%9F/20200419100934772.png" alt="在这里插入图片描述"><br>但是这里不建议自定义，除非你使用es原生api，而不是springboot封装的api，不然有些会报错。</p><h3 id="3-配置appication-yml"><a href="#3-配置appication-yml" class="headerlink" title="3.配置appication.yml"></a>3.配置appication.yml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  data:</span><br><span class="line">    elasticsearch:</span><br><span class="line">      cluster-name: myes</span><br><span class="line">      cluster-nodes: <span class="number">192.168</span><span class="number">.32</span><span class="number">.129</span>:<span class="number">9301</span>,<span class="number">192.168</span><span class="number">.32</span><span class="number">.129</span>:<span class="number">9302</span>,<span class="number">192.168</span><span class="number">.32</span><span class="number">.129</span>:<span class="number">9303</span></span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><ul><li>注意端口号是9300，不是9200；</li><li>cluster-name是集群名称，需要在ES的config配置文件中指定，不然启动项目访问接口时，会报如下错误：<br>None of the configured nodes are available</li></ul><p>注意，在ES7.0版本后，<strong>上述配置已经废弃</strong>，推荐使用基于http的REST通信（<a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.2.6.RELEASE/reference/html/#elasticsearch.clients.transport%EF%BC%89%EF%BC%8C%E5%A6%82%E4%B8%8B%E9%85%8D%E7%BD%AE%EF%BC%9A">https://docs.spring.io/spring-data/elasticsearch/docs/3.2.6.RELEASE/reference/html/#elasticsearch.clients.transport），如下配置：</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RestHighLevelClient <span class="title">client</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClientConfiguration clientConfiguration = ClientConfiguration.builder()</span><br><span class="line">                .connectedTo(<span class="string">&quot;192.168.17.101:9201&quot;</span>, <span class="string">&quot;192.168.17.101:9202&quot;</span>, <span class="string">&quot;192.168.17.101:9203&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> RestClients.create(clientConfiguration).rest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure><p>注意通信端口也使用9200，这个是http的。</p><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><h3 id="1-编写实体类对象"><a href="#1-编写实体类对象" class="headerlink" title="1.编写实体类对象"></a>1.编写实体类对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Document(indexName = &quot;index_blog&quot;, type = &quot;article&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Long, store = true)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, store = true, analyzer = &quot;ik_smart&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, store = true, analyzer = &quot;ik_smart&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，</p><ul><li>@Document注解，指定了es搜索引擎的索引和类型（7.0后不用指定类型）；</li><li>@Field注解，指定字段类型，以及是否存储，还有<strong>分词器类型等；这里注意，在查询时，查询参数分词后是and关系，不是or的关系。</strong></li></ul><p>默认es只有标准分词器，这里使用的是IK分词器，需要单独配置，</p><p><strong>另外，Elasticsearch和关系数据库概念对应关系：</strong></p><table><thead><tr><th>关系数据库 =&gt;</th><th>数据库</th><th>表</th><th>行</th><th>列</th></tr></thead><tbody><tr><td>Elasticsearch =&gt;</td><td>索引(Index)</td><td>类型(type)</td><td>文档(Docments)</td><td>字段(Fields)</td></tr></tbody></table><p><strong>注意：</strong><br>ES7中，已经废弃了type的概念，默认使用_doc作为类型名；也就是一个索引中，只能存在一个类型（一个表），那就是 _toc。<br>创建mapping的时候，不用指定type这一层级，否则报错。</p><h3 id="2-编写dao层接口"><a href="#2-编写dao层接口" class="headerlink" title="2.编写dao层接口"></a>2.编写dao层接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">ArticleEntity</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<br>@Repository注解可以使此接口被spring扫描到，如果不加此注解，也可以手动配置dao层的包扫描路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//添加dao层包扫描</span></span><br><span class="line"><span class="meta">@EnableElasticsearchRepositories(basePackages = &quot;com.example.demo.es.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><p>ElasticsearchRepository接口，提供了一些增删改查等众多方法，集成它就可以直接使用这些方法了。</p><h3 id="3-编写controller层接口"><a href="#3-编写controller层接口" class="headerlink" title="3.编写controller层接口"></a>3.编写controller层接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/article&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsArticleController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleRepository articleReposiory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/addArticle&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArticleEntity <span class="title">addArticle</span><span class="params">(<span class="meta">@RequestBody</span> ArticleEntity article)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> articleReposiory.save(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findArticle/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;ArticleEntity&gt; <span class="title">findArticle</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> articleReposiory.findById(String.valueOf(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteArticle</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;</span><br><span class="line">        articleReposiory.deleteById(String.valueOf(id));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-测试"><a href="#三-测试" class="headerlink" title="三. 测试"></a>三. 测试</h2><p>启动项目，spring就是自动帮助创建代码中指定过的索引，比如本文中写了个ArticleEntity，指定了index为”index_blog”，启动项目后，登陆head插件，发现已经创建好了索引：<br><img src="/2021/04/12/ES%E7%AC%94%E8%AE%B0/es%E7%AC%94%E8%AE%B0%E5%8E%9F%E7%94%9F/1.png" alt="在这里插入图片描述"><br>索引信息：<br><img src="/2021/04/12/ES%E7%AC%94%E8%AE%B0/es%E7%AC%94%E8%AE%B0%E5%8E%9F%E7%94%9F/2.png" alt="在这里插入图片描述"></p><h3 id="1-添加数据"><a href="#1-添加数据" class="headerlink" title="1.添加数据"></a>1.添加数据</h3><p>使用postman访问下：<br><img src="/2021/04/12/ES%E7%AC%94%E8%AE%B0/es%E7%AC%94%E8%AE%B0%E5%8E%9F%E7%94%9F/3.png" alt="在这里插入图片描述"><br>使用head插件看下存进去的数据：<br><img src="/2021/04/12/ES%E7%AC%94%E8%AE%B0/es%E7%AC%94%E8%AE%B0%E5%8E%9F%E7%94%9F/4.png" alt="在这里插入图片描述"></p><h3 id="2-删除文档"><a href="#2-删除文档" class="headerlink" title="2.删除文档"></a>2.删除文档</h3><p><img src="/2021/04/12/ES%E7%AC%94%E8%AE%B0/es%E7%AC%94%E8%AE%B0%E5%8E%9F%E7%94%9F/5.png" alt="在这里插入图片描述"></p><h3 id="3-修改文档"><a href="#3-修改文档" class="headerlink" title="3.修改文档"></a>3.修改文档</h3><p>ES的修改，过程是先删除后添加，因此修改方法就是添加方法，只要保证id相同就行。</p><h3 id="4-根据id查询数据"><a href="#4-根据id查询数据" class="headerlink" title="4.根据id查询数据"></a>4.根据id查询数据</h3><p><img src="/2021/04/12/ES%E7%AC%94%E8%AE%B0/es%E7%AC%94%E8%AE%B0%E5%8E%9F%E7%94%9F/6.png" alt="在这里插入图片描述"></p><h3 id="5-查询所有"><a href="#5-查询所有" class="headerlink" title="5.查询所有"></a>5.查询所有</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">articleReposiory.findAll();</span><br></pre></td></tr></table></figure><h3 id="6-自定义查询"><a href="#6-自定义查询" class="headerlink" title="6.自定义查询"></a>6.自定义查询</h3><p>上述查询，使用的都是articleReposiory自带的方法，实现一些简单查询，但是如果想实现复杂一点查询，比如根据ArticleEntity中的title字段查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">ArticleEntity</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;ArticleEntity&gt; <span class="title">findByTitle</span><span class="params">(String title)</span></span>;</span><br><span class="line">    <span class="function">List&lt;ArticleEntity&gt; <span class="title">findByTitleOrContent</span><span class="params">(String title, String content)</span></span>;</span><br><span class="line">    <span class="function">List&lt;ArticleEntity&gt; <span class="title">findByTitleOrContent</span><span class="params">(String title, String content, Pageable pageable)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命名遵循规范就行，idea本身也有提提示，然后就可以使用这个方法进行查询了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">articleReposiory.findByTitle(title);</span><br></pre></td></tr></table></figure><h3 id="7-分页查询"><a href="#7-分页查询" class="headerlink" title="7.分页查询"></a>7.分页查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;ArticleEntity&gt; <span class="title">findByTitleOrContent</span><span class="params">(String title, String content, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@GetMapping(&quot;/findByTitleOrContentPage&quot;)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> List&lt;ArticleEntity&gt; <span class="title">findByTitleOrContentPage</span><span class="params">(String title, String content, Integer pageNum, Integer pageSize)</span> </span>&#123;</span><br><span class="line">     Pageable pageable = PageRequest.of(pageNum, pageSize);</span><br><span class="line">     <span class="keyword">return</span> articleReposiory.findByTitleOrContent(title, content, pageable);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>使用<strong>Pageable</strong>参数，注意页码从0开始。</p><h3 id="8-使用原生的NativeSearchQuery查询"><a href="#8-使用原生的NativeSearchQuery查询" class="headerlink" title="8.使用原生的NativeSearchQuery查询"></a>8.使用原生的NativeSearchQuery查询</h3><p>使用NativeSearchQuery查询条件，可以做到更灵活更复杂的查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ElasticsearchRestTemplate elasticsearchRestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/findByTitleOrContentPageByTemplate&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ArticleEntity&gt; <span class="title">findByTitleOrContentPageByTemplate</span><span class="params">(String title, String content, Integer pageNum, Integer pageSize)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    NativeSearchQuery nativeSearchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder()</span><br><span class="line">            .withQuery(QueryBuilders.queryStringQuery(title).defaultField(<span class="string">&quot;title&quot;</span>))</span><br><span class="line">            .withQuery(QueryBuilders.queryStringQuery(content).defaultField(<span class="string">&quot;content&quot;</span>))</span><br><span class="line">            .withPageable(PageRequest.of(pageNum, pageSize))</span><br><span class="line">            .build();</span><br><span class="line">    <span class="keyword">return</span> elasticsearchRestTemplate.queryForList(nativeSearchQuery, ArticleEntity.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前文中，我们介绍了使用springdata做一些简单查询，但是要实现一些高级的组合等查询，还是需要使用ES的一些原生方法。</p><p>本文介绍一些高级查询用法。需要看环境搭建的，先直接看前文。</p><p><strong>数据准备：</strong><br>es中事先插入了20多条数据，用于测试，然后title和content使用了ik_smart分词：<br><img src="/2021/04/12/ES%E7%AC%94%E8%AE%B0/es%E7%AC%94%E8%AE%B0%E5%8E%9F%E7%94%9F/20200505213555715.png" alt="在这里插入图片描述"></p><h2 id="一、ElasticsearchRestTemplate"><a href="#一、ElasticsearchRestTemplate" class="headerlink" title="一、ElasticsearchRestTemplate"></a>一、ElasticsearchRestTemplate</h2><p>ElasticsearchRestTemplate是Spring封装ES客户端的一些原生api模板，方便实现一些查询，和ElasticsearchTemplate一样，但是目前spring推荐使用前者，是一种更高级的REST风格api。</p><p><img src="/2021/04/12/ES%E7%AC%94%E8%AE%B0/es%E7%AC%94%E8%AE%B0%E5%8E%9F%E7%94%9F/7.png" alt="在这里插入图片描述"></p><p>废话不多说，先上一个demo，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsArticleControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchRestTemplate elasticsearchRestTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        NativeSearchQuery nativeSearchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder()</span><br><span class="line">                <span class="comment">//查询条件</span></span><br><span class="line">                .withQuery(QueryBuilders.queryStringQuery(<span class="string">&quot;浦东开发开放&quot;</span>).defaultField(<span class="string">&quot;title&quot;</span>))</span><br><span class="line">                <span class="comment">//分页</span></span><br><span class="line">                .withPageable(PageRequest.of(<span class="number">0</span>, <span class="number">5</span>))</span><br><span class="line">                <span class="comment">//排序</span></span><br><span class="line">                .withSort(SortBuilders.fieldSort(<span class="string">&quot;id&quot;</span>).order(SortOrder.DESC))</span><br><span class="line">                <span class="comment">//高亮字段显示</span></span><br><span class="line">                .withHighlightFields(<span class="keyword">new</span> HighlightBuilder.Field(<span class="string">&quot;浦东&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">        List&lt;ArticleEntity&gt; articleEntities = elasticsearchRestTemplate.queryForList(nativeSearchQuery, ArticleEntity.class);</span><br><span class="line">        articleEntities.forEach(item -&gt; System.out.println(item.toString()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法是根据指定的title模糊查询一个列表，其中用到了几个关键类，说明一下：</p><ul><li>elasticsearchRestTemplate.queryForList是查询一个列表，用的就是ElasticsearchRestTemplate的一个对象实例；</li><li>NativeSearchQuery ：是springdata中的查询条件；</li><li>NativeSearchQueryBuilder ：用于建造一个NativeSearchQuery查询对象；</li><li>QueryBuilders ：设置查询条件，是ES中的类；</li><li>SortBuilders ：设置排序条件；</li><li>HighlightBuilder ：设置高亮显示；</li></ul><p>下面分类具体介绍下。</p><h2 id="二、NativeSearchQuery"><a href="#二、NativeSearchQuery" class="headerlink" title="二、NativeSearchQuery"></a>二、NativeSearchQuery</h2><p>这是一个原生的查询条件类，用来和ES的一些原生查询方法进行搭配，实现一些比较复杂的查询。<br><img src="/2021/04/12/ES%E7%AC%94%E8%AE%B0/es%E7%AC%94%E8%AE%B0%E5%8E%9F%E7%94%9F/8.png" alt="在这里插入图片描述"><br>下面是NativeSearchQuery的一些内部属性，基本上都是ES的一些内部对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询条件，查询的时候，会考虑关键词的匹配度，并按照分值进行排序</span></span><br><span class="line"><span class="keyword">private</span> QueryBuilder query;</span><br><span class="line"><span class="comment">//查询条件，查询的时候，不考虑匹配程度以及排序这些事情</span></span><br><span class="line"><span class="keyword">private</span> QueryBuilder filter;</span><br><span class="line"><span class="comment">//排序条件的builder</span></span><br><span class="line"><span class="keyword">private</span> List&lt;SortBuilder&gt; sorts;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;ScriptField&gt; scriptFields = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> CollapseBuilder collapseBuilder;</span><br><span class="line"><span class="keyword">private</span> List&lt;FacetRequest&gt; facets;</span><br><span class="line"><span class="keyword">private</span> List&lt;AbstractAggregationBuilder&gt; aggregations;</span><br><span class="line"><span class="comment">//高亮显示的builder</span></span><br><span class="line"><span class="keyword">private</span> HighlightBuilder highlightBuilder;</span><br><span class="line"><span class="keyword">private</span> HighlightBuilder.Field[] highlightFields;</span><br><span class="line"><span class="keyword">private</span> List&lt;IndexBoost&gt; indicesBoost;</span><br></pre></td></tr></table></figure><p>上述属性的值，就像demo的写的，通过NativeSearchQueryBuilder进行构建即可，最终作为elasticsearchRestTemplate的查询条件入参。</p><h2 id="三、QueryBuilders"><a href="#三、QueryBuilders" class="headerlink" title="三、QueryBuilders"></a>三、QueryBuilders</h2><p>QueryBuilders是ES中的查询条件构造器。下面结合一些具体的查询场景，分析其常用方法。</p><p>ES中已经有title为 <strong>“总书记关心浦东开发开放”</strong> 的数据；</p><p>ik_smart分词结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;总书记&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;关心&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;浦东&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;开发&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">12</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;开放&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">12</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">14</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-1精确查询"><a href="#3-1精确查询" class="headerlink" title="3.1精确查询"></a>3.1精确查询</h2><p>精确，指的是查询关键字（或者关键字分词后），必须与目标分词结果完全匹配。</p><p>1.指定字符串作为关键词查询，关键词支持分词</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询title字段中，包含 ”开发”、“开放&quot; 这个字符串的document；相当于把&quot;浦东开发开放&quot;分词了，再查询；</span></span><br><span class="line">QueryBuilders.queryStringQuery(<span class="string">&quot;开发开放&quot;</span>).defaultField(<span class="string">&quot;title&quot;</span>);</span><br><span class="line"><span class="comment">//不指定feild，查询范围为所有feild</span></span><br><span class="line">QueryBuilders.queryStringQuery(<span class="string">&quot;青春&quot;</span>);</span><br><span class="line"><span class="comment">//指定多个feild</span></span><br><span class="line">QueryBuilders.queryStringQuery(<span class="string">&quot;青春&quot;</span>).field(<span class="string">&quot;title&quot;</span>).field(<span class="string">&quot;content&quot;</span>);</span><br></pre></td></tr></table></figure><p>2.以关键字“开发开放”，关键字不支持分词</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QueryBuilders.termQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;开发开放&quot;</span>)</span><br><span class="line">QueryBuilders.termsQuery(<span class="string">&quot;fieldName&quot;</span>, <span class="string">&quot;fieldlValue1&quot;</span>,<span class="string">&quot;fieldlValue2...&quot;</span>)</span><br></pre></td></tr></table></figure><p>3.以关键字“开发开放”，关键字支持分词</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;开发开放&quot;</span>)</span><br><span class="line">QueryBuilders.multiMatchQuery(<span class="string">&quot;fieldlValue&quot;</span>, <span class="string">&quot;fieldName1&quot;</span>, <span class="string">&quot;fieldName2&quot;</span>, <span class="string">&quot;fieldName3&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="3-2-模糊查询"><a href="#3-2-模糊查询" class="headerlink" title="3.2 模糊查询"></a>3.2 模糊查询</h2><p>模糊，是指查询关键字与目标关键字可以模糊匹配。</p><p>1.左右模糊查询，其中fuzziness的参数作用是在查询时，es动态的将查询关键词前后增加或者删除一个词，然后进行匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QueryBuilders.fuzzyQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;开发开放&quot;</span>).fuzziness(Fuzziness.ONE)</span><br></pre></td></tr></table></figure><p>2.前缀查询，查询title中以“开发开放”为前缀的document；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QueryBuilders.prefixQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;开发开放&quot;</span>)</span><br></pre></td></tr></table></figure><p>3.通配符查询，支持*和？，？表示单个字符；注意不建议将通配符作为前缀，否则导致查询很慢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QueryBuilders.wildcardQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;开*放&quot;</span>)</span><br><span class="line">QueryBuilders.wildcardQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;开？放&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>注意，</strong><br>在分词的情况下，针对fuzzyQuery、prefixQuery、wildcardQuery不支持分词查询，即使有这种doucment数据，也不一定能查出来，因为分词后，不一定有“开发开放”这个词；</p><p><strong>查询总结：</strong></p><table><thead><tr><th></th><th>开发开放</th><th>放</th><th>开</th></tr></thead><tbody><tr><td>queryStringQuery</td><td>目标中含有开发、开放、开发开放的</td><td>无</td><td>无</td></tr><tr><td>matchQuery</td><td>同queryStringQuery</td><td>无</td><td>无</td></tr><tr><td>termQuery</td><td>无结果，因为它不支持分词</td><td>无</td><td>无</td></tr><tr><td>prefixQuery</td><td>无结果，因为它不支持分词</td><td>无</td><td>有，目标分词中以”开“开头的</td></tr><tr><td>fuzzyQuery</td><td>无结果，但是与fuzziness参数有关系</td><td>无</td><td>无</td></tr><tr><td>wildcardQuery</td><td>开发开放*无结果</td><td>开*，有</td><td>放*，无</td></tr></tbody></table><h2 id="3-3-范围查询"><a href="#3-3-范围查询" class="headerlink" title="3.3 范围查询"></a>3.3 范围查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//闭区间查询</span></span><br><span class="line">QueryBuilders.rangeQuery(<span class="string">&quot;fieldName&quot;</span>).from(<span class="string">&quot;fieldValue1&quot;</span>).to(<span class="string">&quot;fieldValue2&quot;</span>);</span><br><span class="line"><span class="comment">//开区间查询，默认是true，也就是包含</span></span><br><span class="line">QueryBuilders.rangeQuery(<span class="string">&quot;fieldName&quot;</span>).from(<span class="string">&quot;fieldValue1&quot;</span>).to(<span class="string">&quot;fieldValue2&quot;</span>).includeUpper(<span class="keyword">false</span>).includeLower(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//大于</span></span><br><span class="line">QueryBuilders.rangeQuery(<span class="string">&quot;fieldName&quot;</span>).gt(<span class="string">&quot;fieldValue&quot;</span>);</span><br><span class="line"><span class="comment">//大于等于</span></span><br><span class="line">QueryBuilders.rangeQuery(<span class="string">&quot;fieldName&quot;</span>).gte(<span class="string">&quot;fieldValue&quot;</span>);</span><br><span class="line"><span class="comment">//小于</span></span><br><span class="line">QueryBuilders.rangeQuery(<span class="string">&quot;fieldName&quot;</span>).lt(<span class="string">&quot;fieldValue&quot;</span>);</span><br><span class="line"><span class="comment">//小于等于</span></span><br><span class="line">QueryBuilders.rangeQuery(<span class="string">&quot;fieldName&quot;</span>).lte(<span class="string">&quot;fieldValue&quot;</span>);</span><br><span class="line"><span class="number">123456789101112</span></span><br></pre></td></tr></table></figure><h2 id="3-4-多个关键字组合查询boolQuery"><a href="#3-4-多个关键字组合查询boolQuery" class="headerlink" title="3.4 多个关键字组合查询boolQuery()"></a>3.4 多个关键字组合查询boolQuery()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QueryBuilders.boolQuery()</span><br><span class="line">QueryBuilders.boolQuery().must();<span class="comment">//文档必须完全匹配条件，相当于and</span></span><br><span class="line">QueryBuilders.boolQuery().mustNot();<span class="comment">//文档必须不匹配条件，相当于not</span></span><br><span class="line">QueryBuilders.boolQuery().should();<span class="comment">//至少满足一个条件，这个文档就符合should，相当于or</span></span><br></pre></td></tr></table></figure><p>具体demo如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBoolQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   NativeSearchQuery nativeSearchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder()</span><br><span class="line">            .withQuery(QueryBuilders.boolQuery()</span><br><span class="line">                    .should(QueryBuilders.termQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;开发&quot;</span>))</span><br><span class="line">                    .should(QueryBuilders.termQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;青春&quot;</span>))</span><br><span class="line">                    .mustNot(QueryBuilders.termQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;潮头&quot;</span>))</span><br><span class="line">            )</span><br><span class="line">            .withSort(SortBuilders.fieldSort(<span class="string">&quot;id&quot;</span>).order(SortOrder.DESC))</span><br><span class="line">            .withPageable(PageRequest.of(<span class="number">0</span>, <span class="number">50</span>))</span><br><span class="line">            .build();</span><br><span class="line">    List&lt;ArticleEntity&gt; articleEntities = elasticsearchRestTemplate.queryForList(nativeSearchQuery, ArticleEntity.class);</span><br><span class="line">    articleEntities.forEach(item -&gt; System.out.println(item.toString()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是查询title分词中，包含“开发”或者“青春”，但不能包含“潮头”的document；<br>也可以多个must组合。</p><h2 id="四、SortBuilders排序"><a href="#四、SortBuilders排序" class="headerlink" title="四、SortBuilders排序"></a>四、SortBuilders排序</h2><p>上述demo中，我们使用了排序条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按照id字段降序</span></span><br><span class="line">.withSort(SortBuilders.fieldSort(<span class="string">&quot;id&quot;</span>).order(SortOrder.DESC))</span><br></pre></td></tr></table></figure><p>注意排序时，有个坑，就是在以id排序时，比如降序，结果可能并不是我们想要的。因为根据id排序，es实际上会根据_id进行排序，但是_id是string类型的，排序后的结果会与整型不一致。</p><p>建议：<br>在创建es的索引mapping时，将es的id和业务的id分开，比如业务id叫做myId：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@Field(type = FieldType.Long, store = true)</span></span><br><span class="line"><span class="keyword">private</span> Long myId;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Field(type = FieldType.Text, store = true, analyzer = &quot;ik_smart&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Field(type = FieldType.Text, store = true, analyzer = &quot;ik_smart&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String content;</span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure><p>这样，后续排序可以使用myId进行排序。</p><h2 id="五、分页"><a href="#五、分页" class="headerlink" title="五、分页"></a>五、分页</h2><p>使用如下方式分页：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    NativeSearchQuery nativeSearchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder()</span><br><span class="line">            .withQuery(QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;青春&quot;</span>))</span><br><span class="line">            .withSort(SortBuilders.fieldSort(<span class="string">&quot;myId&quot;</span>).order(SortOrder.DESC))</span><br><span class="line">            .withPageable(PageRequest.of(<span class="number">0</span>, <span class="number">50</span>))</span><br><span class="line">            .build();</span><br><span class="line">    AggregatedPage&lt;ArticleEntity&gt; page = elasticsearchRestTemplate.queryForPage(nativeSearchQuery, ArticleEntity.class);</span><br><span class="line">    List&lt;ArticleEntity&gt; articleEntities = page.getContent();</span><br><span class="line">    articleEntities.forEach(item -&gt; System.out.println(item.toString()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，如果不指定分页参数，es默认只显示10条。</p><h2 id="六、高亮显示"><a href="#六、高亮显示" class="headerlink" title="六、高亮显示"></a>六、高亮显示</h2><p>查询title字段中的关键字，并高亮显示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String preTag = <span class="string">&quot;&lt;font color=&#x27;#dd4b39&#x27;&gt;&quot;</span>;</span><br><span class="line">    String postTag = <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">    NativeSearchQuery nativeSearchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder()</span><br><span class="line">            .withQuery(QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;开发&quot;</span>))</span><br><span class="line">            .withPageable(PageRequest.of(<span class="number">0</span>, <span class="number">50</span>))</span><br><span class="line">            .withSort(SortBuilders.fieldSort(<span class="string">&quot;id&quot;</span>).order(SortOrder.DESC))</span><br><span class="line">            .withHighlightFields(<span class="keyword">new</span> HighlightBuilder.Field(<span class="string">&quot;title&quot;</span>).preTags(preTag).postTags(postTag))</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    AggregatedPage&lt;ArticleEntity&gt; page = elasticsearchRestTemplate.queryForPage(nativeSearchQuery, ArticleEntity.class,</span><br><span class="line">            <span class="keyword">new</span> SearchResultMapper() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> &lt;T&gt; <span class="function">AggregatedPage&lt;T&gt; <span class="title">mapResults</span><span class="params">(SearchResponse response, Class&lt;T&gt; clazz, Pageable pageable)</span> </span>&#123;</span><br><span class="line">                    List&lt;ArticleEntity&gt; chunk = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span> (SearchHit searchHit : response.getHits()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (response.getHits().getHits().length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        ArticleEntity article = <span class="keyword">new</span> ArticleEntity();</span><br><span class="line">                        article.setMyId(Long.valueOf(searchHit.getSourceAsMap().get(<span class="string">&quot;id&quot;</span>).toString()));</span><br><span class="line">                        article.setContent(searchHit.getSourceAsMap().get(<span class="string">&quot;content&quot;</span>).toString());</span><br><span class="line">                        HighlightField title = searchHit.getHighlightFields().get(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (title != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            article.setTitle(title.fragments()[<span class="number">0</span>].toString());</span><br><span class="line">                        &#125;</span><br><span class="line">                        chunk.add(article);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (chunk.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> AggregatedPageImpl&lt;&gt;((List&lt;T&gt;) chunk);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">mapSearchHit</span><span class="params">(SearchHit searchHit, Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;ArticleEntity&gt; articleEntities = page.getContent();</span><br><span class="line">    articleEntities.forEach(item -&gt; System.out.println(item.toString()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title&#x3D;勇立潮头——总书记关心浦东&lt;font color&#x3D;&#39;#dd4b39&#39;&gt;开发&lt;&#x2F;font&gt;开放40, content&#x3D;外交部：望</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、创建springboot项目&quot;&gt;&lt;a href=&quot;#一、创建springboot项目&quot; class=&quot;headerlink&quot; title=&quot;一、创建springboot项目&quot;&gt;&lt;/a&gt;一、创建springboot项目&lt;/h2&gt;&lt;h3 id=&quot;1-创建sprin</summary>
      
    
    
    
    
    <category term="elasticsearch" scheme="http://example.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>docker安装mysql和nacos</title>
    <link href="http://example.com/2021/04/10/mysql+nacos%E5%AE%89%E8%A3%85/docker%E5%AE%89%E8%A3%85mysql%E5%92%8Cnacos/"/>
    <id>http://example.com/2021/04/10/mysql+nacos%E5%AE%89%E8%A3%85/docker%E5%AE%89%E8%A3%85mysql%E5%92%8Cnacos/</id>
    <published>2021-04-10T03:48:33.000Z</published>
    <updated>2021-04-10T11:42:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>/摘</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker 环境</span><br><span class="line">MySQL 5.7 (官方镜像不支持mysql8)</span><br><span class="line">nacos</span><br></pre></td></tr></table></figure><h2 id="docker安装MySQL"><a href="#docker安装MySQL" class="headerlink" title="docker安装MySQL"></a>docker安装MySQL</h2><ul><li>创建自定义网络（用于容器通讯）</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create common<span class="literal">-network</span></span><br></pre></td></tr></table></figure><ul><li>查看网络</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p><img src="/2021/04/10/mysql+nacos%E5%AE%89%E8%A3%85/docker%E5%AE%89%E8%A3%85mysql%E5%92%8Cnacos/2020041119590820.png" alt="效果"></p><ul><li>创建挂载文件夹</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//mysql配置文件 </span><br><span class="line">mkdir <span class="literal">-p</span> /<span class="keyword">data</span>/mysql/conf</span><br><span class="line">//mysql数据文件路径 </span><br><span class="line">mkdir –p /<span class="keyword">data</span>/mysql/<span class="keyword">data</span></span><br><span class="line">//日志文件路径</span><br><span class="line">mkdir <span class="literal">-p</span> /<span class="keyword">data</span>/mysql/logs </span><br></pre></td></tr></table></figure><ul><li>拉取镜像并启动</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-p</span> <span class="number">3306</span>:<span class="number">3306</span> -<span class="literal">-name</span> mysql <span class="literal">-d</span> \</span><br><span class="line">-<span class="literal">-restart</span>=always \</span><br><span class="line">-<span class="literal">-network</span> common<span class="literal">-network</span> \</span><br><span class="line"><span class="literal">-v</span> /<span class="keyword">data</span>/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line"><span class="literal">-v</span> /<span class="keyword">data</span>/mysql/logs:/logs \</span><br><span class="line"><span class="literal">-v</span> /<span class="keyword">data</span>/mysql/<span class="keyword">data</span>:/<span class="keyword">data</span> \</span><br><span class="line"><span class="literal">-e</span> MYSQL_ROOT_PASSWORD=admin \</span><br><span class="line">mysql:<span class="number">5.7</span> </span><br></pre></td></tr></table></figure><h2 id="docker-安装nacos"><a href="#docker-安装nacos" class="headerlink" title="docker 安装nacos"></a>docker 安装nacos</h2><ul><li>拉取镜像</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//查询nacos镜像</span><br><span class="line">docker search nacos</span><br><span class="line">//拉取镜像</span><br><span class="line">docker pull nacos/nacos<span class="literal">-server</span></span><br><span class="line">//查看镜像</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><ul><li>启动nacos容器</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -<span class="literal">-network</span> common<span class="literal">-network</span> -<span class="literal">-env</span> MODE=standalone -<span class="literal">-name</span> nacos <span class="literal">-d</span> <span class="literal">-p</span> <span class="number">8848</span>:<span class="number">8848</span> nacos/nacos<span class="literal">-server</span></span><br></pre></td></tr></table></figure><ul><li>查看启动的容器</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">ps</span></span><br></pre></td></tr></table></figure><p><img src="/2021/04/10/mysql+nacos%E5%AE%89%E8%A3%85/docker%E5%AE%89%E8%A3%85mysql%E5%92%8Cnacos/20200411201146711.jpg" alt="在这里插入图片描述"></p><h2 id="nacos-配置连接数据库"><a href="#nacos-配置连接数据库" class="headerlink" title="nacos 配置连接数据库"></a>nacos 配置连接数据库</h2><ul><li>查看自定义网络中各容器ip</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//查看网络</span><br><span class="line">docker network <span class="built_in">ls</span></span><br><span class="line">//查看网络容器</span><br><span class="line">docker network inspect common<span class="literal">-network</span></span><br></pre></td></tr></table></figure><p><img src="/2021/04/10/mysql+nacos%E5%AE%89%E8%A3%85/docker%E5%AE%89%E8%A3%85mysql%E5%92%8Cnacos/2020041120161589.png" alt="在这里插入图片描述"><br><img src="/2021/04/10/mysql+nacos%E5%AE%89%E8%A3%85/docker%E5%AE%89%E8%A3%85mysql%E5%92%8Cnacos/aa.png" alt="在这里插入图片描述"></p><ul><li>进入nacos容器修改配置</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 进入容器  </span><br><span class="line">docker exec <span class="literal">-it</span> nacos bash</span><br><span class="line">// 修改容器配置</span><br><span class="line"><span class="built_in">cd</span> conf</span><br><span class="line">vi application.properties</span><br></pre></td></tr></table></figure><p><img src="/2021/04/10/mysql+nacos%E5%AE%89%E8%A3%85/docker%E5%AE%89%E8%A3%85mysql%E5%92%8Cnacos/ad.png" alt="在这里插入图片描述"></p><ul><li>创建数据库表（脚本地址）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/alibaba/nacos/blob/develop/distribution/conf/nacos-mysql.sql </span><br></pre></td></tr></table></figure><ul><li>重启容器</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart nacos</span><br></pre></td></tr></table></figure><ul><li>nacos管理平台（新增配置 ，然后可在数据库查看）</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://ip:8848/nacos/index.html</span></span><br><span class="line"><span class="attribute">nacos/nacos(用户名密码)</span></span><br></pre></td></tr></table></figure><p><img src="/2021/04/10/mysql+nacos%E5%AE%89%E8%A3%85/docker%E5%AE%89%E8%A3%85mysql%E5%92%8Cnacos/dd.png" alt="在这里插入图片描述"><br><img src="/2021/04/10/mysql+nacos%E5%AE%89%E8%A3%85/docker%E5%AE%89%E8%A3%85mysql%E5%92%8Cnacos/add.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;/摘&lt;/p&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    
    <category term="nacos" scheme="http://example.com/tags/nacos/"/>
    
  </entry>
  
  <entry>
    <title>狂神说笔记</title>
    <link href="http://example.com/2021/04/07/%E7%8B%82%E7%A5%9E%E8%AF%B4/kuang/"/>
    <id>http://example.com/2021/04/07/%E7%8B%82%E7%A5%9E%E8%AF%B4/kuang/</id>
    <published>2021-04-07T04:48:33.000Z</published>
    <updated>2021-04-07T18:53:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>狂神说笔记</p><p>/摘 </p><p><a href="../../../../../../file/1%E3%80%81JavaSE%EF%BC%9AJava%E5%85%A5%E9%97%A8.pdf">1、JavaSE：Java入门.pdf</a> </p><p> <a href="../../../../../../file/2%E3%80%81JavaSE%EF%BC%9A%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.pdf">2、JavaSE：基础语法.pdf</a> </p><p> <a href="../../../../../../file/3%E3%80%81JavaSE%EF%BC%9A%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.pdf">3、JavaSE：流程控制.pdf</a> </p><p> <a href="../../../../../../file/4%E3%80%81JavaSE%EF%BC%9A%E6%96%B9%E6%B3%95.pdf">4、JavaSE：方法.pdf</a> </p><p> <a href="../../../../../../file/5%E3%80%81JavaSE%EF%BC%9A%E6%95%B0%E7%BB%84.pdf">5、JavaSE：数组.pdf</a> </p><p> <a href="../../../../../../file/6%E3%80%81JavaSE%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.pdf">6、JavaSE：面向对象.pdf</a> </p><p> <a href="../../../../../../file/7%E3%80%81JavaSE%EF%BC%9A%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6.pdf">7、JavaSE：异常机制.pdf</a> </p><p> <a href="../../../../../../file/8%E3%80%81JavaSE%EF%BC%9A%E5%B8%B8%E7%94%A8%E7%B1%BB.pdf">8、JavaSE：常用类.pdf</a> </p><p> <a href="../../../../../../file/9%E3%80%81JavaSE%EF%BC%9A%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.pdf">9、JavaSE：集合框架.pdf</a> </p><p> <a href="../../../../../../file/10%E3%80%81JavaSE%EF%BC%9AIO%E6%B5%81.pdf">10、JavaSE：IO流.pdf</a> </p><p> <a href="../../../../../../file/11%E3%80%81JavaSE%EF%BC%9A%E5%A4%9A%E7%BA%BF%E7%A8%8B.pdf">11、JavaSE：多线程.pdf</a> </p><p> <a href="../../../../../../file/12%E3%80%81JavaSE%EF%BC%9A%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B.pdf">12、JavaSE：网络编程.pdf</a> </p><p> <a href="../../../../../../file/13%E3%80%81JavaSE%EF%BC%9AGui%E7%BC%96%E7%A8%8B.pdf">13、JavaSE：Gui编程.pdf</a> </p><p> <a href="../../../../../../file/14%E3%80%81JavaSE%EF%BC%9A%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.pdf">14、JavaSE：注解和反射.pdf</a> </p><p> <a href="../../../../../../file/15%E3%80%81MySQL%E5%92%8CJDBC.pdf">15、MySQL和JDBC.pdf</a> </p><p> <a href="../../../../../../file/16%E3%80%81%E5%89%8D%E7%AB%AF%EF%BC%9AHtml5.pdf">16、前端：Html5.pdf</a> </p><p> <a href="../../../../../../file/17%E3%80%81%E5%89%8D%E7%AB%AF%EF%BC%9ACSS3.pdf">17、前端：CSS3.pdf</a> </p><p> <a href="../../../../../../file/18%E3%80%81%E5%89%8D%E7%AB%AF%EF%BC%9AJavaScript%E3%80%81jQuery.pdf">18、前端：JavaScript、jQuery.pdf</a> </p><p> <a href="../../../../../../file/19%E3%80%81JavaWeb.pdf">19、JavaWeb.pdf</a> </p><p> <a href="../../../../../../file/20%E3%80%81MyBatis.pdf">20、MyBatis.pdf</a> </p><p> <a href="../../../../../../file/21%E3%80%81Spring.pdf">21、Spring.pdf</a> </p><p> <a href="../../../../../../file/22%E3%80%81SpringMVC.pdf">22、SpringMVC.pdf</a> </p><p> <a href="../../../../../../file/23%E3%80%81%E5%A4%A7%E5%89%8D%E7%AB%AF%E4%B8%B2%E8%AE%B2.pdf">23、大前端串讲.pdf</a> </p><p> <a href="../../../../../../file/24%E3%80%81Vue%E7%B2%BE%E8%AE%B2.pdf">24、Vue精讲.pdf</a> </p><p> <a href="../../../../../../file/25%E3%80%81SpringBoot%E5%85%A5%E9%97%A8%E5%8F%8A%E5%8E%9F%E7%90%86.pdf">25、SpringBoot入门及原理.pdf</a> </p><p> <a href="../../../../../../file/26%E3%80%81SpringBoot%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93.pdf">26、SpringBoot操作数据库.pdf</a> </p><p> <a href="../../../../../../file/27%E3%80%81SpringBoot%E5%BC%80%E5%8F%91%E5%8D%95%E4%BD%93%E5%BA%94%E7%94%A8.pdf">27、SpringBoot开发单体应用.pdf</a> </p><p> <a href="../../../../../../file/28%E3%80%81SpringBootWeb%E5%BC%80%E5%8F%91%E6%8F%90%E5%8D%87(Swagger).pdf">28、SpringBootWeb开发提升(Swagger).pdf</a> </p><p> <a href="../../../../../../file/29%E3%80%81SpringSecurity%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6.pdf">29、SpringSecurity权限控制.pdf</a> </p><p> <a href="../../../../../../file/30%E3%80%81%E6%95%B4%E5%90%88Dubbo+Zookeeper.pdf">30、整合Dubbo+Zookeeper.pdf</a> </p><p> <a href="../../../../../../file/31%E3%80%81Shiro.pdf">31、Shiro.pdf</a> </p><p> <a href="../../../../../../file/32%E3%80%81SpringCloudNetflix-H%E7%89%88.pdf">32、SpringCloudNetflix-H版.pdf</a> </p><p> <a href="../../../../../../file/33%E3%80%81JVM%E6%8E%A2%E7%A9%B6.pdf">33、JVM探究.pdf</a> </p><p> <a href="../../../../../../file/34%E3%80%81JUC%E7%B2%BE%E8%AE%B2.pdf">34、JUC精讲.pdf</a> </p><p> <a href="../../../../../../file/35%E3%80%81Git.pdf">35、Git.pdf</a> </p><p> <a href="../../../../../../file/36%E3%80%81Linux%E4%BD%BF%E7%94%A8.pdf">36、Linux使用.pdf</a> </p><p> <a href="../../../../../../file/37%E3%80%81Redis%E7%B2%BE%E8%AE%B2.pdf">37、Redis精讲.pdf</a> </p><p> <a href="../../../../../../file/38%E3%80%81ElasticSearch.pdf">38、ElasticSearch.pdf</a> </p><p> <a href="../../../../../../file/39%E3%80%81ActiveMQ.pdf">39、ActiveMQ.pdf</a> </p><p> <a href="../../../../../../file/40%E3%80%81Docker%E4%B8%8A.pdf">40、Docker上.pdf</a> </p><p> <a href="../../../../../../file/41%E3%80%81Docker%E4%B8%8B.pdf">41、Docker下.pdf</a> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;狂神说笔记&lt;/p&gt;
&lt;p&gt;/摘 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../../../../../../file/1%E3%80%81JavaSE%EF%BC%9AJava%E5%85%A5%E9%97%A8.pdf&quot;&gt;1、JavaSE：Java入门.pdf&lt;/a&gt; &lt;/p&gt;</summary>
      
    
    
    
    
    <category term="狂神说笔记" scheme="http://example.com/tags/%E7%8B%82%E7%A5%9E%E8%AF%B4%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>docker 安装es</title>
    <link href="http://example.com/2021/03/21/ES%E7%AC%94%E8%AE%B0/docker%20%E5%AE%89%E8%A3%85es/"/>
    <id>http://example.com/2021/03/21/ES%E7%AC%94%E8%AE%B0/docker%20%E5%AE%89%E8%A3%85es/</id>
    <published>2021-03-21T07:43:13.000Z</published>
    <updated>2021-04-08T14:57:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-安装es"><a href="#docker-安装es" class="headerlink" title="docker 安装es"></a>docker 安装es</h1><p>docker pull docker.elastic.co/elasticsearch/elasticsearch:5.6.8</p><p> sudo sysctl -w vm.max_map_count=262144</p><p>docker run -e ES_JAVA_OPTS=”-Xms512m -Xmx512m” -d -p 9200:9200 -p 9300:9300 –name ES02 6d65982e47c9</p><p>sysctl -a | grep vm.max_map_count vm.max_map_count = 65536</p><p>#下载镜像</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull docker.elastic.co/elasticsearch/elasticsearch:<span class="number">7.8</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>#创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; docker.elastic.co/elasticsearch/elasticsearch:7.8.0</span><br></pre></td></tr></table></figure><p>#官网地址<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker-安装es&quot;&gt;&lt;a href=&quot;#docker-安装es&quot; class=&quot;headerlink&quot; title=&quot;docker 安装es&quot;&gt;&lt;/a&gt;docker 安装es&lt;/h1&gt;&lt;p&gt;docker pull docker.elastic.co/elas</summary>
      
    
    
    
    
    <category term="elasticsearch" scheme="http://example.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>java开发常用工具</title>
    <link href="http://example.com/2021/01/24/java%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <id>http://example.com/2021/01/24/java%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</id>
    <published>2021-01-24T10:48:33.000Z</published>
    <updated>2021-03-02T11:24:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-IDEA2020安装破解"><a href="#1-IDEA2020安装破解" class="headerlink" title="1.IDEA2020安装破解"></a>1.IDEA2020安装破解</h1><p>java环境变量配置</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">变量名：JAVA_HOME</span><br><span class="line">变量值：D:\Program Files\Java\jdk-12.0.2        // 要根据自己的实际路径配置</span><br><span class="line">变量名：CLASSPATH</span><br><span class="line">变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;         //记得前面有个&quot;.&quot;</span><br><span class="line">变量名：Path</span><br><span class="line">变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</span><br></pre></td></tr></table></figure><p>IDEA安装包与破解文件</p><p>链接：<a href="https://pan.baidu.com/s/1NaI1KPrFV34JkSKneWXsIA">https://pan.baidu.com/s/1NaI1KPrFV34JkSKneWXsIA</a><br>提取码：9azt </p><h1 id="2-Navicat安装"><a href="#2-Navicat安装" class="headerlink" title="2.Navicat安装"></a>2.Navicat安装</h1><p>链接：<a href="https://pan.baidu.com/s/1c8xs68rulmjfJ5fhZovr9Q">https://pan.baidu.com/s/1c8xs68rulmjfJ5fhZovr9Q</a><br>提取码：g6v4 </p><h1 id="3-谷歌浏览器Postman插件"><a href="#3-谷歌浏览器Postman插件" class="headerlink" title="3.谷歌浏览器Postman插件"></a>3.谷歌浏览器Postman插件</h1><p>链接：<a href="https://pan.baidu.com/s/1sesy7sAOZM3g00U8YNa14Q">https://pan.baidu.com/s/1sesy7sAOZM3g00U8YNa14Q</a><br>提取码：9u64 </p><h1 id="4-go访问"><a href="#4-go访问" class="headerlink" title="4.go访问"></a>4.go访问</h1><p>链接：<a href="https://pan.baidu.com/s/1WAaEsoHTJxeTa5mYK-urXw">https://pan.baidu.com/s/1WAaEsoHTJxeTa5mYK-urXw</a><br>提取码：uapr </p><h1 id="5-WebStorm-2019-3-1-x64"><a href="#5-WebStorm-2019-3-1-x64" class="headerlink" title="5.WebStorm 2019.3.1 x64"></a>5.WebStorm 2019.3.1 x64</h1><p>链接：<a href="https://pan.baidu.com/s/1yri_0JCeuUfzivJzYTDaYQ">https://pan.baidu.com/s/1yri_0JCeuUfzivJzYTDaYQ</a><br>提取码：cdpg </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-IDEA2020安装破解&quot;&gt;&lt;a href=&quot;#1-IDEA2020安装破解&quot; class=&quot;headerlink&quot; title=&quot;1.IDEA2020安装破解&quot;&gt;&lt;/a&gt;1.IDEA2020安装破解&lt;/h1&gt;&lt;p&gt;java环境变量配置&lt;/p&gt;
&lt;figure</summary>
      
    
    
    
    
    <category term="工具安装" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>idea插件</title>
    <link href="http://example.com/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/"/>
    <id>http://example.com/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/</id>
    <published>2021-01-23T09:49:38.000Z</published>
    <updated>2021-03-02T11:33:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-自动导包"><a href="#1-自动导包" class="headerlink" title="1.自动导包"></a>1.自动导包</h1><p>下面是Auto Import设置步骤详解。</p><p>Settings→Editor→General→Auto Import<br>然后勾选Add unambiguous imports on the fly以及Optimize imports on the fly</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/1337265-20180413112619423-1610499505.png" alt="img"></p><p>Add unambiguous imports on the fly：快速添加明确的导入。</p><p>Optimize imports on the fly：快速优化导入，优化的意思即自动帮助删除无用的导入。</p><h1 id="2-IntelliJ-Idea设置-自定义的-类代码注释模板"><a href="#2-IntelliJ-Idea设置-自定义的-类代码注释模板" class="headerlink" title="2.IntelliJ Idea设置(自定义的)类代码注释模板"></a>2.IntelliJ Idea设置(自定义的)类代码注释模板</h1><p> 用IntelliJ Idea开发的时候代码没有注释或者注释不如人意，我们就自定义一下类代码的注释。</p><p>​    一、打开Settings – Editor – Code Style – File and Code Templates</p><p>​        <img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/SouthEast.png" alt="img"></p><p>​     二、注释模板内容</p><p>​       </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* $&#123;DESCRIPTION&#125;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> 名字</span></span><br><span class="line"><span class="comment">* <span class="doctag">@create</span> $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><p>​     三、效果</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/70.png" alt="img"></p><h1 id="3-取消Idea开始界面打开默认项目配置"><a href="#3-取消Idea开始界面打开默认项目配置" class="headerlink" title="3.取消Idea开始界面打开默认项目配置"></a>3.取消Idea开始界面打开默认项目配置</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>​      idea是非常强大的开发集成工具，打开idea软件默认会打开最近一次的项目工程，有时候我们并不需要开发上次的工程，而需要打开另外一个工程，这样默认给打开的工程需要关闭切换到新的工程。那么可不可以取消idea默认打开工程呢，当然是可以的。下面就来介绍下如何取消设置。</p><h2 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h2><p>​      1、打开idea软件，这个时候没有设置之前，会默认打开上次的项目工程。选择菜单File&gt;Settings进入设置页面。</p><p>​      2、左侧树形菜单，选择Appearance &amp; Behavior&gt;System Settings，进入系统设置页面。</p><p>​      3、在Startup/Shutdown栏目处，去掉默认的勾选Reopen last project on startup（在启动的时候打开上次的项目），去掉勾选之后，点击确认。</p><p>​         <img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/SouthEast11.png" alt="img"></p><p>​       4、关闭idea软件后，再次打开idea软件，这个时候没有直接进入项目工程，而是进入了欢迎页面，在欢迎页面左侧列表是历史打开的项目工程，可以选择一个打开，右侧可以创建新的工程或导入新的工程等</p><p>​         <img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/SouthEast12.png" alt="img"></p><p>​       5、在刚刚关闭idea软件的时候，你可能会注意到一个提示框，是确认关闭的提示窗口，防止误操作关闭了当前的工作空间。</p><p>​         <img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/SouthEast13.png" alt="img"></p><p>​       6、 可能某些人不经意勾选了Do not ask me again。结果每次关闭都不会有确认提示了。一不小心就把当前的窗口误操作关闭了。这个开关就在上面设置的那个取消打开默认工程的配置的下方。将Confirm application exit选项再次勾选上。这个时候关闭确认提示就再次开启了。</p><p>​         <img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/SouthEast14.png" alt="img"></p><h1 id="4-IDEA使用—代码如何在方法之间加入一条分割线"><a href="#4-IDEA使用—代码如何在方法之间加入一条分割线" class="headerlink" title="4.IDEA使用—代码如何在方法之间加入一条分割线"></a>4.IDEA使用—代码如何在方法之间加入一条分割线</h1><p>位置：【File】→【Settings】→【Editor】→【General】→【Appearance】→【Show method separators】<br>把【Show method separators】打上勾即可。<br><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa15.png" alt="在这里插入图片描述"></p><h1 id="5-IDEA查看源码返回上一级快捷键"><a href="#5-IDEA查看源码返回上一级快捷键" class="headerlink" title="5.IDEA查看源码返回上一级快捷键"></a>5.IDEA查看源码返回上一级快捷键</h1><p>快捷键 alt + 方向左键 放回上一级</p><h1 id="6-Lombok插件及注解"><a href="#6-Lombok插件及注解" class="headerlink" title="6.Lombok插件及注解"></a>6.Lombok插件及注解</h1><p>安装</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/C33FG37Gk4.png" alt="mark"></p><p>依赖</p><p>在自己的项目里添加 lombok 的编译支持，在 pom 文件里面添加 dependency</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.16.18&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3><h2 id="Data"><a href="#Data" class="headerlink" title="@Data"></a><strong>@Data</strong></h2><p>注解在 <strong>类</strong> 上；提供类所有属性的 get 和 set 方法，此外还提供了equals、canEqual、hashCode、toString 方法。</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/mHj1eak6fJ.png" alt="mark"></p><h2 id="Setter"><a href="#Setter" class="headerlink" title="@Setter"></a><strong>@Setter</strong></h2><p>注解在 <strong>属性</strong> 上；为单个属性提供 set 方法; 注解在 <strong>类</strong> 上，为该类所有的属性提供 set 方法， 都提供默认构造方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/lkkff2b6Dc.png" alt="mark">]</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/J9mC8FGfc0.png" alt="mark">]</p><h2 id="Getter"><a href="#Getter" class="headerlink" title="@Getter"></a><strong>@Getter</strong></h2><p>注解在 <strong>属性</strong> 上；为单个属性提供 get 方法; 注解在 <strong>类</strong> 上，为该类所有的属性提供 get 方法，都提供默认构造方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/d0F5h97J5f.png" alt="mark">]</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/K0m81cFd6g.png" alt="mark">]</p><h2 id="Slf4j"><a href="#Slf4j" class="headerlink" title="@Slf4j"></a><strong>@Slf4j</strong></h2><p>注解在 <strong>类</strong> 上；为类提供一个 属性名为 log 的日志对象，提供默认构造方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/BChd89Cbh5.png" alt="mark">]</p><h2 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a><strong>@AllArgsConstructor</strong></h2><p>注解在 <strong>类</strong> 上；为类提供一个全参的构造方法，加了这个注解后，类中不提供默认构造方法了。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/4iji9AJ0fE.png" alt="mark">]</p><h2 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a><strong>@NoArgsConstructor</strong></h2><p>注解在 <strong>类</strong> 上；为类提供一个无参的构造方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/JcdfmhDAaB.png" alt="mark">]</p><h2 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a><strong>@EqualsAndHashCode</strong></h2><p>注解在 <strong>类</strong> 上, 可以生成 equals、canEqual、hashCode 方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/CKHe7EICGd.png" alt="mark">]</p><h2 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a><strong>@NonNull</strong></h2><p>注解在 <strong>属性</strong> 上，会自动产生一个关于此参数的非空检查，如果参数为空，则抛出一个空指针异常，也会有一个默认的无参构造方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/g6Lh1eh1jm.png" alt="mark">]</p><h2 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a><strong>@Cleanup</strong></h2><p>这个注解用在 <strong>变量</strong> 前面，可以保证此变量代表的资源会被自动关闭，默认是调用资源的 close() 方法，如果该资源有其它关闭方法，可使用 @Cleanup(“methodName”) 来指定要调用的方法，也会生成默认的构造方法</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/Ba1bDkKb9J.png" alt="mark">]</p><h2 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a><strong>@ToString</strong></h2><p>这个注解用在 <strong>类</strong> 上，可以生成所有参数的 toString 方法，还会生成默认的构造方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/7LjglDeH8e.png" alt="mark">]</p><h2 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a><strong>@RequiredArgsConstructor</strong></h2><p>这个注解用在 <strong>类</strong> 上，使用类中所有带有 @NonNull 注解的或者带有 final 修饰的成员变量生成对应的构造方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/CBgAF4ei8m.png" alt="mark">]</p><h2 id="Value"><a href="#Value" class="headerlink" title="@Value"></a><strong>@Value</strong></h2><p>这个注解用在 <strong>类</strong> 上，会生成含所有参数的构造方法，get 方法，此外还提供了equals、hashCode、toString 方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/b6KeAg0ABi.png" alt="mark">]</p><h2 id="SneakyThrows"><a href="#SneakyThrows" class="headerlink" title="@SneakyThrows"></a><strong>@SneakyThrows</strong></h2><p>这个注解用在 <strong>方法</strong> 上，可以将方法中的代码用 try-catch 语句包裹起来，捕获异常并在 catch 中用 Lombok.sneakyThrow(e) 把异常抛出，可以使用 @SneakyThrows(Exception.class) 的形式指定抛出哪种异常，也会生成默认的构造方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/IfCKh1FGbh.png" alt="mark">]</p><h2 id="Synchronized"><a href="#Synchronized" class="headerlink" title="@Synchronized"></a><strong>@Synchronized</strong></h2><p>这个注解用在 <strong>类方法</strong> 或者 <strong>实例方法</strong> 上，效果和 synchronized 关键字相同，区别在于锁对象不同，对于类方法和实例方法，synchronized 关键字的锁对象分别是类的 class 对象和 this 对象，而 @Synchronized 的锁对象分别是 私有静态 final 对象 lock 和 私有 final 对象 lock，当然，也可以自己指定锁对象，此外也提供默认的构造方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/L95jIc7eJi.png" alt="mark">]</p><h1 id="7-json对象快速生成实体类"><a href="#7-json对象快速生成实体类" class="headerlink" title="7.json对象快速生成实体类"></a>7.json对象快速生成实体类</h1><h2 id="1-idea插件安装：GsonFormat"><a href="#1-idea插件安装：GsonFormat" class="headerlink" title="1.idea插件安装：GsonFormat"></a>1.idea插件安装：GsonFormat</h2><p>idea内打开File—–&gt;setting(或者idea快捷键Ctrl + Alt + S)——&gt; —–&gt;Plugins， 搜索GsonFormat，—–&gt;install，安装完之后重启idea</p><p>新建一个类，然后有右键——&gt;Generate——&gt;GsonFormat，或者快捷键Alt + insert`</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa18.png" alt="idea插件 json对象快速生成json实体类  json对象转json实体类  json对象生成json实体类"><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa19.png" alt="idea插件 json对象快速生成json实体类  json对象转json实体类  json对象生成json实体类"></p><p><code>将要转换的JSON格式数据粘贴进去，点击ok。 -</code><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa20.png" alt="idea插件 json对象快速生成json实体类  json对象转json实体类  json对象生成json实体类"></p><h2 id="2、-设置生成类型：setting（可忽略）"><a href="#2、-设置生成类型：setting（可忽略）" class="headerlink" title="2、 设置生成类型：setting（可忽略）"></a>2、 设置生成类型：setting（可忽略）</h2><p><code>生成之前可以设置类型，我的idea集成了lombok的插件，所以直接选择lombok类型，点击ok。此处可以忽略 -</code><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa21.png" alt="idea插件 json对象快速生成json实体类  json对象转json实体类  json对象生成json实体类"></p><h2 id="3、生成效果"><a href="#3、生成效果" class="headerlink" title="3、生成效果"></a>3、生成效果</h2><p><code>生成效果如下 -</code><br><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa22.png" alt="idea插件 json对象快速生成json实体类  json对象转json实体类  json对象生成json实体类"></p><p>给你一段<code>Json</code>格式数据，除了手写之外，如何快速生成一个和该<code>Json</code>数据对应的<code>Java</code>对象？</p><p>比如一段<code>Json</code>格式数据如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;status&quot;: 0,</span><br><span class="line">    &quot;msg&quot;: &quot;操作成功&quot;,</span><br><span class="line">    &quot;data&quot;: 1</span><br><span class="line">&#125;</span><br><span class="line">12345</span><br></pre></td></tr></table></figure><p><strong>GsonFormat</strong>则是一个<strong>JSON格式数据 → 对象</strong>的快速<strong>代码自动生成</strong>插件。</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/format.png" alt="image"></p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa23.png" alt="image"></p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa25.png" alt="image"></p><h1 id="8-CSDN-tools"><a href="#8-CSDN-tools" class="headerlink" title="8.CSDN tools"></a>8.CSDN tools</h1><p>顺便安利下我司的<a href="https://blog.csdn.net/weixin_44463441/article/details/109071551">Chrome插件</a>，不要太好使，根本停不下来.jpg</p><p>  插件主要功能：</p><ol><li>json格式化</li><li>时间格式化</li><li>ip查询</li><li>计算器</li><li>CSDN平台搜索</li><li>github仓库搜索</li><li>maven仓库依赖搜索</li><li>常用文档检索</li><li>单词翻译</li><li>看新闻</li><li>代码查询</li><li>二维码生成</li></ol><h2 id="2-安装方法"><a href="#2-安装方法" class="headerlink" title="2.安装方法"></a>2.安装方法</h2><p>1.插件本地安装</p><p>先下载tools的zip安装包<a href="https://img-operation.csdnimg.cn/plugin/csdn_idea_tools-1.3.0.zip">idea-tools下载地址</a></p><p>在File–&gt;Settings–&gt;Plugins中点击设置图标选择本地磁盘安装，选中下载好的<strong>zip包！zip包！zip包！</strong>点击安装即可</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa26.png" alt="img"></p><p>2.通过idea的应用商店Marketplace安装（插件已在应用商店发布，后期新版本会同步更新两种安装方式）</p><p>idea页面File–&gt;Settings–&gt;Plugins在Marketplace搜索csdn，选择下载安装。成功安装如图</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa27.png" alt="img"></p><h2 id="3-使用方法"><a href="#3-使用方法" class="headerlink" title="3.使用方法"></a>3.使用方法</h2><ol><li>ctrl+shift+I唤起插件（<strong>Esc退出插件）</strong></li><li>Tools toolbar或右键使用插件<strong>（Esc退出插件）</strong></li></ol><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa28.png" alt="img"><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/20201013144435219.png" alt="img"></p><p>唤醒页面：</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa29.png" alt="img"></p><p> 3.输入框输入help命令查看使用引导及插件功能使用示例</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa30.png" alt="img"></p><p>下面举几个栗子：</p><p>①时间插件功能</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/20201028135252596.gif" alt="img"></p><p>②mvn仓库插件</p><p>依赖包检索</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/20201028135833593.gif" alt="img"></p><p>③csdn搜索插件</p><p>直接输入关键字检索CSDN站内数据，想怎么搜就怎么搜~</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/20201028135457267.gif" alt="img"></p><p>④Json插件功能</p><p>对json格式的数据格式化、生成实体类</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/20201028135602726.gif" alt="img"></p><p>⑤代码查询</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/2020102813570187.gif" alt="img"></p><h1 id="9-括号进行着色的插件"><a href="#9-括号进行着色的插件" class="headerlink" title="9.括号进行着色的插件"></a>9.括号进行着色的插件</h1><h2 id="Rainbow-Brackets"><a href="#Rainbow-Brackets" class="headerlink" title="Rainbow Brackets"></a>Rainbow Brackets</h2><p>在代码非常复杂时，各种<strong>俄罗斯套娃式</strong>的括号简直让人心碎，<strong>Rainbow Brackets</strong>则是一款可以对<strong>成对括号</strong>进行着色的插件，顾名思义“彩虹色的括号”，从此复杂代码一眼即可看穿！</p><p>装完插件，括号都被染上了彩虹的颜色：</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa31.png" alt="image"></p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa32.png" alt="image"></p><h1 id="10-打印日志时不同颜色"><a href="#10-打印日志时不同颜色" class="headerlink" title="10.打印日志时不同颜色"></a>10.打印日志时不同颜色</h1><h2 id="Grep-Console"><a href="#Grep-Console" class="headerlink" title="Grep Console"></a>Grep Console</h2><p>默认情况下，IDEA控制台窗口在打印日志时都是一种颜色到底，比如各种<code>info</code>,<code>warn</code>,和<code>error</code>等类型的日志信息交织在一起，不好分辨。</p><p><strong>Grep Console</strong>插件则可以帮助我们自定义设置不用日志用不同的颜色进行标识，非常方便观看！</p><p><strong>设置自定义颜色：</strong></p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa33.png" alt="image"></p><p><strong>着色后的日志打印效果：</strong></p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa44.png" alt="image"></p><h1 id="11-url接口"><a href="#11-url接口" class="headerlink" title="11.url接口"></a>11.url接口</h1><h2 id="RestfulToolkit"><a href="#RestfulToolkit" class="headerlink" title="RestfulToolkit"></a>RestfulToolkit</h2><ul><li>你知道你项目里到底写了多少个URL接口吗？</li><li>如何快速定位某个<code>URL</code>接口对应的<code>Controller</code>代码？</li><li>如何快速测试你的<code>Controller</code>接口？</li></ul><p><strong>RestfulToolkit</strong>则是一个可以解决上述问题的，非常方便的IDEA集成插件，从此<code>Postman</code>怕是要下岗了：</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa45.png" alt="image"></p><h1 id="12-mybatis的mapper-Java接口方法和mapper-XML文件之间来回切换"><a href="#12-mybatis的mapper-Java接口方法和mapper-XML文件之间来回切换" class="headerlink" title="12.mybatis的mapper Java接口方法和mapper XML文件之间来回切换"></a>12.mybatis的mapper Java接口方法和mapper XML文件之间来回切换</h1><h2 id="Free-Mybatis-plugin"><a href="#Free-Mybatis-plugin" class="headerlink" title="Free Mybatis plugin"></a>Free Mybatis plugin</h2><p>除了全局搜索以外，如何方便地在<code>Mybatis</code>的<code>mapper Java</code>接口方法和<code>mapper XML</code>文件之间来回切换？</p><p><strong>Free Mybatis plugin</strong>插件此时就可以大显身手了：</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa46.png" alt="image"></p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa47.png" alt="image"></p><h1 id="13-google-java-format-——-代码自动格式化"><a href="#13-google-java-format-——-代码自动格式化" class="headerlink" title="13.google-java-format —— 代码自动格式化"></a>13.google-java-format —— 代码自动格式化</h1><p>这个插件的优点在于不需要手动快捷键去格式化代码</p><h1 id="14-GenerateAllSetter——自动调用所有-Setter-函数（可填充默认值）"><a href="#14-GenerateAllSetter——自动调用所有-Setter-函数（可填充默认值）" class="headerlink" title="14.GenerateAllSetter——自动调用所有 Setter 函数（可填充默认值）"></a>14.GenerateAllSetter——自动调用所有 Setter 函数（可填充默认值）</h1><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/20200806230436736.png" alt="在这里插入图片描述"><br><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/20200806230436529.png" alt="在这里插入图片描述"><br><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/20200806230436412.png" alt="在这里插入图片描述"></p><h1 id="15-Maven-Helper-——方便maven项目解决jar冲突"><a href="#15-Maven-Helper-——方便maven项目解决jar冲突" class="headerlink" title="15.Maven Helper ——方便maven项目解决jar冲突"></a>15.Maven Helper ——方便maven项目解决jar冲突</h1><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa55.png" alt="在这里插入图片描述"><br><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa56.png" alt="在这里插入图片描述"><br><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa57.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200806230810294.png" alt="在这里插入图片描述"><br><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa58.png" alt="在这里插入图片描述"></p><h1 id="16-FindBugs-——检查代码中的隐患"><a href="#16-FindBugs-——检查代码中的隐患" class="headerlink" title="16.FindBugs ——检查代码中的隐患"></a>16.FindBugs ——检查代码中的隐患</h1><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa59.png" alt="在这里插入图片描述"><br><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa60.png" alt="在这里插入图片描述"></p><h1 id="17-Stack-trace-to-UML-——-根据-JVM-异常堆栈画-UML时序图和通信图"><a href="#17-Stack-trace-to-UML-——-根据-JVM-异常堆栈画-UML时序图和通信图" class="headerlink" title="17.Stack trace to UML —— 根据 JVM 异常堆栈画 UML时序图和通信图"></a>17.Stack trace to UML —— 根据 JVM 异常堆栈画 UML时序图和通信图</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">打开方式：Analyze &gt; Open Stack trace to UML plugin + Generate UML diagrams from stacktrace from debug</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa61.png" alt="在这里插入图片描述"><br><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa62.png" alt="在这里插入图片描述"></p><h1 id="18-Java-Stream-Debugger-——-Stream-将操作步骤可视化"><a href="#18-Java-Stream-Debugger-——-Stream-将操作步骤可视化" class="headerlink" title="18.Java Stream Debugger —— Stream 将操作步骤可视化"></a>18.Java Stream Debugger —— Stream 将操作步骤可视化</h1><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa63.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200806231325623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjI4NTQxNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/aa64.png" alt="在这里插入图片描述"></p><h1 id="2-code码"><a href="#2-code码" class="headerlink" title="2.code码"></a>2.code码</h1><p>1.</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D87IQPUU3Q-eyJsaWNlbnNlSWQiOiJEODdJUVBVVTNRIiwibGljZW5zZWVOYW1lIjoiTnNzIEltIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOS0wMi0wNyJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDE5LTAyLTA3In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxOS0wMi0wNyJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE5LTAyLTA3In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOS0wMi0wNyJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDE5LTAyLTA3In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDE5LTAyLTA3In0seyJjb2RlIjoiR08iLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifSx7ImNvZGUiOiJQUyIsInBhaWRVcFRvIjoiMjAxOS0wMi0wNyJ9LHsiY29kZSI6IkNMIiwicGFpZFVwVG8iOiIyMDE5LTAyLTA3In0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifSx7ImNvZGUiOiJSU1UiLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifV0sImhhc2giOiI4MDI4NjgyLzAiLCJncmFjZVBlcmlvZERheXMiOjAsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-iPLvfrIl0qTga/F9rnjf0Sz6yYvw+2FWgZpcLOFbvb3CllsE2ui4+bw8emxzcYr3GyxN4/4BhfcX6gmmI4EJaTSihP+m4Oa8jZApb5zGEHENJE+I8hewQWIyiekNE7+21meJ3swPCYiTWKkUXMIVUWNfieZhqHd96dHpD335dSRCmAImgQ31qpmzemMxztu1/FAIiaUrav1VU/M0waj9B9xuhDG77PU7deSxX363RQjbmRdWBorjH6gSyUpCXnyh6Crlhtj+lC+VndAdnT4HUXXsmpCw6uLotL5Gv/TM7/fAqIjSQghlnm4vpss4Pc7xI9n07KwQE9ok4fuF3HMRUA==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==</span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IQJBET5GKT-eyJsaWNlbnNlSWQiOiJJUUpCRVQ1R0tUIiwibGljZW5zZWVOYW1lIjoi5rC45LmF5r+A5rS7IGlkZWHCt21lZGVtaW5nwrdjb20iLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMjUiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDIxLTAxLTI1IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMjUiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJTViIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJSU1UiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMjUiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDIxLTAxLTI1IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUkQiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMjUiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkRNIiwicGFpZFVwVG8iOiIyMDIxLTAxLTI1IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDIxLTAxLTI1IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSU0MiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMjUiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiR08iLCJwYWlkVXBUbyI6IjIwMjEtMDEtMjUiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJTRiIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUyIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDIxLTAxLTI1IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUERCIiwicGFpZFVwVG8iOiIyMDIxLTAxLTI1IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBXUyIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQR08iLCJwYWlkVXBUbyI6IjIwMjEtMDEtMjUiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBTIiwicGFpZFVwVG8iOiIyMDIxLTAxLTI1IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQQyIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUkIiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMjUiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNXIiwicGFpZFVwVG8iOiIyMDIxLTAxLTI1IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJEUCIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJSUyIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIwMTIyNlBQQU0wMDAwMDUiLCJoYXNoIjoiMjE3MjA0NTgvMDotMTQ1OTQ5MjM1OCIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-XD/D7zpGWSRPf7o1P83M1nllpsNPJHWadhJCJGw/0z4zcyRxYUb+eOMgkNQFx5iAqXrfXb/Qz03SVKX9cvYdJg2Ag3YpG1LvKf29p5w2jNyU4li9fT4HLNQC5IHizLH+mm8AtWRIOVaul6O3P20JF59YUI6zRuX4jHA9uGqxDDI1+buG+JOaK3T9UukjkdhmN2uVnvybYNQ/eRqYkILbjZo6DxnQqDU9dtBMA1vluf7lbDZ2Capr0wYc/U5cAYwfePatEcHHm9FRRY2r9tYnNEL6Yg0CO3Dynz2Ean/kghIoexARxamATvSGJ2pO+LdOgk3wok7zEHuP+LINM5arSQ==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDCP4uk4SlVdA5nuA3DQC+NsEnZS9npFnO0zrmMWcz1++q2UWJNuGTh0rwi+3fUJIArfvVh7gNtIp93rxjtrQAuf4/Fa6sySp4c32MeFACfC0q+oUoWebhOIaYTYUxm4LAZ355vzt8YeDPmvWKxA81udqEk4gU9NNAOz1Um5/8LyR8SGsSc4EDBRSjcMWMwMkYSauGqGcEUK8WhfplsyF61lKSOFA6VmfUmeDK15rUWWLbOMKgn2cxFA98A+s74T9Oo96CU7rp/umDXvhnyhAXSukw/qCGOVhwKR8B6aeDtoBWQgjnvMtPgOUPRTPkPGbwPwwDkvAHYiuKJ7Bd2wH7rAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBAB2J1ysRudbkqmkUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/wi9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></table></figure><h1 id="-1"><a href="#-1" class="headerlink" title></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-自动导包&quot;&gt;&lt;a href=&quot;#1-自动导包&quot; class=&quot;headerlink&quot; title=&quot;1.自动导包&quot;&gt;&lt;/a&gt;1.自动导包&lt;/h1&gt;&lt;p&gt;下面是Auto Import设置步骤详解。&lt;/p&gt;
&lt;p&gt;Settings→Editor→General→A</summary>
      
    
    
    
    
    <category term="idea插件" scheme="http://example.com/tags/idea%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 无法访问问题解决</title>
    <link href="http://example.com/2021/01/21/github/github%E8%AE%BF%E9%97%AE/"/>
    <id>http://example.com/2021/01/21/github/github%E8%AE%BF%E9%97%AE/</id>
    <published>2021-01-21T07:43:13.000Z</published>
    <updated>2021-04-05T16:14:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitHub-无法访问问题解决"><a href="#GitHub-无法访问问题解决" class="headerlink" title="GitHub 无法访问问题解决"></a>GitHub 无法访问问题解决</h1><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h3><ul><li>登录网站<a href="https://ipchaxun.com/">https://ipchaxun.com/</a> ，例如输入github.com</li></ul><p><img src="/2021/01/21/github/github%E8%AE%BF%E9%97%AE/1.png" alt="在这里插入图片描述"></p><p>可以看到这个网址解析到的ip 地址。</p><ul><li>替换 C:\Windows\System32\drivers\etc\hosts 文件内容，如下</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"># Copyright (c) 1993-2009 Microsoft Corp.</span><br><span class="line">#</span><br><span class="line"># This is a sample HOSTS file used by Microsoft TCP/IP for Windows.</span><br><span class="line">#</span><br><span class="line"># This file contains the mappings of IP addresses to host names. Each</span><br><span class="line"># entry should be kept on an individual line. The IP address should</span><br><span class="line"># be placed in the first column followed by the corresponding host name.</span><br><span class="line"># The IP address and the host name should be separated by at least one</span><br><span class="line"># space.</span><br><span class="line">#</span><br><span class="line"># Additionally, comments (such as these) may be inserted on individual</span><br><span class="line"># lines or following the machine name denoted by a &#x27;#&#x27; symbol.</span><br><span class="line">#</span><br><span class="line"># For example:</span><br><span class="line">#</span><br><span class="line">#      102.54.94.97     rhino.acme.com          # source server</span><br><span class="line">#       38.25.63.10     x.acme.com              # x client host</span><br><span class="line"></span><br><span class="line"># localhost name resolution is handled within DNS itself.</span><br><span class="line">#127.0.0.1       localhost</span><br><span class="line">#::1             localhost</span><br><span class="line"><span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> https:<span class="comment">//account.jetbrains.com:443</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>       activate.navicat.com</span><br><span class="line"># GitHub Start </span><br><span class="line"># GitHub Start </span><br><span class="line"><span class="number">52.74</span><span class="number">.223</span><span class="number">.119</span> github.com</span><br><span class="line"><span class="number">52.74</span><span class="number">.223</span><span class="number">.119</span> gist.github.com</span><br><span class="line"><span class="number">52.74</span><span class="number">.223</span><span class="number">.119</span> assets-cdn.github.com</span><br><span class="line"><span class="number">52.74</span><span class="number">.223</span><span class="number">.119</span> raw.githubusercontent.com</span><br><span class="line"><span class="number">52.74</span><span class="number">.223</span><span class="number">.119</span> gist.githubusercontent.com</span><br><span class="line"><span class="number">52.74</span><span class="number">.223</span><span class="number">.119</span> cloud.githubusercontent.com</span><br><span class="line"><span class="number">52.74</span><span class="number">.223</span><span class="number">.119</span> camo.githubusercontent.com</span><br><span class="line"><span class="number">52.74</span><span class="number">.223</span><span class="number">.119</span> avatars0.githubusercontent.com</span><br><span class="line"><span class="number">52.74</span><span class="number">.223</span><span class="number">.119</span> avatars1.githubusercontent.com</span><br><span class="line"><span class="number">52.74</span><span class="number">.223</span><span class="number">.119</span> avatars2.githubusercontent.com</span><br><span class="line"><span class="number">52.74</span><span class="number">.223</span><span class="number">.119</span> avatars3.githubusercontent.com</span><br><span class="line"><span class="number">52.74</span><span class="number">.223</span><span class="number">.119</span> avatars4.githubusercontent.com</span><br><span class="line"><span class="number">52.74</span><span class="number">.223</span><span class="number">.119</span> avatars5.githubusercontent.com</span><br><span class="line"><span class="number">52.74</span><span class="number">.223</span><span class="number">.119</span> avatars6.githubusercontent.com</span><br><span class="line"><span class="number">52.74</span><span class="number">.223</span><span class="number">.119</span> avatars7.githubusercontent.com</span><br><span class="line"><span class="number">52.74</span><span class="number">.223</span><span class="number">.119</span> avatars8.githubusercontent.com </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span> github.com</span><br><span class="line"><span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span> gist.github.com</span><br><span class="line"><span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span> assets-cdn.github.com</span><br><span class="line"><span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span> raw.githubusercontent.com</span><br><span class="line"><span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span> gist.githubusercontent.com</span><br><span class="line"><span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span> cloud.githubusercontent.com</span><br><span class="line"><span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span> camo.githubusercontent.com</span><br><span class="line"><span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span> avatars0.githubusercontent.com</span><br><span class="line"><span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span> avatars1.githubusercontent.com</span><br><span class="line"><span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span> avatars2.githubusercontent.com</span><br><span class="line"><span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span> avatars3.githubusercontent.com</span><br><span class="line"><span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span> avatars4.githubusercontent.com</span><br><span class="line"><span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span> avatars5.githubusercontent.com</span><br><span class="line"><span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span> avatars6.githubusercontent.com</span><br><span class="line"><span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span> avatars7.githubusercontent.com</span><br><span class="line"><span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span> avatars8.githubusercontent.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">13.250</span><span class="number">.177</span><span class="number">.223</span>     github.com</span><br><span class="line"><span class="number">13.250</span><span class="number">.177</span><span class="number">.223</span>     gist.github.com</span><br><span class="line"><span class="number">13.250</span><span class="number">.177</span><span class="number">.223</span>     assets-cdn.github.com</span><br><span class="line"><span class="number">13.250</span><span class="number">.177</span><span class="number">.223</span>     raw.githubusercontent.com</span><br><span class="line"><span class="number">13.250</span><span class="number">.177</span><span class="number">.223</span> gist.githubusercontent.com</span><br><span class="line"><span class="number">13.250</span><span class="number">.177</span><span class="number">.223</span> cloud.githubusercontent.com</span><br><span class="line"><span class="number">13.250</span><span class="number">.177</span><span class="number">.223</span> camo.githubusercontent.com</span><br><span class="line"><span class="number">13.250</span><span class="number">.177</span><span class="number">.223</span> avatars0.githubusercontent.com</span><br><span class="line"><span class="number">13.250</span><span class="number">.177</span><span class="number">.223</span> avatars1.githubusercontent.com</span><br><span class="line"><span class="number">13.250</span><span class="number">.177</span><span class="number">.223</span> avatars2.githubusercontent.com</span><br><span class="line"><span class="number">13.250</span><span class="number">.177</span><span class="number">.223</span> avatars3.githubusercontent.com</span><br><span class="line"><span class="number">13.250</span><span class="number">.177</span><span class="number">.223</span> avatars4.githubusercontent.com</span><br><span class="line"><span class="number">13.250</span><span class="number">.177</span><span class="number">.223</span> avatars5.githubusercontent.com</span><br><span class="line"><span class="number">13.250</span><span class="number">.177</span><span class="number">.223</span> avatars6.githubusercontent.com</span><br><span class="line"><span class="number">13.250</span><span class="number">.177</span><span class="number">.223</span> avatars7.githubusercontent.com</span><br><span class="line"><span class="number">13.250</span><span class="number">.177</span><span class="number">.223</span> avatars8.githubusercontent.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># GitHub End </span><br><span class="line">#52.74.223.119    github.com</span><br><span class="line">#13.229.188.59    github.com</span><br><span class="line">#13.250.177.223   github.com</span><br><span class="line"># GitHub End</span><br></pre></td></tr></table></figure><ul><li>接下来，重启浏览器，重新登录github 即可</li></ul><h3 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h3><p>对浏览器而言，可以关闭重启浏览器。</p><p>对DNS更新的话，可以打开cmd，输入 ipconfig/flushdns,如下</p><p><img src="/2021/01/21/github/github%E8%AE%BF%E9%97%AE/5.png" alt="img"></p><p>现在可以试试ping功能能否到达了，能ping通说明问题已被解决~</p><p><img src="/2021/01/21/github/github%E8%AE%BF%E9%97%AE/2.png" alt="img"></p><p><img src="/2021/01/21/github/github%E8%AE%BF%E9%97%AE/3.png" alt="在这里插入图片描述"></p><p><a href="https://www.jianshu.com/p/5009297c9894">可参考 解决方案文章</a></p><p>实际测试中，还是不明白为啥有的电脑 一直不会有问题，有的电脑经常性需要这样操作解决。 文章解决方案暂时能够解决，仅供参考.</p><h3 id="其它问题"><a href="#其它问题" class="headerlink" title="其它问题"></a>其它问题</h3><p>实际中可能存在问题：</p><ul><li>在实际操作中，有的用户还是不行，或者Ctrl+Shift+N 无痕浏览模式 可以访问，正常操作就是无法访问</li><li>ip重置、cdn 重置、清除浏览记录还是不行</li></ul><p>建议：直接卸载浏览器、重新安装一个版本也许能够解决。 不必要为这个问题花费太多时间。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GitHub-无法访问问题解决&quot;&gt;&lt;a href=&quot;#GitHub-无法访问问题解决&quot; class=&quot;headerlink&quot; title=&quot;GitHub 无法访问问题解决&quot;&gt;&lt;/a&gt;GitHub 无法访问问题解决&lt;/h1&gt;&lt;h3 id=&quot;解决方案&quot;&gt;&lt;a href</summary>
      
    
    
    
    
    <category term="GitHub" scheme="http://example.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>JsonFormat-Date时间格式转换</title>
    <link href="http://example.com/2021/01/16/%E5%AE%9E%E4%BD%93%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F/"/>
    <id>http://example.com/2021/01/16/%E5%AE%9E%E4%BD%93%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F/</id>
    <published>2021-01-16T05:28:41.000Z</published>
    <updated>2021-04-07T18:57:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>@JsonFormat后台到前台的时间格式的转换<br>@DataFormAT前后到后台的时间格式的转换</strong></p><p><strong>1.@JsonFormat(pattern=”yyyy-MM-dd HH:mm:ss”,timezone = “GMT+8”)</strong><br>pattern:需要转换的时间日期的格式<br>timezone：是时间设置为东八区</p><p><strong>2.@DateTimeFormat(pattern = “yyyy-MM-dd HH:mm:ss”)</strong><br>pattern:需要转换的时间日期的格式</p><p>3.例子<br>/<em>俩个注解可以同时使用</em>/<br>@ApiModelProperty(“创建时间”) </p><p>@JsonFormat(pattern=”yyyy-MM-dd HH:mm:ss”,timezone = “GMT+8”) </p><p>@DateTimeFormat(pattern = “yyyy-MM-dd HH:mm:ss”) private Date createdDate ;</p><p><strong>举例：以下ClinicalTrialSettleParamVO 作为swagger入参，日期类型的列，可同时接收时间戳和时间类型的数据</strong></p><p><strong>若不加任何注解，默认接收时间戳,返回json也是long类型的时间戳</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClinicalTrialSettleParamVO</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;项目id&quot;, required = true, example = &quot;LCSY2019091000000001&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String projectId;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot; ,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;起始时间&quot;, required = true, example = &quot;2019-11-01 00:00:00&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date startTimestamp;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot; ,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;结束时间&quot;, required = true, example = &quot;2019-11-01 23:59:59&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date endTimestamp;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClinicalTrialSettleParamVO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProjectId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> projectId;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProjectId</span><span class="params">(String projectId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.projectId = projectId;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getStartTimestamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> startTimestamp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStartTimestamp</span><span class="params">(Date startTimestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.startTimestamp = startTimestamp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getEndTimestamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> endTimestamp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEndTimestamp</span><span class="params">(Date endTimestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.endTimestamp = endTimestamp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;@JsonFormat后台到前台的时间格式的转换&lt;br&gt;@DataFormAT前后到后台的时间格式的转换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.@JsonFormat(pattern=”yyyy-MM-dd HH:mm:ss”,timezone</summary>
      
    
    
    
    
    <category term="JsonFormat" scheme="http://example.com/tags/JsonFormat/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装</title>
    <link href="http://example.com/2021/01/05/%E5%AE%89%E8%A3%85docker/"/>
    <id>http://example.com/2021/01/05/%E5%AE%89%E8%A3%85docker/</id>
    <published>2021-01-05T03:48:33.000Z</published>
    <updated>2021-04-05T16:11:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、yum 包更新到最新</span> </span><br><span class="line">yum update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span> </span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、 设置yum源</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、 安装docker，出现输入的界面都按 y</span> </span><br><span class="line">yum install -y docker-ce</span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、 查看docker版本，验证是否验证成功</span></span><br><span class="line">docker -v</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>systemctl enable docker # 开机自动启动docker</p><p>systemctl start docker # 启动docker<br>systemctl restart docker # 重启dokcer</p><h3 id="配置docker-镜像"><a href="#配置docker-镜像" class="headerlink" title="配置docker 镜像"></a>配置docker 镜像</h3><p>国内拉取镜像的话可能会比较忙，这里提高加速的方法<br>Ubuntu 16.04+、Debian 8+、CentOS 7<br>对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建或修改 /etc/docker/daemon.json 文件，修改为如下形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure><p>国内加速地址有：</p><p>Docker中国区官方镜像<br><a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></p><p>网易<br><a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></p><p>ustc<br><a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></p><p>中国科技大学<br><a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></p><p>阿里云容器 服务<br><a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Docker安装&quot;&gt;&lt;a href=&quot;#Docker安装&quot; class=&quot;headerlink&quot; title=&quot;Docker安装&quot;&gt;&lt;/a&gt;Docker安装&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker应用部署</title>
    <link href="http://example.com/2020/12/09/docker%E5%88%86%E7%B1%BB/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2020/12/09/docker%E5%88%86%E7%B1%BB/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/</id>
    <published>2020-12-09T05:48:33.000Z</published>
    <updated>2021-01-23T12:25:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker应用部署"><a href="#Docker应用部署" class="headerlink" title="Docker应用部署"></a>Docker应用部署</h2><h3 id="一、部署MySQL"><a href="#一、部署MySQL" class="headerlink" title="一、部署MySQL"></a>一、部署MySQL</h3><ol><li>搜索mysql镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取mysql镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.6</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建mysql目录用于存储mysql数据信息</span></span><br><span class="line">mkdir ~/mysql</span><br><span class="line">cd ~/mysql</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -id \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">--name=c_mysql \</span><br><span class="line">-v $PWD/conf:/etc/mysql/conf.d \</span><br><span class="line">-v $PWD/logs:/logs \</span><br><span class="line">-v $PWD/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">mysql:5.6</span><br></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><strong>-p 3307:3306</strong>：将容器的 3306 端口<strong>映射</strong>到宿主机的 3307 端口。</li><li><strong>-v $PWD/conf:/etc/mysql/conf.d</strong>：将主机当前目录下的 conf/my.cnf <strong>挂载</strong>到容器的 /etc/mysql/my.cnf。配置目录</li><li><strong>-v $PWD/logs:/logs</strong>：将主机当前目录下的 logs 目录<strong>挂载</strong>到容器的 /logs。日志目录</li><li><strong>-v $PWD/data:/var/lib/mysql</strong> ：将主机当前目录下的data目录<strong>挂载</strong>到容器的 /var/lib/mysql 。数据目录</li><li><strong>-e MYSQL_ROOT_PASSWORD=123456：</strong>初始化 root 用户的密码。</li></ul></li></ul><ol start="4"><li>进入容器，操作mysql</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec –it c_mysql /bin/bash</span><br></pre></td></tr></table></figure><ol start="5"><li>使用外部机器连接容器中的mysql</li></ol><p><img src="/2020/12/09/docker%E5%88%86%E7%B1%BB/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/1573636765632.png" alt="1573636765632"></p><h3 id="二、部署Tomcat"><a href="#二、部署Tomcat" class="headerlink" title="二、部署Tomcat"></a>二、部署Tomcat</h3><ol><li>搜索tomcat镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search tomcat</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取tomcat镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建tomcat目录用于存储tomcat数据信息</span></span><br><span class="line">mkdir ~/tomcat</span><br><span class="line">cd ~/tomcat</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_tomcat \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-v $PWD:/usr/local/tomcat/webapps \</span><br><span class="line">tomcat </span><br></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><p><strong>-p 8080:8080：</strong>将容器的8080端口<strong>映射</strong>到主机的8080端口</p><p><strong>-v $PWD:/usr/local/tomcat/webapps：</strong>将主机中当前目录<strong>挂载</strong>到容器的webapps</p></li></ul></li></ul><ol start="4"><li>使用外部机器访问tomcat</li></ol><p><img src="/2020/12/09/docker%E5%88%86%E7%B1%BB/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/imgs%5C1573649804623.png" alt="1573649804623"></p><h3 id="三、部署Nginx"><a href="#三、部署Nginx" class="headerlink" title="三、部署Nginx"></a>三、部署Nginx</h3><ol><li>搜索nginx镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取nginx镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建nginx目录用于存储nginx数据信息</span></span><br><span class="line">mkdir ~/nginx</span><br><span class="line">cd ~/nginx</span><br><span class="line">mkdir conf</span><br><span class="line">cd conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容</span></span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_nginx \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v $PWD/logs:/var/log/nginx \</span><br><span class="line">-v $PWD/html:/usr/share/nginx/html \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><strong>-p 80:80</strong>：将容器的 80端口映射到宿主机的 80 端口。</li><li><strong>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf</strong>：将主机当前目录下的 /conf/nginx.conf 挂载到容器的 :/etc/nginx/nginx.conf。配置目录</li><li><strong>-v $PWD/logs:/var/log/nginx</strong>：将主机当前目录下的 logs 目录挂载到容器的/var/log/nginx。日志目录</li></ul></li></ul><ol start="4"><li>使用外部机器访问nginx</li></ol><p><img src="/2020/12/09/docker%E5%88%86%E7%B1%BB/Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/1573652396669.png" alt="1573652396669"></p><h3 id="四、部署Redis"><a href="#四、部署Redis" class="headerlink" title="四、部署Redis"></a>四、部署Redis</h3><ol><li>搜索redis镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search redis</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取redis镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:5.0</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_redis -p 6379:6379 redis:5.0</span><br></pre></td></tr></table></figure><ol start="4"><li>使用外部机器连接redis</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli.exe -h 192.168.149.135 -p 6379</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker应用部署&quot;&gt;&lt;a href=&quot;#Docker应用部署&quot; class=&quot;headerlink&quot; title=&quot;Docker应用部署&quot;&gt;&lt;/a&gt;Docker应用部署&lt;/h2&gt;&lt;h3 id=&quot;一、部署MySQL&quot;&gt;&lt;a href=&quot;#一、部署MySQL&quot; c</summary>
      
    
    
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机配置静态ip地址</title>
    <link href="http://example.com/2020/12/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/"/>
    <id>http://example.com/2020/12/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/</id>
    <published>2020-12-08T16:00:00.000Z</published>
    <updated>2021-04-11T07:19:29.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚拟机配置静态ip地址"><a href="#虚拟机配置静态ip地址" class="headerlink" title="虚拟机配置静态ip地址"></a>虚拟机配置静态ip地址</h1><h3 id="1、以管理员的身份打开虚拟机，点击导航栏上面的-编辑–-gt-虚拟网络编辑器"><a href="#1、以管理员的身份打开虚拟机，点击导航栏上面的-编辑–-gt-虚拟网络编辑器" class="headerlink" title="1、以管理员的身份打开虚拟机，点击导航栏上面的  编辑–&gt;虚拟网络编辑器"></a>1、以管理员的身份打开虚拟机，点击导航栏上面的  编辑–&gt;虚拟网络编辑器</h3><p>​       <img src="/2020/12/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/70.png" alt="img"></p><h3 id="2、首先选中上面的VMnet8，在到下面的子网-ip-处编辑ip地址，可以改成192-168-8-0，最后点击右边的-NAT设置"><a href="#2、首先选中上面的VMnet8，在到下面的子网-ip-处编辑ip地址，可以改成192-168-8-0，最后点击右边的-NAT设置" class="headerlink" title="2、首先选中上面的VMnet8，在到下面的子网 ip 处编辑ip地址，可以改成192.168.8.0，最后点击右边的 NAT设置"></a>2、首先选中上面的VMnet8，在到下面的子网 ip 处编辑ip地址，可以改成192.168.8.0，最后点击右边的 NAT设置</h3><p>   <img src="/2020/12/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/71.png" alt="img"></p><h3 id="3、在NAT中设置网关-i-p，可以改成-192-168-8-2，最后点击确定就可以了，虚拟机的ip地址编辑就此结束，接下来就是到电脑的网卡中编辑ip地址了"><a href="#3、在NAT中设置网关-i-p，可以改成-192-168-8-2，最后点击确定就可以了，虚拟机的ip地址编辑就此结束，接下来就是到电脑的网卡中编辑ip地址了" class="headerlink" title="3、在NAT中设置网关  i p，可以改成 192.168.8.2，最后点击确定就可以了，虚拟机的ip地址编辑就此结束，接下来就是到电脑的网卡中编辑ip地址了"></a>3、在NAT中设置网关  i p，可以改成 192.168.8.2，最后点击确定就可以了，虚拟机的ip地址编辑就此结束，接下来就是到电脑的网卡中编辑ip地址了</h3><p>​      <img src="/2020/12/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/72.png" alt="img"></p><h3 id="4、可以直接在电脑的任务栏中选中网络那里右键打开-网络和共享中心，在左边点击-更改适配器设置，然后右键选属性打开-VMare-Network-Adapter-VMnet8-在打开的页面上选-Internet协议版本4，点击属性，在打开的页面选择-使用下面的ip地址-，ip地址可以填192-168-8-1-默认网关必须与前面的第三步配好的网关ip一致也就是-192-168-8-2，就此虚拟机的固定ip地址就配完了"><a href="#4、可以直接在电脑的任务栏中选中网络那里右键打开-网络和共享中心，在左边点击-更改适配器设置，然后右键选属性打开-VMare-Network-Adapter-VMnet8-在打开的页面上选-Internet协议版本4，点击属性，在打开的页面选择-使用下面的ip地址-，ip地址可以填192-168-8-1-默认网关必须与前面的第三步配好的网关ip一致也就是-192-168-8-2，就此虚拟机的固定ip地址就配完了" class="headerlink" title="4、可以直接在电脑的任务栏中选中网络那里右键打开 网络和共享中心，在左边点击 更改适配器设置，然后右键选属性打开 VMare Network Adapter VMnet8, 在打开的页面上选  Internet协议版本4，点击属性，在打开的页面选择 使用下面的ip地址 ，ip地址可以填192.168.8.1  默认网关必须与前面的第三步配好的网关ip一致也就是  192.168.8.2，就此虚拟机的固定ip地址就配完了"></a>4、可以直接在电脑的任务栏中选中网络那里右键打开 网络和共享中心，在左边点击 更改适配器设置，然后右键选属性打开 VMare Network Adapter VMnet8, 在打开的页面上选  Internet协议版本4，点击属性，在打开的页面选择 使用下面的ip地址 ，ip地址可以填192.168.8.1  默认网关必须与前面的第三步配好的网关ip一致也就是  192.168.8.2，就此虚拟机的固定ip地址就配完了</h3><h3 id><a href="#" class="headerlink" title></a></h3><p>​        <img src="/2020/12/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/3.png" alt="img"></p><p>​        <img src="/2020/12/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/4.png" alt="img"></p><p>  <img src="/2020/12/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/5.png" alt="img"></p><p>​        <img src="/2020/12/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/6.png" alt="img"></p><h3 id="5、到linux操作系统中输入命令"><a href="#5、到linux操作系统中输入命令" class="headerlink" title="5、到linux操作系统中输入命令"></a>5、到linux操作系统中输入命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim  /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><p>有些修改</p><p>ifcfg-eth0 vim /etc/sysconfig/network-scripts/ifcfg-eth0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=<span class="keyword">static</span></span><br><span class="line">IPADDR=<span class="number">192.168</span><span class="number">.8</span><span class="number">.129</span></span><br><span class="line">NETMASK=<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span><span class="number">.8</span><span class="number">.2</span></span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=8c5cddae-2eca-<span class="number">4e3d</span>-<span class="number">9985</span>-647fa53e7476</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=<span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>把下面的两条修改成如下 ip 地址</p><p>​      IPADDR：192.168.8.101</p><p>​      GATEWAY：192.168.8.254</p><h3 id="6-重新启动network"><a href="#6-重新启动network" class="headerlink" title="6 .重新启动network"></a>6 .重新启动network</h3><p>systemctl restart network</p><p>改好后保存退出，出去后输入命令  ifconfig查看ip地址</p><p><img src="/2020/12/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/7.png" alt="img"></p><p> 可以输入ping <a href="http://www.baidu.com看看是否能ping通百度,下面个的图片已经可以ping通百度了,这时候按ctrl+z键可以停止/">www.baidu.com看看是否能ping通百度，下面个的图片已经可以ping通百度了，这时候按ctrl+Z键可以停止</a></p><p><img src="/2020/12/09/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80/8.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;虚拟机配置静态ip地址&quot;&gt;&lt;a href=&quot;#虚拟机配置静态ip地址&quot; class=&quot;headerlink&quot; title=&quot;虚拟机配置静态ip地址&quot;&gt;&lt;/a&gt;虚拟机配置静态ip地址&lt;/h1&gt;&lt;h3 id=&quot;1、以管理员的身份打开虚拟机，点击导航栏上面的-编辑–-g</summary>
      
    
    
    
    
    <category term="虚拟机" scheme="http://example.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>docker命令</title>
    <link href="http://example.com/2020/12/09/docker/docker/"/>
    <id>http://example.com/2020/12/09/docker/docker/</id>
    <published>2020-12-08T16:00:00.000Z</published>
    <updated>2021-04-11T07:17:54.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-docker介绍"><a href="#1-docker介绍" class="headerlink" title="1. docker介绍"></a>1. docker介绍</h2><h3 id="1-1-docker概念"><a href="#1-1-docker概念" class="headerlink" title="1.1 docker概念"></a>1.1 docker概念</h3><p>我们写的代码会接触到好几个环境：开发环境、测试环境以及生产环境：</p><p><img src="/2020/12/09/docker/docker/1592741447865.png" alt="1592741447865"></p><ul><li><p>Docker 是一个开源的应用容器引擎</p></li><li><p>诞生于 2013 年初，基于 Go 语言实现， dotCloud 公司出品（后改名为Docker Inc）</p></li><li><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上</p></li><li><p>容器是完全使用沙箱机制，相互隔离</p></li><li><p>容器性能开销极低</p></li><li><p>Docker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版）</p></li></ul><h3 id="1-2-安装docker"><a href="#1-2-安装docker" class="headerlink" title="1.2 安装docker"></a>1.2 安装docker</h3><p>Docker可以运行在MAC、Windows、CentOS、UBUNTU等操作系统上，本课程基于CentOS 7 安装</p><p>Docker。官网：<a href="https://www.docker.com/">https://www.docker.com</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、yum 包更新到最新</span></span><br><span class="line">yum update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、 设置yum源</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、 安装docker，出现输入的界面都按 y</span></span><br><span class="line">yum install -y docker-ce</span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、 查看docker版本，验证是否验证成功</span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><h3 id="1-3-docker架构"><a href="#1-3-docker架构" class="headerlink" title="1.3 docker架构"></a>1.3 docker架构</h3><p><img src="/2020/12/09/docker/docker/1592741985974.png" alt="1592741985974"></p><ul><li><strong>镜像（Image）：</strong>Docker 镜像（Image），就相当于是 一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包 含了完整的一套 Ubuntu16.04 最小系统的 root 文件系 统。</li><li><strong>容器（Container）</strong>：镜像（Image）和容器（Contain er）的关系，就像是面向对象程序设计中的类和对象一 样，镜像是静态的定义，容器是镜像运行时的实体。容 器可以被创建、启动、停止、删除、暂停等。</li><li><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心， 用来保存镜像。</li></ul><h3 id="1-4-配置-Docker-镜像加速器"><a href="#1-4-配置-Docker-镜像加速器" class="headerlink" title="1.4 配置 Docker 镜像加速器"></a>1.4 配置 Docker 镜像加速器</h3><p>国内拉取镜像的话可能会比较忙，这里提高加速的方法<br>Ubuntu 16.04+、Debian 8+、CentOS 7<br>对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，将来从docker hub（<a href="https://hub.docker.com/%EF%BC%89%E4%B8%8A%E4%B8%8B%E8%BD%BD">https://hub.docker.com/）上下载</a></p><p>docker镜像，太慢。一般都会配置镜像加速器：</p><p>• USTC：中科大镜像加速器（<a href="https://docker.mirrors.ustc.edu.cn)/">https://docker.mirrors.ustc.edu.cn）</a></p><p>• 阿里云</p><p>• 网易云</p><p>• 腾讯云</p><p>本次我们使用阿里云镜像</p><p>1.登录阿里云网站（<a href="https://www.aliyun.com/%EF%BC%89">https://www.aliyun.com/）</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://z571z49g.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p><img src="/2020/12/09/docker/docker/1592742973168.png" alt="1592742973168"></p><ol start="2"><li> 查看文件/etc/docker/daemon.json</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 执行如下命令：</span></span><br><span class="line">cat /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p><img src="/2020/12/09/docker/docker/1592743065182.png" alt="1592743065182"></p><h2 id="2-docker命令"><a href="#2-docker命令" class="headerlink" title="2 .docker命令"></a>2 .docker命令</h2><h3 id="2-1-进程相关命令"><a href="#2-1-进程相关命令" class="headerlink" title="2.1 进程相关命令"></a>2.1 进程相关命令</h3><p>关于进程相关的命令</p><h4 id="2-1-1-启动docker服务"><a href="#2-1-1-启动docker服务" class="headerlink" title="2.1.1 启动docker服务"></a>2.1.1 启动docker服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="2-1-2-停止docker服务"><a href="#2-1-2-停止docker服务" class="headerlink" title="2.1.2 停止docker服务"></a>2.1.2 停止docker服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><h4 id="2-1-3-重启docker服务"><a href="#2-1-3-重启docker服务" class="headerlink" title="2.1.3 重启docker服务"></a>2.1.3 重启docker服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="2-1-4-查看docker服务状态"><a href="#2-1-4-查看docker服务状态" class="headerlink" title="2.1.4 查看docker服务状态"></a>2.1.4 查看docker服务状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><h4 id="2-1-5-开机启动docker服务"><a href="#2-1-5-开机启动docker服务" class="headerlink" title="2.1.5 开机启动docker服务"></a>2.1.5 开机启动docker服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><p><img src="/2020/12/09/docker/docker/1592743261888.png" alt="1592743261888"></p><h3 id="2-2-Docker-镜像相关命令"><a href="#2-2-Docker-镜像相关命令" class="headerlink" title="2.2 Docker 镜像相关命令"></a>2.2 Docker 镜像相关命令</h3><h4 id="2-2-1-查看镜像"><a href="#2-2-1-查看镜像" class="headerlink" title="2.2.1 查看镜像"></a>2.2.1 查看镜像</h4><ul><li>查看本地所有的镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker images –q # 查看所用镜像的id</span><br></pre></td></tr></table></figure><p><img src="/2020/12/09/docker/docker/1592743915716.png" alt="1592743915716"></p><p>REPOSITORY：镜像名称</p><p>TAG：镜像标签</p><p>IMAGE ID：镜像ID</p><p>CREATED：镜像的创建日期</p><p>SIZE：镜像大小</p><h4 id="2-2-2-搜索镜像"><a href="#2-2-2-搜索镜像" class="headerlink" title="2.2.2 搜索镜像"></a>2.2.2 搜索镜像</h4><ul><li>从网络中查找需要的镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像名称</span><br></pre></td></tr></table></figure><p><img src="/2020/12/09/docker/docker/1592744016271.png" alt="1592744016271"></p><p>NAME：镜像名称</p><p>DESCRIPTION：镜像描述</p><p>STARS：用户评价，反应一个镜像的受欢迎程度</p><p>OFFICIAL：是否官方</p><p>AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的</p><h4 id="2-2-3-拉取镜像"><a href="#2-2-3-拉取镜像" class="headerlink" title="2.2.3 拉取镜像"></a>2.2.3 拉取镜像</h4><p>从Docker仓库下载镜像到本地，镜像名称格式为 名称:版本号，如果版本号不指定则是最新的版本。 如果不知道镜像版本，可以去docker hub 搜索对应镜像查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名称</span><br></pre></td></tr></table></figure><h4 id="2-2-4-删除镜像"><a href="#2-2-4-删除镜像" class="headerlink" title="2.2.4 删除镜像"></a>2.2.4 删除镜像</h4><p> 删除本地镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f id # 删除指定本地镜像</span><br><span class="line">docker rmi -f `docker images -q` # 删除所有本地镜像</span><br></pre></td></tr></table></figure><p>关于docker更多命令， 大家可以菜鸟教程查看, 网址：</p><p><a href="https://www.runoob.com/docker/docker-command-manual.html">https://www.runoob.com/docker/docker-command-manual.html</a></p><h3 id="2-3-容器相关的命令"><a href="#2-3-容器相关的命令" class="headerlink" title="2.3 容器相关的命令"></a>2.3 容器相关的命令</h3><h4 id="2-3-1-查看容器"><a href="#2-3-1-查看容器" class="headerlink" title="2.3.1 查看容器"></a>2.3.1 查看容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps # 查看正在运行的容器</span><br><span class="line">docker ps –a # 查看所有容器，包括正在运行和停止的容器</span><br></pre></td></tr></table></figure><h4 id="2-3-2-创建并启动容器"><a href="#2-3-2-创建并启动容器" class="headerlink" title="2.3.2 创建并启动容器"></a>2.3.2 创建并启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run 参数</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><p>• -i：保持容器运行。通常与 -t 同时使用。加入it这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭。</p><p>• -t：为容器重新分配一个伪输入终端，通常与 -i 同时使用。</p><p>• -d：以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用docker exec 进入容器。退出后，容器不会关闭。</p><p>• -it 创建的容器一般称为交互式容器，-id 创建的容器一般称为守护式容器</p><p>• –name：为创建的容器命名。</p><p><strong>1）交互式容器</strong></p><p>以<strong>交互式</strong>方式创建并启动容器，启动完成后，直接进入当前容器。使用exit命令退出容器。需要注意的是以此种方式 启动容器，如果退出容器，则容器会进入<strong>停止</strong>状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先拉取一个镜像；这一步不是每次启动容器都要做的，而是因为前面我们删除了镜像，无镜像可用所以才再拉取一个</span></span><br><span class="line">docker pull centos:7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建并启动名称为 mycentos7 的交互式容器；下面指令中的镜像名称 centos:7 也可以使用镜像id</span></span><br><span class="line">docker run -it --name=mycentos7 centos:7 /bin/bash</span><br></pre></td></tr></table></figure><p><strong>2）守护式容器</strong></p><p>创建一个守护式容器；如果对于一个需要长期运行的容器来说，我们可以创建一个守护式容器。命令如下（容器名称 不能重复）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建并启动守护式容器</span></span><br><span class="line">docker run -di --name=mycentos2 centos:7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">登录进入容器命令为：docker <span class="built_in">exec</span> -it container_name (或者 container_id) /bin/bash（<span class="built_in">exit</span>退出 时，容器不会停止）</span></span><br><span class="line">docker exec -it mycentos2 /bin/bash</span><br></pre></td></tr></table></figure><h4 id="2-3-3-进入容器"><a href="#2-3-3-进入容器" class="headerlink" title="2.3.3 进入容器"></a>2.3.3 进入容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec 参数 # 退出容器，容器不会关闭</span><br><span class="line">eg:</span><br><span class="line">docker exec -it mycentos2 /bin/bash</span><br></pre></td></tr></table></figure><h4 id="2-3-4-停止容器"><a href="#2-3-4-停止容器" class="headerlink" title="2.3.4 停止容器"></a>2.3.4 停止容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器名称或者容器id</span><br></pre></td></tr></table></figure><h4 id="2-3-5-启动容器"><a href="#2-3-5-启动容器" class="headerlink" title="2.3.5 启动容器"></a>2.3.5 启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器名称或者容器id</span><br></pre></td></tr></table></figure><h4 id="2-3-6-删除容器"><a href="#2-3-6-删除容器" class="headerlink" title="2.3.6 删除容器"></a>2.3.6 删除容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">删除指定容器</span></span><br><span class="line">docker rm 容器名称或者容器id</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除所有容器：</span></span><br><span class="line">docker rm `docker ps -a -q`</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：如果容器是运行状态则删除失败，需要停止容器才能删除</strong></p><h4 id="2-3-7-查看容器信息"><a href="#2-3-7-查看容器信息" class="headerlink" title="2.3. 7 查看容器信息"></a>2.3. 7 查看容器信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器名称或者容器id</span><br></pre></td></tr></table></figure><p><img src="/2020/12/09/docker/docker/1592745823262.png" alt="1592745823262"></p><p>说明：容器之间在一个局域网内，linux宿主机器可以与容器进行通信；但是外部的物理机笔记本是不能与容器直接通信的，如果需要则需要通过宿主机器端口的代理。</p><h2 id="3-docker容器的数据卷"><a href="#3-docker容器的数据卷" class="headerlink" title="3 . docker容器的数据卷"></a>3 . docker容器的数据卷</h2><h3 id="3-1-数据卷概念"><a href="#3-1-数据卷概念" class="headerlink" title="3.1 数据卷概念"></a>3.1 数据卷概念</h3><p>思考：</p><p>• Docker 容器删除后，在容器中产生的数据也会随之销毁</p><p>• Docker 容器和外部机器可以直接交换文件吗？</p><p>• 容器之间想要进行数据交互？</p><p><img src="/2020/12/09/docker/docker/1592748818477.png" alt="1592748818477"></p><p><strong>数据卷</strong></p><ul><li>数据卷是宿主机中的一个目录或文件</li><li>当容器目录和数据卷目录绑定后，对方的修改会立即同步</li><li>一个数据卷可以被多个容器同时挂载</li><li>一个容器也可以被挂载多个数据卷</li></ul><p><img src="/2020/12/09/docker/docker/1592748888266.png" alt="1592748888266"></p><p><strong>数据卷的作用</strong></p><p>• 容器数据持久化</p><p>• 外部机器和容器间接通信</p><p>• 容器之间数据交换</p><h3 id="3-2-配置数据卷"><a href="#3-2-配置数据卷" class="headerlink" title="3.2 配置数据卷"></a>3.2 配置数据卷</h3><p><strong>创建启动容器时，使用 –v 参数 设置数据卷</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ... –v 宿主机目录(文件):容器内目录(文件) ...</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ol><li><p>目录必须是绝对路径</p></li><li><p>如果目录不存在，会自动创建</p></li><li><p>一个容器可以挂载多个数据卷</p></li><li><p>一个数据卷也可以被多个容器挂载</p></li><li><p>两个容器可以挂载同一个容器</p></li></ol><p>在宿主机中实现与容器目录的挂载：</p><p>在c1容器中的root目录下就可以看到data_container文件夹：如下图</p><p><img src="/2020/12/09/docker/docker/1592750980127.png" alt="1592750980127"></p><p>同时我们我们回到宿主机中，可以在data文件夹下创建一个文件itcast.txt ,可以发现在容器中也会生成itcast.txt文件：如下图</p><p><img src="/2020/12/09/docker/docker/1592751613509.png" alt="1592751613509"></p><ol><li>数据卷的持久化：</li></ol><p>​    当我们把c1容器删除后，宿主机中的数据卷依然存在。  所以当我们重新创建一个容器的同时依然可以挂载宿主机中的data文件夹，对应data里的数据依然同步到容器中。</p><ol start="2"><li>一个容器可以挂载多个数据卷</li></ol><p><img src="/2020/12/09/docker/docker/1592752027409.png" alt="1592752027409"></p><ol start="3"><li>多个容器可以挂载同一个数据卷</li></ol><p><img src="/2020/12/09/docker/docker/1592749838266.png" alt="1592749838266"></p><p>分别创建两个容器，两个容器都挂载宿主机中data目录，当 修改c3容器的data目录c4会实现同步。</p><p>从而实现两个容器之间的交互。</p><h3 id="3-3-配置数据卷容器"><a href="#3-3-配置数据卷容器" class="headerlink" title="3.3 配置数据卷容器"></a>3.3 配置数据卷容器</h3><p><strong>多容器进行数据交换</strong></p><ol><li><p>多个容器挂载同一个数据卷</p></li><li><p>数据卷容器</p></li></ol><p><img src="/2020/12/09/docker/docker/1592753247374.png" alt="1592753247374"></p><p><strong>步骤：</strong></p><p>1.创建启动c3数据卷容器，使用 –v 参数 设置数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run –it --name=c3 –v /volume centos:7 /bin/bash</span><br></pre></td></tr></table></figure><ol start="2"><li>创建启动 c1 c2 容器，使用 –-volumes-from 参数 设置数据卷</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run –it --name=c1 --volumes-from c3 centos:7 /bin/bash</span><br><span class="line"></span><br><span class="line">docker run –it --name=c2 --volumes-from c3 centos:7 /bin/bash</span><br></pre></td></tr></table></figure><h3 id="3-4-数据卷小结"><a href="#3-4-数据卷小结" class="headerlink" title="3.4 数据卷小结"></a>3.4 数据卷小结</h3><ol><li><p>数据卷概念<br> •宿主机的一个目录或文件</p></li><li><p>数据卷作用<br> • 容器数据持久化<br> • 客户端和容器数据交换<br> • 容器间数据交换</p></li><li><p>数据卷容器<br> • 创建一个容器，挂载一个目录，让其他容器继承自该容器( –volume-from )。</p></li></ol><p>  • 通过简单方式实现数据卷配置</p><h2 id="4-应用部署"><a href="#4-应用部署" class="headerlink" title="4. 应用部署"></a>4. 应用部署</h2><p>参考资料中docker应用部署.md</p><h2 id="5-Docerfile"><a href="#5-Docerfile" class="headerlink" title="5.  Docerfile"></a>5.  Docerfile</h2><p>前面的课程中已经知道了，要获得镜像，可以从Docker仓库中进行下载。那如果我们想自己开发一个镜像，那该如 何做呢？答案是：Dockerfifile</p><p>Dockerfifile其实就是一个文本文件，由一系列命令和参数构成，Docker可以读取Dockerfifile文件并根据Dockerfifile文 件的描述来构建镜像。</p><h3 id="5-1-Docker-镜像原理-了解"><a href="#5-1-Docker-镜像原理-了解" class="headerlink" title="5.1 Docker 镜像原理(了解)"></a>5.1 Docker 镜像原理(了解)</h3><p>思考：</p><ol><li><p>Docker 镜像本质是什么？<br>是一个分层文件系统</p></li><li><p>Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？ ?</p><p>  Centos的iso镜像文件包含bootfs和rootfs，而docker的centos镜像复用操作系统的bootfs，只有rootfs和其他镜像层</p></li><li><p>Docker 中一个tomcat镜像为什么有500MB，而一个tomcat安装包只有70多MB？ ?</p></li></ol><p>  由于docker中镜像是分层的，tomcat虽然只有70多MB，但他需要依赖于父镜像和基础镜像，所有整个对外暴露的<br>  tomcat镜像大小500多MB</p><p><img src="/2020/12/09/docker/docker/1592761590593.png" alt="1592761590593"></p><p><img src="/2020/12/09/docker/docker/1592761605037.png" alt="1592761605037"></p><h3 id="5-2-镜像制作"><a href="#5-2-镜像制作" class="headerlink" title="5.2 镜像制作"></a>5.2 镜像制作</h3><p><img src="/2020/12/09/docker/docker/1592762650841.png" alt="1592762650841"></p><h4 id="5-2-1-容器转为镜像"><a href="#5-2-1-容器转为镜像" class="headerlink" title="5.2.1 容器转为镜像"></a>5.2.1 容器转为镜像</h4><ol><li>使用docker commit命令可以将容器保存为镜像。</li></ol><p>命令形式：docker commit 容器名称 镜像名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">docker commit 381827f60f70 itheima_tomcat:1.0</span><br></pre></td></tr></table></figure><ol start="2"><li>使用docker save命令可以将已有镜像保存为tar 文件。</li></ol><p>命令形式：docker save –o tar文件名 镜像名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o itheima_tomcat:1.0.tar</span><br></pre></td></tr></table></figure><ol start="3"><li>使用docker load命令可以根据tar文件恢复为docker镜像。</li></ol><p>命令形式：docker load -i tar文件名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 加载恢复镜像</span></span><br><span class="line">docker load -i itheima_tomcat.tar</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在镜像恢复之后，基于该镜像再次创建启动容器</span></span><br><span class="line">docker run -di --name=new_tomcat -p 8080:8080 itheima_tomcat:1.0</span><br></pre></td></tr></table></figure><p><strong>注意：新的镜像制作后，原本容器中挂载的目录将失效，  索引一般在恢复镜像创建容器容器的时候需要重新挂载。</strong></p><h3 id="5-3-Dockerfile-概念"><a href="#5-3-Dockerfile-概念" class="headerlink" title="5.3 Dockerfile 概念"></a>5.3 Dockerfile 概念</h3><ul><li>Dockerfile 是一个文本文件</li><li>包含了一条条的指令</li><li>每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像</li><li>对于开发人员：可以为开发团队提供一个完全一致的开发环境</li><li>对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件<br>构建一个新的镜像开始工作了</li><li>对于运维人员：在部署时，可以实现应用的无缝移植</li></ul><p>Dochub网址：<a href="https://hub.docker.com/">https://hub.docker.com</a></p><p><img src="/2020/12/09/docker/docker/1592763188913.png" alt="1592763188913"></p><p><strong>关键字：</strong></p><table><thead><tr><th>关键字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td>指定dockerfile基于哪个image构建</td></tr><tr><td>MAINTAINER</td><td>作者信息</td><td>用来标明这个dockerfile谁写的</td></tr><tr><td>LABEL</td><td>标签</td><td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td></tr><tr><td>RUN</td><td>执行命令</td><td>执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN [“command” , “param1”,”param2”]</td></tr><tr><td>CMD</td><td>容器启动命令</td><td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [“command” , “param1”,”param2”]</td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td>一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td>build的时候复制文件到image中</td></tr><tr><td>ADD</td><td>添加文件</td><td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value</td></tr><tr><td>ARG</td><td>构建参数</td><td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td></tr><tr><td>VOLUME</td><td>定义外部可以挂载的数据卷</td><td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp</td></tr><tr><td>WORKDIR</td><td>工作目录</td><td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用户</td><td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信号量到宿主机</td><td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td>SHELL</td><td>指定执行脚本的shell</td><td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr></tbody></table><h3 id="5-4-Dockerfile-案例"><a href="#5-4-Dockerfile-案例" class="headerlink" title="5.4 Dockerfile 案例"></a>5.4 Dockerfile 案例</h3><h4 id="需求1："><a href="#需求1：" class="headerlink" title="需求1："></a>需求1：</h4><p>自定义centos7镜像。要求：</p><ol><li>默认登录路径为 /usr</li><li>可以使用vim</li></ol><p><strong>实现步骤</strong>：</p><p>①  定义父镜像：FROM centos:7</p><p>② 定义作者信息：MAINTAINER itheima <a href="mailto:&#x69;&#116;&#x68;&#x65;&#x69;&#x6d;&#97;&#64;&#x69;&#x74;&#99;&#97;&#x73;&#x74;&#x2e;&#x63;&#110;">&#x69;&#116;&#x68;&#x65;&#x69;&#x6d;&#97;&#64;&#x69;&#x74;&#99;&#97;&#x73;&#x74;&#x2e;&#x63;&#110;</a></p><p>③ 执行安装vim命令： RUN yum install -y vim</p><p>④ 定义默认的工作目录：WORKDIR /usr</p><p>⑤ 定义容器启动执行的命令：CMD /bin/bash</p><p>⑥ 通过dockerfile构建镜像：docker bulid –f dockerfile文件路径 –t 镜像名称:版本</p><p><strong>Dockerfile文件：</strong></p><p><img src="/2020/12/09/docker/docker/1592764213253.png" alt="1592764213253"></p><p>文件编写完成执行命令构建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f ./centos_dockerfile -t itheima_centos:1 .</span><br></pre></td></tr></table></figure><h4 id="需求2："><a href="#需求2：" class="headerlink" title="需求2："></a>需求2：</h4><p>定义dockerfile，发布springboot项目</p><p><strong>实现步骤</strong></p><p>​     ① 定义父镜像：FROM java:8</p><p>​     ② 定义作者信息：MAINTAINER itheima <a href="mailto:&#x69;&#x74;&#x68;&#101;&#x69;&#109;&#97;&#64;&#x69;&#x74;&#x63;&#97;&#x73;&#x74;&#x2e;&#99;&#110;">&#x69;&#x74;&#x68;&#101;&#x69;&#109;&#97;&#64;&#x69;&#x74;&#x63;&#97;&#x73;&#x74;&#x2e;&#99;&#110;</a></p><p>​     ③ 将jar包添加到容器： ADD springboot.jar app.jar</p><p>​     ④ 定义容器启动执行的命令：CMD java–jar app.jar</p><p>​     ⑤ 通过dockerfile构建镜像：docker bulid –f dockerfile文件路径 –t 镜像名称:版本</p><p><img src="/2020/12/09/docker/docker/1592765120052.png" alt="1592765120052"></p><p>文件编写完成执行命令构建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f ./springboot_dockerfile -t app .</span><br></pre></td></tr></table></figure><h2 id="6-服务编排"><a href="#6-服务编排" class="headerlink" title="6.  服务编排"></a>6.  服务编排</h2><h2 id="6-1-服务编排概念"><a href="#6-1-服务编排概念" class="headerlink" title="6.1 服务编排概念"></a>6.1 服务编排概念</h2><p>微服务架构的应用系统中一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启停，维护的工作量会很大。</p><ul><li>要从Dockerfile build image 或者去dockerhub拉取image</li><li>要创建多个container</li><li> 要管理这些container（启动停止删除）</li><li> 服务编排： 按照一定的业务规则批量管理容器</li></ul><h2 id="6-2-Docker-Compose-概述"><a href="#6-2-Docker-Compose-概述" class="headerlink" title="6.2 Docker Compose 概述"></a>6.2 Docker Compose 概述</h2><h3 id="6-2-1-Docker-Compose"><a href="#6-2-1-Docker-Compose" class="headerlink" title="6.2.1 Docker Compose"></a>6.2.1 Docker Compose</h3><p>Docker Compose是一个编排多容器分布式部署的工具，提供命令集管理容器化应用的完整开发周期，包括服务构建 ，启动和停止。使用步骤：</p><ol><li><p>利用 Dockerfile 定义运行环境镜像</p></li><li><p>使用 docker-compose.yml 定义组成应用的各服务</p></li><li><p>运行 docker-compose up 启动应用</p></li></ol><p><img src="/2020/12/09/docker/docker/1592767533518.png" alt="1592767533518"></p><h3 id="6-2-2-Docker-Compose-安装使用"><a href="#6-2-2-Docker-Compose-安装使用" class="headerlink" title="6.2.2  Docker Compose 安装使用"></a>6.2.2  Docker Compose 安装使用</h3><p>参考《docker-compose.md》</p><h2 id="7-Docker-私有仓库"><a href="#7-Docker-私有仓库" class="headerlink" title="7. Docker 私有仓库"></a>7. Docker 私有仓库</h2><p>Docker官方的Docker hub（<a href="https://hub.docker.com)是一个用于管理公共镜像的仓库,我们可以从上面拉取镜像/">https://hub.docker.com）是一个用于管理公共镜像的仓库，我们可以从上面拉取镜像</a> 到本地，也可以把我们自己的镜像推送上去。但是，有时候我们的服务器无法访问互联网，或者你不希望将自己的镜 像放到公网当中，那么我们就需要搭建自己的私有仓库来存储和管理自己的镜像。</p><p>搭建参考《docker 私有仓库.md》</p><h2 id="8-Docker相关概念"><a href="#8-Docker相关概念" class="headerlink" title="8. Docker相关概念"></a>8. Docker相关概念</h2><p>docker容器虚拟化 与 传统虚拟机比较：</p><p><img src="/2020/12/09/docker/docker/1592770300637.png" alt="1592770300637"></p><p><img src="/2020/12/09/docker/docker/1592770331752.png" alt="1592770331752"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-docker介绍&quot;&gt;&lt;a href=&quot;#1-docker介绍&quot; class=&quot;headerlink&quot; title=&quot;1. docker介绍&quot;&gt;&lt;/a&gt;1. docker介绍&lt;/h2&gt;&lt;h3 id=&quot;1-1-docker概念&quot;&gt;&lt;a href=&quot;#1-1-doc</summary>
      
    
    
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>swagger使用</title>
    <link href="http://example.com/2020/12/07/swagger%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2020/12/07/swagger%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-12-07T13:44:23.000Z</published>
    <updated>2021-04-23T15:52:26.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="1-pom依赖"><a href="#1-pom依赖" class="headerlink" title="1.pom依赖"></a>1.pom依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-models<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h2><p>config.SwaggerConfig</p><ul><li>“/cli/**”路径需要修改</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Predicate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.google.common.base.Predicates.or;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> springfox.documentation.builders.PathSelectors.ant;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018-04-27 18:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> Swagger 配置</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createDocket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Predicate&lt;String&gt; path = or(ant(<span class="string">&quot;/cli/**&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">&quot;eairlv-cli&quot;</span>)</span><br><span class="line">                .useDefaultResponseMessages(<span class="keyword">false</span>)</span><br><span class="line">                .forCodeGeneration(<span class="keyword">false</span>)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .paths(path)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;eairlv-cli&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;eairlv-cli 脚手架工具swagger2接口文档&quot;</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;https://gitee.com/eairlv&quot;</span>)</span><br><span class="line">                .license(<span class="string">&quot;Apache License Version 1.0&quot;</span>)</span><br><span class="line">                .licenseUrl(<span class="string">&quot;https://github.com/springfox/springfox/blob/master/LICENSE&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><p>- @Api()用于类；<br>表示标识这个类是swagger的资源<br>- @ApiOperation()用于方法；<br>表示一个http请求的操作<br>- @ApiParam()用于方法，参数，字段说明；<br>表示对参数的添加元数据（说明或是否必填等）<br>- @ApiModel()用于类<br>表示对类进行说明，用于参数用实体类接收<br>- @ApiModelProperty()用于方法，字段<br>表示对model属性的说明或者数据操作更改<br>- @ApiIgnore()用于类，方法，方法参数<br>表示这个方法或者类被忽略<br>- @ApiImplicitParam() 用于方法<br>表示单独的请求参数<br>- @ApiImplicitParams() 用于方法，包含多个 @ApiImplicitParam</p><h2 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h2><p>具体使用举例说明：<br>@Api()<br>用于<strong>类</strong>；表示标识这个类是swagger的资源<br>tags–表示说明<br>value–也是说明，可以使用tags替代<br>但是tags如果有多个值，会生成多个list</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Api(value&#x3D;&quot;用户controller&quot;,tags&#x3D;&#123;&quot;用户操作接口&quot;&#125;)</span><br><span class="line">@RestController</span><br><span class="line">public class UserController &#123; &#125;</span><br></pre></td></tr></table></figure><p>@ApiOperation() 用于<strong>方法</strong>；表示一个http请求的操作<br>value用于方法描述<br>notes用于提示内容<br>tags可以重新分组（视情况而用）<br>@ApiParam() 用于方法，参数，字段说明；表示对参数的添加元数据（说明或是否必填等）<br>name–参数名<br>value–参数说明<br>required–是否必填</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(value=&quot;用户controller&quot;,tags=&#123;&quot;用户操作接口&quot;&#125;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="meta">@ApiOperation(value = &quot;获取用户信息&quot;, tags = &#123;&quot;获取用户信息copy&quot;&#125;, notes = &quot;注意问题点&quot;)</span></span><br><span class="line">       <span class="meta">@GetMapping(&quot;/getUserInfo&quot;)</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> User <span class="title">getUserInfo</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">       <span class="meta">@ApiParam(name = &quot;id&quot;, value = &quot;用户id&quot;, required = true)</span> Long id, <span class="meta">@ApiParam(name = &quot;username&quot;, value = &quot;用户名&quot;)</span> String username)</span> </span>&#123; <span class="comment">// userService可忽略，是业务逻辑 User user = userService.getUserInfo(); return user; &#125; &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实体类层"><a href="#实体类层" class="headerlink" title="实体类层"></a>实体类层</h2><p>@ApiModel()用于<strong>类</strong> ；表示对类进行说明，用于参数用实体类接收<br>value–表示对象名<br>description–描述<br>都可省略</p><p>@ApiModelProperty()用于<strong>方法</strong>，<strong>字段</strong>； 表示对model属性的说明或者数据操作更改<br>value–字段说明<br>name–重写属性名字<br>dataType–重写属性类型<br>required–是否必填<br>example–举例说明<br>hidden–隐藏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel(value=&quot;user对象&quot;,description=&quot;用户对象user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;用户名&quot;,name=&quot;username&quot;,example=&quot;xingguo&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;状态&quot;,name=&quot;state&quot;,required=true)</span></span><br><span class="line">    <span class="keyword">private</span> Integer state;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;id数组&quot;,hidden=true)</span></span><br><span class="line">    <span class="keyword">private</span> String[] ids;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; idList; <span class="comment">//省略get/set &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;更改用户信息&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/updateUserInfo&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateUserInfo</span><span class="params">(<span class="meta">@RequestBody</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@ApiParam(name=&quot;用户对象&quot;,value=&quot;传入json格式&quot;,required=true)</span> User user)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = userService.updateUserInfo(user);</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>@ApiIgnore()用于类或者方法上，可以不被swagger显示在页面上<br>比较简单, 这里不做举例</p><p>@ApiImplicitParam() 用于方法<br>表示单独的请求参数<br>@ApiImplicitParams() 用于方法，包含多个 @ApiImplicitParam<br>name–参数ming<br>value–参数说明<br>dataType–数据类型<br>paramType–参数类型<br>example–举例说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;查询测试&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;select&quot;)</span></span><br><span class="line"><span class="comment">//@ApiImplicitParam(name=&quot;name&quot;,value=&quot;用户名&quot;,dataType=&quot;String&quot;, paramType = &quot;query&quot;) @ApiImplicitParams(&#123; @ApiImplicitParam(name=&quot;name&quot;,value=&quot;用户名&quot;,dataType=&quot;string&quot;, paramType = &quot;query&quot;,example=&quot;xingguo&quot;), @ApiImplicitParam(name=&quot;id&quot;,value=&quot;用户id&quot;,dataType=&quot;long&quot;, paramType = &quot;query&quot;)&#125;) public void select()&#123; &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h1&gt;&lt;h2 id=&quot;1-pom依赖&quot;&gt;&lt;a href=&quot;#1-pom依赖&quot; class=&quot;headerlink&quot; title=&quot;1.pom依赖&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="swagger" scheme="http://example.com/tags/swagger/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="http://example.com/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/"/>
    <id>http://example.com/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/</id>
    <published>2020-11-13T03:48:33.000Z</published>
    <updated>2021-01-24T09:59:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="1-1二叉树【理解】"><a href="#1-1二叉树【理解】" class="headerlink" title="1.1二叉树【理解】"></a>1.1二叉树【理解】</h3><ul><li><p>二叉树的特点</p><ul><li>二叉树中,任意一个节点的度要小于等于2<ul><li>节点: 在树结构中,每一个元素称之为节点</li><li>度: 每一个节点的子节点数量称之为度</li></ul></li></ul></li><li><p>二叉树结构图</p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="01_二叉树结构图"></p></li></ul><h3 id="1-2二叉查找树【理解】"><a href="#1-2二叉查找树【理解】" class="headerlink" title="1.2二叉查找树【理解】"></a>1.2二叉查找树【理解】</h3><ul><li><p>二叉查找树的特点</p><ul><li>二叉查找树,又称<strong>二叉排序树</strong>或者<strong>二叉搜索树</strong></li><li>每一个节点上最多有<strong>两个子节点</strong></li><li>左子树上所有节点的值都小于根节点的值</li><li>右子树上所有节点的值都大于根节点的值</li><li><strong>左&lt;根&lt;右</strong></li></ul></li><li><p>二叉查找树结构图</p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="02_二叉查找树结构图"></p></li><li><p>二叉查找树和二叉树对比结构图</p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AF%B9%E6%AF%94%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="03_二叉查找树和二叉树对比结构图"></p></li><li><p>二叉查找树添加节点规则</p><ul><li>小的存左边</li><li>大的存右边</li><li><strong>一样的不存</strong></li></ul><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E6%B7%BB%E5%8A%A0%E8%8A%82%E7%82%B9%E8%A7%84%E5%88%99.png" alt="04_二叉查找树添加节点规则"></p></li></ul><h3 id="1-3平衡二叉树【理解】"><a href="#1-3平衡二叉树【理解】" class="headerlink" title="1.3平衡二叉树【理解】"></a>1.3平衡二叉树【理解】</h3><ul><li><p>平衡二叉树的特点</p><ul><li>二叉树左右两个子树的<strong>高度差不超过1</strong></li><li><strong>任意节点</strong>的左右两个<strong>子树</strong>都是一颗<strong>平衡二叉树</strong></li></ul></li><li><p>平衡二叉树旋转</p><ul><li><p>旋转触发时机    <strong>破坏了平衡</strong></p><ul><li>当<strong>添加一个节点</strong>之后,该树不再是一颗平衡二叉树</li></ul></li><li><p>左旋</p><ul><li>就是将根节点的右侧往左拉,原先的右子节点变成新的父节点,并把多余的左子节点出让,给已经降级的根节点当右子节点</li></ul><p>添加一个<strong>12</strong>节点</p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B7%A6%E6%97%8B01.png" alt="05_平衡二叉树左旋01"></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B7%A6%E6%97%8B02.png" alt="05_平衡二叉树左旋02"></p></li></ul><p>复杂左旋</p><p>添加<strong>12</strong></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/zx1.png" alt="image-20201107102149442"></p><p><strong>拿掉9节点</strong></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/zx2.png" alt="image-20201107102410776"></p><p>|||||</p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/zx3.png" alt="image-20201107102611349"></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/zx4.png" alt="image-20201107102704474"></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/zx5.png" alt="image-20201107102744783"></p><ul><li><p>右旋</p><ul><li><p>就是将根节点的左侧往右拉,左子节点变成了新的父节点,并把多余的右子节点出让,给已经降级根节点当左子节点</p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%B3%E6%97%8B01.png" alt="06_平衡二叉树右旋01"></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%B3%E6%97%8B02.png" alt="06_平衡二叉树右旋02"></p></li></ul></li></ul></li><li><p>平衡二叉树和二叉查找树对比结构图</p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E5%AF%B9%E6%AF%94%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="07_平衡二叉树和二叉查找树对比结构图"></p></li><li><p>平衡二叉树旋转的四种情况</p><ul><li><p>左左</p><ul><li><p>左左: 当根节点左子树的左子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 直接对整体进行右旋即可</p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B7%A6%E5%B7%A6.png" alt="08_平衡二叉树左左"></p></li></ul></li><li><p>左右</p><ul><li><p>左右: 当根节点左子树的右子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 先在左子树对应的节点位置进行左旋,在对整体进行右旋</p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B7%A6%E5%8F%B3.png" alt="09_平衡二叉树左右"></p></li></ul></li><li><p>右右</p><ul><li><p>右右: 当根节点右子树的右子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 直接对整体进行左旋即可</p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%B3%E5%8F%B3.png" alt="10_平衡二叉树右右"></p></li></ul></li><li><p>右左</p><ul><li><p>右左:当根节点右子树的左子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 先在右子树对应的节点位置进行右旋,在对整体进行左旋</p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%B3%E5%B7%A6.png" alt="11_平衡二叉树右左"></p></li></ul></li></ul></li></ul><h2 id="1-红黑树"><a href="#1-红黑树" class="headerlink" title="1.红黑树"></a>1.红黑树</h2><h3 id="1-1概述【理解】"><a href="#1-1概述【理解】" class="headerlink" title="1.1概述【理解】"></a>1.1概述【理解】</h3><ul><li><p>红黑树的特点</p><ul><li><strong>平衡二叉B树</strong></li><li>每一个节点可以是<strong>红</strong>或者<strong>黑</strong></li><li>红黑树不是高度平衡的,它的平衡是通过”自己的<strong>红黑规则</strong>“进行实现的</li></ul></li><li><p>红黑树的<strong>红黑规则</strong>有哪些</p><ol><li><p>每一个节点或是红色的,或者是黑色的</p></li><li><p><strong>根节点</strong>必须是<strong>黑</strong>色</p></li><li><p>如果一个节点<strong>没有子节点</strong>或者<strong>父</strong>节点,则<strong>该节点</strong>相应的<strong>指针</strong>属性值为<strong>Nil</strong>,这些<strong>Nil</strong>视为叶节点,每个叶节点(Nil)是<strong>黑色</strong>的</p></li><li><p>如果某一个节点是<strong>红色</strong>,那么它的子节点必须是<strong>黑色</strong>(<strong>不能出现两个红色</strong>节点相连 的情况)</p></li><li><p>对每一个节点,从<strong>该节点</strong>到其所有<strong>后代叶节点</strong>的简单<strong>路径</strong>上,均包含<strong>相同数目的黑色节点</strong></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/%E7%BA%A2%E9%BB%91%E6%A0%91%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="12_红黑树结构图"></p></li></ol></li><li><p>红黑树添加节点的默认颜色</p><ul><li><p>添加节点时,默认为红色,效率高</p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%B7%BB%E5%8A%A0%E8%8A%82%E7%82%B9%E9%A2%9C%E8%89%B2.png" alt="13_红黑树添加节点颜色"></p></li></ul></li><li><p>红黑树添加节点后如何保持红黑规则</p><ul><li>根节点位置<ul><li>直接变为黑色</li></ul></li><li>非根节点位置<ul><li>父节点为黑色<ul><li>不需要任何操作,默认红色即可</li></ul></li><li>父节点为红色<ul><li>叔叔节点为红色<ol><li>将”父节点”设为黑色,将”叔叔节点”设为黑色</li><li>将”祖父节点”设为红色</li><li>如果”祖父节点”为根节点,则将根节点再次变成黑色</li></ol></li><li>叔叔节点为黑色<ol><li>将”父节点”设为黑色</li><li>将”祖父节点”设为红色</li><li>以”祖父节点”为支点进行旋转</li></ol></li></ul></li></ul></li></ul></li></ul><h3 id="添加黑色节点"><a href="#添加黑色节点" class="headerlink" title="添加黑色节点"></a>添加黑色节点</h3><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/hh01.png" alt="image-20201110142039570"></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/hh02.png" alt="image-20201110142211238"></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/hh03.png" alt="image-20201110142332133"></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/hh04.png" alt="image-20201110142414043"></p><h3 id="添加红色节点（效率高）"><a href="#添加红色节点（效率高）" class="headerlink" title="添加红色节点（效率高）"></a>添加红色节点（效率高）</h3><p>一共只需要调整一次 所以添加的效率要更高点</p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/hh04.png" alt="image-20201110142414043"></p><h3 id="添加节点思路"><a href="#添加节点思路" class="headerlink" title="添加节点思路"></a>添加节点思路</h3><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/h01.png" alt="image-20201110142734821"></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/h2.png" alt="image-20201110142828938"></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/h3.png" alt="image-20201110142914836"></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/h4.png" alt="image-20201110143005987"></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/h5.png" alt="image-20201110143128714"></p><p>20是根节点 所以不用变成<strong>红色</strong></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/hx01.png" alt="image-20201110143532153"></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/001.png" alt="image-20201110143943929"></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/002.png" alt="image-20201110144007100"></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/003.png" alt="image-20201110144020937"></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/004.png" alt="image-20201110144034368"></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/005.png" alt="image-20201110144121104"></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/006.png" alt="image-20201110144208117"></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/007.png" alt="image-20201110144227530"></p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/008.png" alt="image-20201110144303897"></p><h2 id="2-哈希表结构【理解】"><a href="#2-哈希表结构【理解】" class="headerlink" title="2 哈希表结构【理解】"></a>2 哈希表结构【理解】</h2><ul><li><p>JDK1.8以前</p><p>​    数组 + 链表</p><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/JKD8%E4%BB%A5%E5%89%8D%E5%93%88%E5%B8%8C%E8%A1%A8.png" alt="14_JKD8以前哈希表"></p></li><li><p>JDK1.8以后</p><ul><li><p>节点个数少于等于8个</p><p>​    数组 + 链表</p></li><li><p>节点个数多于8个</p><p>​    数组 + 红黑树</p></li></ul><p><img src="/2020/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/shujujg/JKD8%E4%BB%A5%E5%90%8E%E5%93%88%E5%B8%8C%E8%A1%A8.png" alt="15_JKD8以后哈希表"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉树&lt;/h2&gt;&lt;h3 id=&quot;1-1二叉树【理解】&quot;&gt;&lt;a href=&quot;#1-1二叉树【理解】&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="http://example.com/2020/10/12/git/git/"/>
    <id>http://example.com/2020/10/12/git/git/</id>
    <published>2020-10-12T03:48:33.000Z</published>
    <updated>2021-01-23T12:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-git下载"><a href="#1-git下载" class="headerlink" title="1.git下载"></a>1.git下载</h2><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><h2 id="2-Git-配置"><a href="#2-Git-配置" class="headerlink" title="2.Git 配置"></a>2.Git 配置</h2><p>配置全局用户名和密码，git提交代码时用来显示你身份和联系方式，并不是github用户名和邮箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;cardioid&quot;</span> <span class="comment">//改成自己的</span></span><br><span class="line">git config --global user.email <span class="string">&quot;1415479273@qq.com&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3-生成SSH-key"><a href="#3-生成SSH-key" class="headerlink" title="3.生成SSH key"></a>3.生成SSH key</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;1415479273@qq.com&quot;</span><br></pre></td></tr></table></figure><ul><li><p>然后会叫你输入保存路径，直接按回车即可，保存在C盘用户目录下</p></li><li><p>然后会提示输入密码和确认密码，不用输入直接按两下回车即可</p></li></ul><p>文件默认是在C盘用户目录下，我的是<code>C:\Users\13452\.ssh</code></p><p>文件夹中应该会有两个文件 ：<code>id_rsa</code>和<code>id_rsa.pub</code></p><p><code>id_rsa.pub</code>就是我们要的key</p><p>SSH key就生成好了，接下来就是配置到github或者码云上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-git下载&quot;&gt;&lt;a href=&quot;#1-git下载&quot; class=&quot;headerlink&quot; title=&quot;1.git下载&quot;&gt;&lt;/a&gt;1.git下载&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;https://gi</summary>
      
    
    
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
</feed>
