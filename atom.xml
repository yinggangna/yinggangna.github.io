<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WinGone&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-11-10T07:42:41.867Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>WangYinggang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2020/11/26/shujujg/%E7%BB%BC%E5%90%88%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://example.com/2020/11/26/shujujg/%E7%BB%BC%E5%90%88%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2020-11-26T03:32:05.374Z</published>
    <updated>2020-11-10T07:42:41.867Z</updated>
    
    <content type="html"><![CDATA[<pre><code>layout: &quot;面试&quot;title: &quot;综合面试题&quot;date: 2020-11-24 12:48:33comments: truetags: 面试</code></pre><h1 id="综合面试题"><a href="#综合面试题" class="headerlink" title="综合面试题"></a>综合面试题</h1><h2 id="java面试题整合"><a href="#java面试题整合" class="headerlink" title="java面试题整合"></a><a href="./ms/java面试题整合.pdf">java面试题整合</a><br></h2><h2 id="JAVA核心面试知识整理"><a href="#JAVA核心面试知识整理" class="headerlink" title="JAVA核心面试知识整理"></a><a href="./ms/JAVA核心面试知识整理.pdf">JAVA核心面试知识整理</a><br></h2><h2 id="互联网大厂面试题库大全"><a href="#互联网大厂面试题库大全" class="headerlink" title="互联网大厂面试题库大全"></a><a href="./ms/互联网大厂面试题库大全.pdf">互联网大厂面试题库大全</a><br></h2><h2 id="互联网各大厂Java面试题库大全"><a href="#互联网各大厂Java面试题库大全" class="headerlink" title="互联网各大厂Java面试题库大全"></a><a href="./ms/互联网各大厂Java面试题库大全.pdf">互联网各大厂Java面试题库大全</a><br></h2><h2 id="java面试题整合-1"><a href="#java面试题整合-1" class="headerlink" title="java面试题整合"></a><a href="./ms/java面试题整合.pdf">java面试题整合</a><br></h2><h2 id="整理的多家公司常见面试题库350道"><a href="#整理的多家公司常见面试题库350道" class="headerlink" title="整理的多家公司常见面试题库350道"></a><a href="./ms/整理的多家公司常见面试题库350道.pdf">整理的多家公司常见面试题库350道</a><br></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt;layout: &amp;quot;面试&amp;quot;
title: &amp;quot;综合面试题&amp;quot;
date: 2020-11-24 12:48:33
comments: true
tags: 面试&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;综合面试题&quot;&gt;&lt;a </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="http://example.com/2020/11/12/shujujg/"/>
    <id>http://example.com/2020/11/12/shujujg/</id>
    <published>2020-11-12T03:48:33.000Z</published>
    <updated>2020-12-14T11:22:08.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="1-1二叉树【理解】"><a href="#1-1二叉树【理解】" class="headerlink" title="1.1二叉树【理解】"></a>1.1二叉树【理解】</h3><ul><li><p>二叉树的特点</p><ul><li>二叉树中,任意一个节点的度要小于等于2<ul><li>节点: 在树结构中,每一个元素称之为节点</li><li>度: 每一个节点的子节点数量称之为度</li></ul></li></ul></li><li><p>二叉树结构图</p><p><img src="/2020/11/12/shujujg/.%5C01_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="01_二叉树结构图"></p></li></ul><h3 id="1-2二叉查找树【理解】"><a href="#1-2二叉查找树【理解】" class="headerlink" title="1.2二叉查找树【理解】"></a>1.2二叉查找树【理解】</h3><ul><li><p>二叉查找树的特点</p><ul><li>二叉查找树,又称<strong>二叉排序树</strong>或者<strong>二叉搜索树</strong></li><li>每一个节点上最多有<strong>两个子节点</strong></li><li>左子树上所有节点的值都小于根节点的值</li><li>右子树上所有节点的值都大于根节点的值</li><li><strong>左&lt;根&lt;右</strong></li></ul></li><li><p>二叉查找树结构图</p><p><img src="/2020/11/12/shujujg/.%5C02_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="02_二叉查找树结构图"></p></li><li><p>二叉查找树和二叉树对比结构图</p><p><img src="/2020/11/12/shujujg/.%5C03_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AF%B9%E6%AF%94%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="03_二叉查找树和二叉树对比结构图"></p></li><li><p>二叉查找树添加节点规则</p><ul><li>小的存左边</li><li>大的存右边</li><li><strong>一样的不存</strong></li></ul><p><img src="/2020/11/12/shujujg/.%5C04_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E6%B7%BB%E5%8A%A0%E8%8A%82%E7%82%B9%E8%A7%84%E5%88%99.png" alt="04_二叉查找树添加节点规则"></p></li></ul><h3 id="1-3平衡二叉树【理解】"><a href="#1-3平衡二叉树【理解】" class="headerlink" title="1.3平衡二叉树【理解】"></a>1.3平衡二叉树【理解】</h3><ul><li><p>平衡二叉树的特点</p><ul><li>二叉树左右两个子树的<strong>高度差不超过1</strong></li><li><strong>任意节点</strong>的左右两个<strong>子树</strong>都是一颗<strong>平衡二叉树</strong></li></ul></li><li><p>平衡二叉树旋转</p><ul><li><p>旋转触发时机    <strong>破坏了平衡</strong></p><ul><li>当<strong>添加一个节点</strong>之后,该树不再是一颗平衡二叉树</li></ul></li><li><p>左旋</p><ul><li>就是将根节点的右侧往左拉,原先的右子节点变成新的父节点,并把多余的左子节点出让,给已经降级的根节点当右子节点</li></ul></li></ul></li></ul><pre><code>添加一个**12**节点![05_平衡二叉树左旋01](.\05_平衡二叉树左旋01.png)![05_平衡二叉树左旋02](.\05_平衡二叉树左旋02.png)</code></pre><p>  复杂左旋</p><p>  添加<strong>12</strong></p><p>  <img src="/2020/11/12/shujujg/.%5Czx1.png" alt="image-20201107102149442"></p><p>  <strong>拿掉9节点</strong></p><p>  <img src="/2020/11/12/shujujg/.%5Czx2.png" alt="image-20201107102410776"></p><p>  |||||</p><p>  <img src="/2020/11/12/shujujg/.%5Czx3.png" alt="image-20201107102611349"></p><p>  <img src="/2020/11/12/shujujg/.%5Czx4.png" alt="image-20201107102704474"></p><p>  <img src="/2020/11/12/shujujg/.%5Czx5.png" alt="image-20201107102744783"></p><ul><li><p>右旋</p><ul><li><p>就是将根节点的左侧往右拉,左子节点变成了新的父节点,并把多余的右子节点出让,给已经降级根节点当左子节点</p><p><img src="/2020/11/12/shujujg/.%5C06_%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%B3%E6%97%8B01.png" alt="06_平衡二叉树右旋01"></p><p><img src="/2020/11/12/shujujg/.%5C06_%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%B3%E6%97%8B02.png" alt="06_平衡二叉树右旋02"></p></li></ul></li><li><p>平衡二叉树和二叉查找树对比结构图</p><p><img src="/2020/11/12/shujujg/.%5C07_%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E5%AF%B9%E6%AF%94%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="07_平衡二叉树和二叉查找树对比结构图"></p></li><li><p>平衡二叉树旋转的四种情况</p><ul><li><p>左左</p><ul><li><p>左左: 当根节点左子树的左子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 直接对整体进行右旋即可</p><p><img src="/2020/11/12/shujujg/.%5C08_%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B7%A6%E5%B7%A6.png" alt="08_平衡二叉树左左"></p></li></ul></li><li><p>左右</p><ul><li><p>左右: 当根节点左子树的右子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 先在左子树对应的节点位置进行左旋,在对整体进行右旋</p><p><img src="/2020/11/12/shujujg/.%5C09_%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B7%A6%E5%8F%B3.png" alt="09_平衡二叉树左右"></p></li></ul></li><li><p>右右</p><ul><li><p>右右: 当根节点右子树的右子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 直接对整体进行左旋即可</p><p><img src="/2020/11/12/shujujg/.%5C10_%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%B3%E5%8F%B3.png" alt="10_平衡二叉树右右"></p></li></ul></li><li><p>右左</p><ul><li><p>右左:当根节点右子树的左子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 先在右子树对应的节点位置进行右旋,在对整体进行左旋</p><p><img src="/2020/11/12/shujujg/.%5C11_%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%B3%E5%B7%A6.png" alt="11_平衡二叉树右左"></p></li></ul></li></ul></li></ul><h2 id="1-红黑树"><a href="#1-红黑树" class="headerlink" title="1.红黑树"></a>1.红黑树</h2><h3 id="1-1概述【理解】"><a href="#1-1概述【理解】" class="headerlink" title="1.1概述【理解】"></a>1.1概述【理解】</h3><ul><li><p>红黑树的特点</p><ul><li><strong>平衡二叉B树</strong></li><li>每一个节点可以是<strong>红</strong>或者<strong>黑</strong></li><li>红黑树不是高度平衡的,它的平衡是通过”自己的<strong>红黑规则</strong>“进行实现的</li></ul></li><li><p>红黑树的<strong>红黑规则</strong>有哪些</p><ol><li><p>每一个节点或是红色的,或者是黑色的</p></li><li><p><strong>根节点</strong>必须是<strong>黑</strong>色</p></li><li><p>如果一个节点<strong>没有子节点</strong>或者<strong>父</strong>节点,则<strong>该节点</strong>相应的<strong>指针</strong>属性值为<strong>Nil</strong>,这些<strong>Nil</strong>视为叶节点,每个叶节点(Nil)是<strong>黑色</strong>的</p></li><li><p>如果某一个节点是<strong>红色</strong>,那么它的子节点必须是<strong>黑色</strong>(<strong>不能出现两个红色</strong>节点相连 的情况)</p></li><li><p>对每一个节点,从<strong>该节点</strong>到其所有<strong>后代叶节点</strong>的简单<strong>路径</strong>上,均包含<strong>相同数目的黑色节点</strong></p><p>![12_红黑树结构图](E:/上课资料/01 javaSE/day09_集合03/笔记/img/12_红黑树结构图.png)</p></li></ol></li><li><p>红黑树添加节点的默认颜色</p><ul><li><p>添加节点时,默认为红色,效率高</p><p>![13_红黑树添加节点颜色](E:/上课资料/01 javaSE/day09_集合03/笔记/img/13_红黑树添加节点颜色.png)</p></li></ul></li><li><p>红黑树添加节点后如何保持红黑规则</p><ul><li>根节点位置<ul><li>直接变为黑色</li></ul></li><li>非根节点位置<ul><li>父节点为黑色<ul><li>不需要任何操作,默认红色即可</li></ul></li><li>父节点为红色<ul><li>叔叔节点为红色<ol><li>将”父节点”设为黑色,将”叔叔节点”设为黑色</li><li>将”祖父节点”设为红色</li><li>如果”祖父节点”为根节点,则将根节点再次变成黑色</li></ol></li><li>叔叔节点为黑色<ol><li>将”父节点”设为黑色</li><li>将”祖父节点”设为红色</li><li>以”祖父节点”为支点进行旋转</li></ol></li></ul></li></ul></li></ul></li></ul><h3 id="添加黑色节点"><a href="#添加黑色节点" class="headerlink" title="添加黑色节点"></a>添加黑色节点</h3><p><img src="/2020/11/12/shujujg/.%5Chh01.png" alt="image-20201110142039570"></p><p><img src="/2020/11/12/shujujg/.%5Chh02.png" alt="image-20201110142211238"></p><p><img src="/2020/11/12/shujujg/.%5Chh03.png" alt="image-20201110142332133"></p><p><img src="/2020/11/12/shujujg/.%5Chh04.png" alt="image-20201110142414043"></p><h3 id="添加红色节点（效率高）"><a href="#添加红色节点（效率高）" class="headerlink" title="添加红色节点（效率高）"></a>添加红色节点（效率高）</h3><p>一共只需要调整一次 所以添加的效率要更高点</p><p><img src="/2020/11/12/shujujg/.%5Chh04.png" alt="image-20201110142414043"></p><h3 id="添加节点思路"><a href="#添加节点思路" class="headerlink" title="添加节点思路"></a>添加节点思路</h3><p><img src="/2020/11/12/shujujg/.%5Ch01.png" alt="image-20201110142734821"></p><p><img src="/2020/11/12/shujujg/.%5Ch2.png" alt="image-20201110142828938"></p><p><img src="/2020/11/12/shujujg/.%5Ch3.png" alt="image-20201110142914836"></p><p><img src="/2020/11/12/shujujg/.%5Ch4.png" alt="image-20201110143005987"></p><p><img src="/2020/11/12/shujujg/.%5Ch5.png" alt="image-20201110143128714"></p><p>20是根节点 所以不用变成<strong>红色</strong></p><p><img src="/2020/11/12/shujujg/.%5Chx01.png" alt="image-20201110143532153"></p><p><img src="/2020/11/12/shujujg/.%5C001.png" alt="image-20201110143943929"></p><p><img src="/2020/11/12/shujujg/.%5C002.png" alt="image-20201110144007100"></p><p><img src="/2020/11/12/shujujg/.%5C003.png" alt="image-20201110144020937"></p><p><img src="/2020/11/12/shujujg/.%5C004.png" alt="image-20201110144034368"></p><p><img src="/2020/11/12/shujujg/.%5C005.png" alt="image-20201110144121104"></p><p><img src="/2020/11/12/shujujg/.%5C006.png" alt="image-20201110144208117"></p><p><img src="/2020/11/12/shujujg/.%5C007.png" alt="image-20201110144227530"></p><p><img src="/2020/11/12/shujujg/.%5C008.png" alt="image-20201110144303897"></p><h2 id="2-哈希表结构【理解】"><a href="#2-哈希表结构【理解】" class="headerlink" title="2 哈希表结构【理解】"></a>2 哈希表结构【理解】</h2><ul><li><p>JDK1.8以前</p><p>​    数组 + 链表</p><p><img src="/2020/11/12/shujujg/.%5C14_JKD8%E4%BB%A5%E5%89%8D%E5%93%88%E5%B8%8C%E8%A1%A8.png" alt="14_JKD8以前哈希表"></p></li><li><p>JDK1.8以后</p><ul><li><p>节点个数少于等于8个</p><p>​    数组 + 链表</p></li><li><p>节点个数多于8个</p><p>​    数组 + 红黑树</p></li></ul><p><img src="/2020/11/12/shujujg/.%5C15_JKD8%E4%BB%A5%E5%90%8E%E5%93%88%E5%B8%8C%E8%A1%A8.png" alt="15_JKD8以后哈希表"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉树&lt;/h2&gt;&lt;h3 id=&quot;1-1二叉树【理解】&quot;&gt;&lt;a href=&quot;#1-1二叉树【理解】&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>mata标签</title>
    <link href="http://example.com/2020/09/03/html/meta%E6%A0%87%E7%AD%BE%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2020/09/03/html/meta%E6%A0%87%E7%AD%BE%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2020-09-03T04:48:33.000Z</published>
    <updated>2020-12-14T12:08:01.554Z</updated>
    
    <content type="html"><![CDATA[<h3 id="meta标签的应用"><a href="#meta标签的应用" class="headerlink" title="meta标签的应用"></a>meta标签的应用</h3><h4 id="1-声明字符的编码-防止出现乱码"><a href="#1-声明字符的编码-防止出现乱码" class="headerlink" title="1.声明字符的编码**防止出现乱码"></a>1.声明字符的编码**防止出现乱码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-设置无法放大、缩小网页"><a href="#2-设置无法放大、缩小网页" class="headerlink" title="2.设置无法放大、缩小网页"></a>2.设置无法放大、缩小网页</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no,viewport-fit=cover&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-删除默认的苹果工具栏和菜单栏"><a href="#3-删除默认的苹果工具栏和菜单栏" class="headerlink" title="3.删除默认的苹果工具栏和菜单栏"></a>3.删除默认的苹果工具栏和菜单栏</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-capable&quot;</span> <span class="attr">content</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-Edge模式告诉IE以最高级-模式渲染文档，也就是任何IE版本都以当前版本所支持的最高级标准模式渲染，避免版本升级造成的影响。"><a href="#4-Edge模式告诉IE以最高级-模式渲染文档，也就是任何IE版本都以当前版本所支持的最高级标准模式渲染，避免版本升级造成的影响。" class="headerlink" title="4.Edge模式告诉IE以最高级 模式渲染文档，也就是任何IE版本都以当前版本所支持的最高级标准模式渲染，避免版本升级造成的影响。"></a>4.Edge模式告诉IE以最高级 模式渲染文档，也就是任何IE版本都以当前版本所支持的最高级标准模式渲染，避免版本升级造成的影响。</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-禁止默认的将数字识别为可点击的telephone"><a href="#5-禁止默认的将数字识别为可点击的telephone" class="headerlink" title="5.禁止默认的将数字识别为可点击的telephone"></a>5.禁止默认的将数字识别为可点击的telephone</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&#x27;telephone=no&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;format-detection&#x27;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-禁止默认的将数字识别为可点击的telephone"><a href="#6-禁止默认的将数字识别为可点击的telephone" class="headerlink" title="6.禁止默认的将数字识别为可点击的telephone"></a>6.禁止默认的将数字识别为可点击的telephone</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&#x27;email=no&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;format-detection&#x27;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-网站关键词，有助于seo"><a href="#7-网站关键词，有助于seo" class="headerlink" title="7.网站关键词，有助于seo"></a>7.网站关键词，有助于seo</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;keywords&#x27;</span> <span class="attr">content</span>=<span class="string">&quot;&#123;% block keywords %&#125;&#123;% endblock %&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-网站描述，有助于seo"><a href="#8-网站描述，有助于seo" class="headerlink" title="8.网站描述，有助于seo"></a>8.网站描述，有助于seo</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;description&#x27;</span> <span class="attr">content</span>=<span class="string">&quot;&#123;% block description %&#125;&#123;% endblock %&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="9-topic、subject用来告诉搜索引擎你的网站主旨、主题"><a href="#9-topic、subject用来告诉搜索引擎你的网站主旨、主题" class="headerlink" title="9.topic、subject用来告诉搜索引擎你的网站主旨、主题"></a>9.topic、subject用来告诉搜索引擎你的网站主旨、主题</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;topic&quot;</span> <span class="attr">content</span>=<span class="string">&quot;your website&#x27;s topic&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;subject&quot;</span> <span class="attr">content</span>=<span class="string">&quot;your website&#x27;s subject&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="10-copyright用来说明网站版权信息。"><a href="#10-copyright用来说明网站版权信息。" class="headerlink" title="10.copyright用来说明网站版权信息。"></a>10.copyright用来说明网站版权信息。</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;copyright&quot;</span> <span class="attr">content</span>=<span class="string">&quot;XXX&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="11-网站只属于PC电脑端的页面"><a href="#11-网站只属于PC电脑端的页面" class="headerlink" title="11.网站只属于PC电脑端的页面"></a>11.网站只属于PC电脑端的页面</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PC站:<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;applicable-device&quot;</span> <span class="attr">content</span>=<span class="string">&quot;pc&quot;</span>&gt;</span></span><br><span class="line">手机站：<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;applicable-device&quot;</span> <span class="attr">content</span>=<span class="string">&quot;mobile&quot;</span> /&gt;</span></span><br><span class="line">响应式网页可标识：<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;applicable-device&quot;</span><span class="attr">content</span>=<span class="string">&quot;pc,mobile&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="12-用户通过百度移动搜索或者其他bai方式访问站点的PC页（首页或者内容页）时，站点将其自动适配到该PC页面对应的手机页，并为之选择合适的页面版本，前提是你需要做两套网站，一套是在pc端访问的，一套是在手机端访问的。"><a href="#12-用户通过百度移动搜索或者其他bai方式访问站点的PC页（首页或者内容页）时，站点将其自动适配到该PC页面对应的手机页，并为之选择合适的页面版本，前提是你需要做两套网站，一套是在pc端访问的，一套是在手机端访问的。" class="headerlink" title="12.用户通过百度移动搜索或者其他bai方式访问站点的PC页（首页或者内容页）时，站点将其自动适配到该PC页面对应的手机页，并为之选择合适的页面版本，前提是你需要做两套网站，一套是在pc端访问的，一套是在手机端访问的。"></a>12.用户通过百度移动搜索或者其他bai方式访问站点的PC页（首页或者内容页）时，站点将其自动适配到该PC页面对应的手机页，并为之选择合适的页面版本，前提是你需要做两套网站，一套是在pc端访问的，一套是在手机端访问的。</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;mobile-agent&quot;</span> <span class="attr">content</span>=<span class="string">&quot;format=html5;url=&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="13-代表禁止浏览器从本地计算机的缓存中访问页面内容-这样设定，访问者将无法脱机浏览。"><a href="#13-代表禁止浏览器从本地计算机的缓存中访问页面内容-这样设定，访问者将无法脱机浏览。" class="headerlink" title="13.代表禁止浏览器从本地计算机的缓存中访问页面内容,这样设定，访问者将无法脱机浏览。"></a>13.代表禁止浏览器从本地计算机的缓存中访问页面内容,这样设定，访问者将无法脱机浏览。</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;cache-control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;meta标签的应用&quot;&gt;&lt;a href=&quot;#meta标签的应用&quot; class=&quot;headerlink&quot; title=&quot;meta标签的应用&quot;&gt;&lt;/a&gt;meta标签的应用&lt;/h3&gt;&lt;h4 id=&quot;1-声明字符的编码-防止出现乱码&quot;&gt;&lt;a href=&quot;#1-声明字符的编码</summary>
      
    
    
    
    
    <category term="html" scheme="http://example.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令总结</title>
    <link href="http://example.com/2020/06/04/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2020/06/04/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-04T06:44:33.000Z</published>
    <updated>2020-12-14T11:21:30.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux常用命令总结"><a href="#Linux常用命令总结" class="headerlink" title="Linux常用命令总结"></a>Linux常用命令总结</h1><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">暂时关闭防火墙</span></span><br><span class="line">systemctl  stop  firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">永久设置防火墙状态</span></span><br><span class="line">systemctl enable firewalld.service  #打开防火墙永久性生效，重启后不会复原 </span><br><span class="line">systemctl disable firewalld.service #关闭防火墙，永久性生效，重启后不会复原 </span><br></pre></td></tr></table></figure><h2 id="ps显示进程"><a href="#ps显示进程" class="headerlink" title="ps显示进程"></a>ps显示进程</h2><p>显示进程信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ps</span><br><span class="line">ps -u root </span><br><span class="line">//显示root进程用户信息</span><br><span class="line">ps -ef </span><br><span class="line">//显示所有进程信息，连带命令行</span><br><span class="line">ps -ef|grep java </span><br><span class="line">//所有的java所有进程</span><br><span class="line">ps aux|grep java </span><br><span class="line">查看所有包含关键字java的进程，显示详细的运行信息</span><br><span class="line">ps –ef|grep tomcat </span><br><span class="line">查看所有有关tomcat的进程</span><br><span class="line">ps aux </span><br><span class="line">查看所有进程, 显示详细运行信息</span><br><span class="line">kill -9 19979 </span><br><span class="line">终止线程号位19979的进程</span><br><span class="line"></span><br><span class="line">ls -al </span><br><span class="line">查看当前目录文件，包含隐藏文件</span><br><span class="line"></span><br><span class="line">pwd </span><br><span class="line">查看当前所在目录</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查看文件大小"><a href="#查看文件大小" class="headerlink" title="查看文件大小"></a>查看文件大小</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du [选项][文件]</span><br></pre></td></tr></table></figure><blockquote><p>-a或-all 显示目录中个别文件的大小。<br>-b或-bytes 显示目录或文件大小时，以byte为单位。<br>-c或–total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。<br>-k或–kilobytes 以KB(1024bytes)为单位输出。<br>-m或–megabytes 以MB为单位输出。<br>-s或–summarize 仅显示总计，只列出最后加总的值。<br>-h或–human-readable 以K，M，G为单位，提高信息的可读性。<br>-x或–one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。<br>-L&lt;符号链接&gt;或–dereference&lt;符号链接&gt; 显示选项中所指定符号链接的源文件大小。<br>-S或–separate-dirs 显示个别目录的大小时，并不含其子目录的大小。<br>-X&lt;文件&gt;或–exclude-from=&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。<br>–exclude=&lt;目录或文件&gt; 略过指定的目录或文件。<br>-D或–dereference-args 显示指定符号链接的源文件大小。<br>-H或–si 与-h参数相同，但是K，M，G是以1000为换算单位。<br>-l或–count-links 重复计算硬件链接的文件。</p></blockquote><p>常用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh /opt</span><br></pre></td></tr></table></figure><h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h2><p>owenr、group、others三种身份各自有自己的r、w和x</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">修改权限： </span><br><span class="line">chmod 777 file.java</span><br><span class="line">//file.java的权限-rwxrwxrwx，r表示读、w表示写、x表示可执行</span><br><span class="line">r(read 读)、w(write 写)、x(execute 访问</span><br><span class="line">可以使用数字表示权限：</span><br><span class="line"></span><br><span class="line"><span class="meta">r-&gt;</span><span class="bash">4</span></span><br><span class="line"><span class="meta">w-&gt;</span><span class="bash">2</span></span><br><span class="line"><span class="meta">x-&gt;</span><span class="bash">1</span></span><br><span class="line">当文件权限为“rwxrwxrwx”时，分数是：</span><br><span class="line"></span><br><span class="line"><span class="meta">owner-&gt;</span><span class="bash">4+2+1=7</span></span><br><span class="line"></span><br><span class="line"><span class="meta">group-&gt;</span><span class="bash">4+2+1=7</span></span><br><span class="line"></span><br><span class="line"><span class="meta">others-&gt;</span><span class="bash">4+2+1=1</span></span><br><span class="line"></span><br><span class="line">此时文件的权限数字就是777</span><br></pre></td></tr></table></figure><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -tnl | grep 443 （查看443端口是否被占用）</span><br><span class="line">root用户，用netstat -pnl | grep 443 （还可显示出占用本机443端口的进程PID）</span><br></pre></td></tr></table></figure><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><p>java javac <a href="http://www.hollischuang.com/archives/105">jps</a> ,<a href="http://www.hollischuang.com/archives/481">jstat</a> ,<a href="http://www.hollischuang.com/archives/303">jmap</a>, <a href="http://www.hollischuang.com/archives/110">jstack</a></p><p>jps：显示当前所有java进程pid的命令。其他命令往往需要先通过jps命令获取java进程的pid。</p><p>jstat + pid： 用于监控虚拟机各种运行状态信息的命令行工具。他可以显示本地或远程虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据</p><p>jmap + pid：打印java堆相关的各种信息。当服务发生GC问题时，一般会使用jmap工具进行分析。</p><p>jstack + pid：打印Java栈相关各种信息。jstack用于生成java虚拟机当前时刻的线程快照。</p><h2 id="awk处理"><a href="#awk处理" class="headerlink" title="awk处理"></a>awk处理</h2><p>awk就是把文件<strong>逐行的读入</strong>，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p><p>awk是一个强大的<strong>文本分析</strong>工具，相对于grep的查找，sed的编辑，awk在其<strong>对数据分析并生成报告时</strong>，显得尤为强大。</p><p>类比： awk–SQL中的Concat grep–SQL中的Select</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;pattern + action&#125;&#x27;</span> &#123;filenames&#125; <span class="comment">//用法</span></span><br><span class="line">ls | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> <span class="comment">//用|隔开与命令连用</span></span><br><span class="line">last -n <span class="number">5</span> | awk  <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">#awk -F: &#x27;/root/&#x27; /etc/passwd //搜索/etc/passwd文件中有root关键字的所有行</span><br><span class="line"><span class="comment">//root:x:0:0:root:/root:/bin/bash</span></span><br></pre></td></tr></table></figure><p>awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,1 表 示 第 一 个 域 , 1表示第一个域,1表示第一个域,n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。</p><h2 id="sed编辑"><a href="#sed编辑" class="headerlink" title="sed编辑"></a>sed编辑</h2><p>Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。</p><p>Linux sed命令是利用script来处理文本文件。sed可依照script的指令，来处理、编辑文本文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sed -e 4a\newLine testfile <span class="comment">//在文件testfile第四行添加内容newLine</span></span><br><span class="line">nl /etc/passwd | sed <span class="string">&#x27;2d&#x27;</span> <span class="comment">//删除文件第二行</span></span><br><span class="line">nl /etc/passwd | sed <span class="string">&#x27;2,5d&#x27;</span> <span class="comment">//删除第2到5行</span></span><br><span class="line">nl /etc/passwd | sed <span class="string">&#x27;2，$d&#x27;</span> <span class="comment">//删除第2到最后行</span></span><br><span class="line">nl /etc/passwd | sed <span class="string">&#x27;2a drink tea&#x27;</span><span class="comment">//在第二行后添加行</span></span><br><span class="line"><span class="number">12345</span></span><br><span class="line">a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</span><br><span class="line">c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</span><br><span class="line">d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；</span><br><span class="line">i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</span><br><span class="line">p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</span><br><span class="line">s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 <span class="number">1</span>,20s/old/<span class="keyword">new</span>/g 就是啦！</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="grep查找行"><a href="#grep查找行" class="headerlink" title="grep查找行"></a>grep查找行</h2><p>Linux grep命令用于查找文件里符合条件的字符串。</p><p><strong>grep</strong>（global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p><p><code>grep -H &#39;spring&#39; *.xml</code> 查找所以有的包含spring的xml文件</p><p><code>grep &#39;test&#39; d*</code> 显示所有以d开头的文件中包含test的行。</p><p><code>grep &#39;test&#39; aa bb cc</code> 显示在aa，bb，cc文件中匹配test的行。</p><p><code>grep &#39;[a-z]\&#123;5\&#125;&#39; aa</code> 显示所有包含每个字符串至少有5个连续小写字符的字符串的行。</p><h2 id="sort排序"><a href="#sort排序" class="headerlink" title="sort排序"></a>sort排序</h2><p>Linux sort命令用于将文本文件内容加以排序。</p><p>sort可针对文本文件的内容，以行为单位来排序</p><p>按照每行首字母ASCII编码来排序， 汉字也可按照读音字母顺序排序，汉字行排在字母行之后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort mi.txt &#x2F;&#x2F;将mi.txt内容按行首字母的编码次序来排</span><br></pre></td></tr></table></figure><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>提取指定网页</p><ul><li>显示头信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i https://www.baidu.com</span><br></pre></td></tr></table></figure><ul><li>显示通信过程</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v www.baidu.com</span><br></pre></td></tr></table></figure><ul><li>查看议定书</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --trace-ascii output.txt https://www.baidu.com</span><br></pre></td></tr></table></figure><ul><li>查看时间</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --trace-ascii output.txt --trace-time https://www.baidu.com</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">curl http:<span class="comment">//www.linux.com &gt;&gt; linux.html  //使用linux重定向功能保存访问的网页</span></span><br><span class="line"> curl -o linux.html http:<span class="comment">//www.linux.com //使用curl的内置option:-o(小写)保存网页</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>文件下载</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl uri filename --silent|progress</span><br></pre></td></tr></table></figure><ul><li>–silent：不显示进度条</li><li>–progress：显示进度条</li></ul></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># curl https://avatar.csdnimg.cn/3/5/E/1_meituantech_1564971608.jpg -omeituan.jpg --progress</span></span><br></pre></td></tr></table></figure><ul><li>上传文件<br>语法：<code>$ curl --form upload=@localfilename --form press=OK [URL]</code></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># curl --form upload=@baidu.html --form press=OK url</span></span><br></pre></td></tr></table></figure><p>还有诸如代理，cookie等等功能。</p><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>默认是显示文本开头前10行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>显示开头前k行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">head -k &#x2F;etc&#x2F;passwd</span><br><span class="line">head -n k &#x2F;etc&#x2F;passwd（注意和下面的有-的区别）</span><br><span class="line">head -n +k &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>除最后k行外，显示剩余全部内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -n -k &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><table><thead><tr><th>命令格式</th><th>运行结果</th></tr></thead><tbody><tr><td>mv 文件名 文件名</td><td>将源文件名改为目标文件名</td></tr><tr><td>mv 文件名 目录名</td><td>将文件移动到目标目录</td></tr><tr><td>mv 目录名 目录名</td><td>目标目录已存在，将源目录 移动到目标目录；目标 目录不存在则改名</td></tr><tr><td>mv 目录名 文件名</td><td>出错</td></tr></tbody></table><h2 id="查看内核版本"><a href="#查看内核版本" class="headerlink" title="查看内核版本"></a>查看内核版本</h2><p>uname命令用于查看内核版本<br><img src="https://img-blog.csdnimg.cn/20200721133752825.png" alt="在这里插入图片描述"></p><h2 id="查看linux系统ip"><a href="#查看linux系统ip" class="headerlink" title="查看linux系统ip"></a>查看linux系统ip</h2><p>查看linux的ip地址：可以用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><h2 id="查看ip是否被占用"><a href="#查看ip是否被占用" class="headerlink" title="查看ip是否被占用"></a>查看ip是否被占用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:8080</span><br></pre></td></tr></table></figure><h2 id="uptime命令使用"><a href="#uptime命令使用" class="headerlink" title="uptime命令使用"></a>uptime命令使用</h2><p>uptime命令能够打印系统总共运行了多长时间和系统的平均负载。uptime命令可以显示的信息显示依次为：现在时间、系统已经运行了多长时间、目前有多少登陆用户、系统在过去的1分钟、5分钟和15分钟内的平均负载。</p><p>用help参数参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[shared@localhost~]$</span><span class="bash"> uptime --<span class="built_in">help</span></span></span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line"> uptime [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> -p, --pretty   show uptime in pretty format </span><br><span class="line"> -h, --help     display this help and exit </span><br><span class="line"> -s, --since    system up since </span><br><span class="line"> -V, --version  output version information and exit</span><br><span class="line"></span><br><span class="line">For more details see uptime(1).</span><br><span class="line"><span class="meta">[shared@localhost~]$</span><span class="bash"> uptime -V</span></span><br><span class="line">uptime from procps-ng 3.3.10</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Options:</p><ul><li>-p, –pretty show uptime in pretty format //比较美观的打印</li><li>-h, –help display this help and exit // 查看参数帮助</li><li>-s, –since system up since // 查看系统当前时间</li><li>-V, –version output version information and exit // 查看版本</li></ul><p><img src="https://img-blog.csdnimg.cn/20200721131423692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ0MjczOTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="telnet命令使用"><a href="#telnet命令使用" class="headerlink" title="telnet命令使用"></a>telnet命令使用</h2><p>不管在window还是linux系统要校验某台服务器是否可以ping通，都可以使用命令，如果要加上断口的，linux可以使用telnet命令<br><code>语法：telnet ip port</code>                      </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 127.0.0.1 8080</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux常用命令总结&quot;&gt;&lt;a href=&quot;#Linux常用命令总结&quot; class=&quot;headerlink&quot; title=&quot;Linux常用命令总结&quot;&gt;&lt;/a&gt;Linux常用命令总结&lt;/h1&gt;&lt;h2 id=&quot;关闭防火墙&quot;&gt;&lt;a href=&quot;#关闭防火墙&quot; class</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>vue</title>
    <link href="http://example.com/2020/05/14/vue/vue%E7%9A%84%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/"/>
    <id>http://example.com/2020/05/14/vue/vue%E7%9A%84%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/</id>
    <published>2020-05-14T00:53:33.000Z</published>
    <updated>2020-12-14T12:05:08.705Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue的异步请求"><a href="#vue的异步请求" class="headerlink" title="vue的异步请求"></a>vue的异步请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">&quot;#div&quot;</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            name:<span class="string">&quot;张三&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            <span class="function"><span class="title">send</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">// GET方式请求</span></span><br><span class="line">                <span class="comment">// axios.get(&quot;testServlet?name=&quot; + this.name)</span></span><br><span class="line">                <span class="comment">//     .then(resp =&gt; &#123;</span></span><br><span class="line">                <span class="comment">//         alert(resp.data);</span></span><br><span class="line">                <span class="comment">//     &#125;)</span></span><br><span class="line">                <span class="comment">//     .catch(error =&gt; &#123;</span></span><br><span class="line">                <span class="comment">//         alert(error);</span></span><br><span class="line">                <span class="comment">//     &#125;)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// POST方式请求</span></span><br><span class="line">                axios.post(<span class="string">&quot;testServlet&quot;</span>,<span class="string">&quot;name=&quot;</span>+<span class="built_in">this</span>.name)</span><br><span class="line">                    .then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span><br><span class="line">                        alert(resp.data);</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                        alert(error);</span><br><span class="line">                    &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;vue的异步请求&quot;&gt;&lt;a href=&quot;#vue的异步请求&quot; class=&quot;headerlink&quot; title=&quot;vue的异步请求&quot;&gt;&lt;/a&gt;vue的异步请求&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>微服务网关Gateway</title>
    <link href="http://example.com/2020/05/07/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%89%B4%E6%9D%83/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%89%B4%E6%9D%83JWT/"/>
    <id>http://example.com/2020/05/07/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%89%B4%E6%9D%83/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%89%B4%E6%9D%83JWT/</id>
    <published>2020-05-07T05:49:00.000Z</published>
    <updated>2020-12-14T12:19:20.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h2><h3 id="1-1-微服务网关概述"><a href="#1-1-微服务网关概述" class="headerlink" title="1.1 微服务网关概述"></a>1.1 微服务网关概述</h3><p>​    不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信，会有以下的问题：</p><ul><li>客户端会多次<strong>请求不同的微服务</strong>，增加了客户端的复杂性</li><li>存在<strong>跨域</strong>请求，在一定场景下处理相对复杂</li><li><strong>认证复杂</strong>，每个服务都需要独立认证</li><li><strong>难以重构</strong>，随着项目的迭代，可能需要重新划分微服务。例如，可能将多个服务合并成一个或者将一个服务拆分成多个。如果客户端直接与微服务通信，那么重构将会很难实施</li></ul><p>以上这些问题可以借助网关解决。</p><p>网关是介于<strong>客户端</strong>和<strong>服务器</strong>端之间的<strong>中间层</strong>，所有的外部请求都会先经过 网关这一层。也就是说，API 的实现方面更多的考虑业务逻辑，而安全、性能、监控可以交由 网关来做，这样既提高业务灵活性又不缺安全性，典型的架构图如图所示：</p><p><img src="images/1557824391432.png" alt="1557824391432"></p><p><strong>优点：</strong></p><ul><li><strong>安全</strong> ，只有网关系统对外进行暴露，微服务可以隐藏在内网，通过防火墙保护。</li><li><strong>易于监控</strong>。可以在网关收集监控数据并将其推送到外部系统进行分析。</li><li>易于<strong>统一认证授权</strong>。可以在网关上进行认证，然后再将请求转发到后端的微服务，而无须在每个微服务中进行认证。</li><li>减少了<strong>客户端与各个微服务</strong>之间的<strong>交互</strong>次数</li></ul><p>总结：微服务网关就是一个系统，通过暴露该微服务网关系统，方便我们进行相关的鉴权，安全控制，日志统一处理，易于监控的相关功能。</p><p>实现微服务网关的技术有很多，</p><ul><li>nginx  Nginx (engine x) 是一个高性能的<a href="https://baike.baidu.com/item/HTTP">HTTP</a>和<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488">反向代理</a>web服务器，同时也提供了IMAP/POP3/SMTP服务</li><li>zuul ,Zuul 是 Netflix 出品的一个基于 JVM 路由和服务端的负载均衡器。</li><li>spring-cloud-gateway, 是spring 出品的 基于spring 的网关项目，集成断路器，路径重写，性能比Zuul好。</li></ul><p>我们使用gateway这个网关技术，无缝衔接到基于spring cloud的微服务开发中来。</p><p>gateway官网：</p><p><a href="https://spring.io/projects/spring-cloud-gateway">https://spring.io/projects/spring-cloud-gateway</a></p><h3 id="1-2-微服务网关微服务搭建"><a href="#1-2-微服务网关微服务搭建" class="headerlink" title="1.2 微服务网关微服务搭建"></a>1.2 微服务网关微服务搭建</h3><p>​    由于我们开发的系统 有包括前台系统和后台系统，后台的系统给管理员使用。那么也需要调用各种微服务，所以我们针对管理后台搭建一个网关微服务。分析如下：</p><p><img src="images/4-1.png" alt="1557825607685"></p><p><strong>搭建步骤：</strong></p><p><img src="/2020/05/07/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%89%B4%E6%9D%83/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%89%B4%E6%9D%83JWT/images%5Cimage111.png" alt="image-20201205200402289"></p><p>（1）在yigou_gateway工程中，创建yigou_gateway_system工程，pom.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）创建包com.yigou.system, 创建引导类：GatewayApplication</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）在resources下创建application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sysgateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">goods</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://goods</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/goods/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">StripPrefix=</span> <span class="number">1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">system</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://system</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/system/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">StripPrefix=</span> <span class="number">1</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9101</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:6868/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><p>uri: lb://goods</p><p>  会根据lb的动态路由协议 动态的找到goods的服务</p></li><li><p>StripPrefix= 1</p><p>  会忽略掉第一个斜线后面的值</p></li><li><p>Path=/goods/**</p><p>  匹配的路径</p></li></ul><p>参考官方手册：</p><p><a href="https://cloud.spring.io/spring-cloud-gateway/spring-cloud-gateway.html#_stripprefix_gatewayfilter_factory">https://cloud.spring.io/spring-cloud-gateway/spring-cloud-gateway.html#_stripprefix_gatewayfilter_factory</a></p><h3 id="1-3-微服务网关跨域"><a href="#1-3-微服务网关跨域" class="headerlink" title="1.3 微服务网关跨域"></a>1.3 微服务网关跨域</h3><p>修改application.yml  ,在spring.cloud.gateway节点添加配置，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">globalcors:</span></span><br><span class="line">  <span class="attr">cors-configurations:</span></span><br><span class="line">    <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span> <span class="comment"># 匹配所有请求</span></span><br><span class="line">      <span class="attr">allowedOrigins:</span> <span class="string">&quot;*&quot;</span> <span class="comment">#跨域处理 允许所有的域</span></span><br><span class="line">      <span class="attr">allowedMethods:</span> <span class="comment"># 支持的方法</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GET</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POST</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUT</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DELETE</span></span><br></pre></td></tr></table></figure><p>最终配置文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sysgateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解决跨域的问题</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">cors-configurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span> <span class="comment"># 匹配所有请求</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="string">&quot;*&quot;</span> <span class="comment">#跨域处理 允许所有的域</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 支持的方法</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">GET</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">POST</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PUT</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">DELETE</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">goods</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://goods</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/goods/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">StripPrefix=</span> <span class="number">1</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9101</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:6868/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="1-4-微服务网关过滤器"><a href="#1-4-微服务网关过滤器" class="headerlink" title="1.4 微服务网关过滤器"></a>1.4 微服务网关过滤器</h3><p>我们可以通过网关过滤器，实现一些逻辑的处理，比如ip黑白名单拦截、特定地址的拦截等。下面的代码中做了两个过滤器，并且设定的先后顺序，只演示过滤器与运行效果。</p><p>（1）yigou_gateway_system创建IpFilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取客户端的访问ip</span></span><br><span class="line">        System.out.println(<span class="string">&quot;经过第1个过滤器IpFilter&quot;</span>);</span><br><span class="line">        ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">        InetSocketAddress remoteAddress = request.getRemoteAddress();</span><br><span class="line">        System.out.println(<span class="string">&quot;ip:&quot;</span>+remoteAddress.getHostName());</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);<span class="comment">//放行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>filter(ServerWebExchange exchange, GatewayFilterChain chain)   方法里面要执行的都是一些具体的逻辑</p><p>getOrder() 定义执行的优先级  <strong>值越小</strong> 执行的优先级就越高</p><p>（2）yigou_gateway_system创建UrlFilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取客户端的访问url</span></span><br><span class="line">        System.out.println(<span class="string">&quot;经过第2个过滤器UrlFilter&quot;</span>);</span><br><span class="line">        ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">        String url = request.getURI().getPath();</span><br><span class="line">        System.out.println(<span class="string">&quot;url:&quot;</span>+url);</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，观察控制台输出。</p><h2 id="2-网关限流"><a href="#2-网关限流" class="headerlink" title="2 网关限流"></a>2 网关限流</h2><p>​    我们之前说过，网关可以做很多的事情，比如，限流，当我们的系统被频繁的请求的时候，就有可能将系统压垮，所以为了解决这个问题，需要在每一个微服务中做限流操作，但是如果有了网关，那么就可以在网关系统做限流，因为所有的请求都需要先通过网关系统才能路由到微服务中。</p><h3 id="2-1-思路分析"><a href="#2-1-思路分析" class="headerlink" title="2.1 思路分析"></a>2.1 思路分析</h3><p><img src="images/1557909861570.png" alt="1557909861570"></p><h3 id="2-2-令牌桶算法"><a href="#2-2-令牌桶算法" class="headerlink" title="2.2 令牌桶算法"></a>2.2 令牌桶算法</h3><p>令牌桶算法是比较常见的限流算法之一，大概描述如下：<br>1）所有的请求在处理之前都需要拿到一个可用的令牌才会被处理；<br>2）根据限流大小，设置按照一定的速率往桶里添加令牌；<br>3）桶设置最大的放置令牌限制，当桶满时、新添加的令牌就被丢弃或者拒绝；<br>4）请求达到后首先要获取令牌桶中的令牌，拿着令牌才可以进行其他的业务逻辑，处理完业务逻辑之后，将令牌直接删除；<br>5）令牌桶有最低限额，当桶中的令牌达到最低限额的时候，请求处理完之后将不会删除令牌，以此保证足够的限流</p><p>如下图：</p><p><img src="images/1557910299016.png" alt="1557910299016"></p><p>这个算法的实现，有很多技术，Guava(读音: 瓜哇)是其中之一，redis客户端也有其实现。</p><h3 id="2-3-网关限流代码实现"><a href="#2-3-网关限流代码实现" class="headerlink" title="2.3 网关限流代码实现"></a>2.3 网关限流代码实现</h3><p>需求：每个ip地址1秒内只能发送1次请求，多出来的请求返回429错误。</p><p>代码实现：</p><p>（1）spring cloud gateway 默认使用<strong>redis的RateLimter限流算法</strong>来实现。所以我们要使用首先需要引入redis的依赖   </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）定义KeyResolver</p><p>在<strong>GatewayApplicatioin引导类</strong>中添加如下代码，KeyResolver用于计算某一个类型的限流的KEY也就是说，可以通过<strong>KeyResolver</strong>来指定限流的Key。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个KeyResolver</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> KeyResolver <span class="title">ipKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> KeyResolver() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">resolve</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Mono.just(exchange.getRequest().getRemoteAddress().getHostName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>just 限制</p><p>exchange.getRequest().getRemoteAddress().getHostName() 获取到客户端的访问IP</p><p>（3）修改application.yml中配置项，指定限制流量的配置以及配置Redis，</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span> <span class="comment">#请求数限流 名字不能随便写 </span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@ipKeyResolver&#125;&quot;</span> <span class="comment">#引用刚才我们在启动类下面声明的bean</span></span><br><span class="line">      <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">1</span> <span class="comment">#令牌桶每秒填充平均速率 每秒声明1个</span></span><br><span class="line">      <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">1</span> <span class="comment">#令牌桶总容量</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">        <span class="comment"># 配置Redis 127.0.0.1可以省略配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><p>修改后最终配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sysgateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">cors-configurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span> <span class="comment"># 匹配所有请求</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="string">&quot;*&quot;</span> <span class="comment">#跨域处理 允许所有的域</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 支持的方法</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">GET</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">POST</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PUT</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">DELETE</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">goods</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://goods</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/goods/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">StripPrefix=</span> <span class="number">1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span> <span class="comment">#请求数限流 名字不能随便写 </span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@ipKeyResolver&#125;&quot;</span></span><br><span class="line">            <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">1</span> <span class="comment">#令牌桶每秒填充平均速率</span></span><br><span class="line">            <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">1</span> <span class="comment">#令牌桶总容量</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">system</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://system</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/system/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">StripPrefix=</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># 配置Redis 127.0.0.1可以省略配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9101</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:6868/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>burstCapacity：令牌桶总容量。</li><li>replenishRate：令牌桶每秒填充平均速率。</li><li>key-resolver：用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象。</li></ul><p>通过在<code>replenishRate</code>和中设置相同的值来实现稳定的速率<code>burstCapacity</code>。设置<code>burstCapacity</code>高于时，可以允许临时突发<code>replenishRate</code>。在这种情况下，需要在突发之间允许速率限制器一段时间（根据<code>replenishRate</code>），因为2次连续突发将导致请求被丢弃（<code>HTTP 429 - Too Many Requests</code>）</p><p> key-resolver: “#{@userKeyResolver}” 用于通过SPEL表达式来指定使用哪一个KeyResolver.</p><p>如上配置：</p><p>表示 一秒内，允许 一个请求通过，令牌桶的填充速率也是一秒钟添加一个令牌。</p><p>最大突发状况 也只允许 一秒内有一次请求，可以根据业务来调整 。</p><p>（4）测试</p><p>启动redis </p><p>启动注册中心</p><p>启动商品微服务</p><p>启动gateway网关</p><p>打开浏览器  <a href="http://localhost:9101/goods/brand">http://localhost:9101/goods/brand</a></p><p>快速刷新，当1秒内发送多次请求，就会返回429错误。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Gateway&quot;&gt;&lt;a href=&quot;#Gateway&quot; class=&quot;headerlink&quot; title=&quot;Gateway&quot;&gt;&lt;/a&gt;Gateway&lt;/h2&gt;&lt;h3 id=&quot;1-1-微服务网关概述&quot;&gt;&lt;a href=&quot;#1-1-微服务网关概述&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="Gateway" scheme="http://example.com/tags/Gateway/"/>
    
  </entry>
  
  <entry>
    <title>Thymeleaf</title>
    <link href="http://example.com/2020/05/04/thymeleaf/Thymeleaf/"/>
    <id>http://example.com/2020/05/04/thymeleaf/Thymeleaf/</id>
    <published>2020-05-04T04:49:38.000Z</published>
    <updated>2020-12-14T12:15:13.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>Thymeleaf的介绍   si mei li fu</li><li>Thymeleaf的入门</li><li>Thymeleaf的语法及标签</li><li>搜索页面渲染</li><li>商品详情页静态化功能实现</li></ul><h2 id="1-Thymeleaf介绍"><a href="#1-Thymeleaf介绍" class="headerlink" title="1.Thymeleaf介绍"></a>1.Thymeleaf介绍</h2><p>​    thymeleaf是一个XML/XHTML/HTML5模板引擎，可用于Web与非Web环境中的应用开发。它是一个开源的Java库，基于Apache License 2.0许可，由Daniel Fernández创建，该作者还是Java加密库Jasypt的作者。</p><p>Thymeleaf提供了一个用于整合Spring MVC的可选模块，在应用开发中，你可以使用Thymeleaf来完全代替JSP或其他模板引擎，如Velocity、FreeMarker等。Thymeleaf的主要目标在于提供一种可被浏览器正确显示的、格式良好的模板创建方式，因此也可以用作静态建模。你可以使用它创建经过验证的XML与HTML模板。相对于编写逻辑或代码，开发者只需将标签属性添加到模板中即可。接下来，这些标签属性就会在DOM（文档对象模型）上执行预先制定好的逻辑。</p><p>它的特点便是：开箱即用，Thymeleaf允许您处理六种模板，每种模板称为模板模式：</p><ul><li>XML</li><li>有效的XML</li><li>XHTML</li><li>有效的XHTML</li><li>HTML5</li><li>旧版HTML5</li></ul><p>所有这些模式都指的是格式良好的XML文件，但<em>Legacy HTML5</em>模式除外，它允许您处理HTML5文件，其中包含独立（非关闭）标记，没有值的标记属性或不在引号之间写入的标记属性。为了在这种特定模式下处理文件，Thymeleaf将首先执行转换，将您的文件转换为格式良好的XML文件，这些文件仍然是完全有效的HTML5（实际上是创建HTML5代码的推荐方法）<a href="https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html#fn1">1</a>。</p><p>另请注意，验证仅适用于XML和XHTML模板。</p><p>然而，这些并不是Thymeleaf可以处理的唯一模板类型，并且用户始终能够通过指定在此模式下<em>解析</em>模板的方法和<em>编写</em>结果的方式来定义他/她自己的模式。这样，任何可以建模为DOM树（无论是否为XML）的东西都可以被Thymeleaf有效地作为模板处理。</p><p><strong>应用场景:</strong></p><p><strong>对于一些不经常发生改变  并且被频繁访问的页面  我们就可以使用Thymeleaf模板引擎技术</strong></p><p>好处:</p><ul><li><strong>加快当前用户的响应速度</strong></li><li><strong>减轻服务端的访问压力</strong></li></ul><h2 id="2-Springboot整合thymeleaf"><a href="#2-Springboot整合thymeleaf" class="headerlink" title="2.Springboot整合thymeleaf"></a>2.Springboot整合thymeleaf</h2><p>使用springboot 来集成使用Thymeleaf可以大大减少单纯使用thymleaf的代码量，所以我们接下来使用springboot集成使用thymeleaf.</p><p>实现的步骤为：</p><ul><li>创建一个sprinboot项目</li><li>添加thymeleaf的起步依赖</li><li>添加spring web的起步依赖</li><li>编写html 使用thymeleaf的语法获取变量对应后台传递的值</li><li>编写controller 设置变量的值到model中</li></ul><p>(1)创建工程</p><p>创建一个独立的工程springboot-thymeleaf,该工程为案例工程，不需要放到changgou工程中。</p><p><strong>pom.xml依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--thymeleaf配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(2)创建包com.itheima.thymeleaf.并创建启动类ThymeleafApplication</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ThymeleafApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)创建application.yml</p><p>设置thymeleaf的缓存设置，设置为false。默认加缓存的，用于测试。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>(4)控制层</p><p>创建controller用于测试后台 设置数据到model中。</p><p>创建com.itheima.controller.TestController，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 访问/test/hello  跳转到demo1页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;hello welcome&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;demo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)创建html</p><p>在resources中创建templates目录，在templates目录创建 demo.html,代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Thymeleaf的入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--输出hello数据--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;hello&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解释：</p><p><code>&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code>:这句声明使用thymeleaf标签</p><p><code>&lt;p th:text=&quot;$&#123;hello&#125;&quot;&gt;&lt;/p&gt;</code>:这句使用 th:text=”${变量名}” 表示 使用thymeleaf获取文本数据，类似于EL表达式。</p><p>(5)测试</p><p>启动系统，并在浏览器访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;test&#x2F;hello</span><br></pre></td></tr></table></figure><p><img src="images/1560936996326.png" alt="1560936996326"></p><h2 id="3-Thymeleaf基本语法"><a href="#3-Thymeleaf基本语法" class="headerlink" title="3 Thymeleaf基本语法"></a>3 Thymeleaf基本语法</h2><p>(1)th:action</p><p>定义后台控制器路径，类似<code>&lt;form&gt;</code>标签的action属性。 </p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/test/hello&#125;&quot;</span> &gt;</span>    <span class="comment">&lt;!--@&#123;...&#125; 链接url表达式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">th:name</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(2)th:each</p><p>对象遍历，功能类似jstl中的<code>&lt;c:forEach&gt;</code>标签。 </p><p>创建com.itheima.model.User,代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//..get..set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller添加数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 访问/test/hello  跳转到demo1页面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;hello welcome&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//集合数据</span></span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;深圳&quot;</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="number">2</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;北京&quot;</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="number">3</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;武汉&quot;</span>));</span><br><span class="line">    model.addAttribute(<span class="string">&quot;users&quot;</span>,users);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;demo1&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>住址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user,userStat:$&#123;users&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            下标:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userStat.index&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.address&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试效果</p><p><img src="images/1560941932553.png" alt="1560941932553"></p><p>(3)Map输出</p><p>后台添加Map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Map定义</span></span><br><span class="line">Map&lt;String,Object&gt; dataMap = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">dataMap.put(<span class="string">&quot;No&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">dataMap.put(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">model.addAttribute(<span class="string">&quot;dataMap&quot;</span>,dataMap);</span><br></pre></td></tr></table></figure><p>页面输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;map,mapStat:$&#123;dataMap&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;map&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    key:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;mapStat.current.key&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    value:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;mapStat.current.value&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    ==============================================</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试效果</p><p><img src="images/1560942024009.png" alt="1560942024009"></p><p>(4)数组输出</p><p>后台添加数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储一个数组</span></span><br><span class="line">String[] names = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>&#125;;</span><br><span class="line">model.addAttribute(<span class="string">&quot;names&quot;</span>,names);</span><br></pre></td></tr></table></figure><p>页面输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;nm,nmStat:$&#123;names&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;nmStat.count&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;nm&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    ==============================================</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试效果</p><p><img src="images/1560942589016.png" alt="1560942589016"></p><p>(5)Date输出</p><p>后台添加日期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日期</span></span><br><span class="line">model.addAttribute(<span class="string">&quot;now&quot;</span>,<span class="keyword">new</span> Date());</span><br></pre></td></tr></table></figure><p>页面输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span th:text&#x3D;&quot;$&#123;#dates.format(now,&#39;yyyy-MM-dd hh:ss:mm&#39;)&#125;&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>测试效果</p><p><img src="images/1560942631925.png" alt="1560942631925"></p><p>(6)th:if条件</p><p>后台添加年龄</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if条件</span></span><br><span class="line">model.addAttribute(<span class="string">&quot;age&quot;</span>,<span class="number">22</span>);</span><br></pre></td></tr></table></figure><p>页面输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;(age&gt;=18)&#125;&quot;</span>&gt;</span>终于长大了！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试效果</p><p><img src="images/1560942782470.png" alt="1560942782470"></p><p>(7)th:fragment 定义一个模块</p><p>可以定义一个独立的模块，创建一个footer.html代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=charset=utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>fragment<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;C&quot;</span> <span class="attr">th:fragment</span>=<span class="string">&quot;copy&quot;</span> &gt;</span></span><br><span class="line">    关于我们<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(8)th:include</p><p>可以直接引入<code>th:fragment</code>,在demo1.html中引入如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;A&quot;</span> <span class="attr">th:include</span>=<span class="string">&quot;footer::copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="images/1560943006665.png" alt="1560943006665"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Thymeleaf&quot;&gt;&lt;a href=&quot;#Thymeleaf&quot; class=&quot;headerlink&quot; title=&quot;Thymeleaf&quot;&gt;&lt;/a&gt;Thymeleaf&lt;/h1&gt;&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="页面静态化技术" scheme="http://example.com/tags/%E9%A1%B5%E9%9D%A2%E9%9D%99%E6%80%81%E5%8C%96%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>TKMybatis</title>
    <link href="http://example.com/2020/05/04/tkmapper/TKMybatis/"/>
    <id>http://example.com/2020/05/04/tkmapper/TKMybatis/</id>
    <published>2020-05-04T04:49:38.000Z</published>
    <updated>2020-12-14T12:16:15.996Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-启动类"><a href="#1-启动类" class="headerlink" title="1.启动类"></a>1.启动类</h3><p>创建包com.changgou.goods 包下创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;dao&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GoodsApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>注意：@MapperScan是tk.mybatis.spring.annotation包下的，用于扫描Mapper接口</em></strong> </p><h2 id><a href="#" class="headerlink" title></a></h2><h3 id="2-表结构分析"><a href="#2-表结构分析" class="headerlink" title="2 表结构分析"></a>2 表结构分析</h3><p>tb_brand表</p><table><thead><tr><th>字段名称</th><th>字段含义</th><th>字段类型</th><th>字段长度</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>品牌id</td><td>INT</td><td></td><td></td></tr><tr><td>name</td><td>品牌名称</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>image</td><td>品牌图片地址</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>letter</td><td>品牌的首字母</td><td>CHAR</td><td></td><td></td></tr><tr><td>seq</td><td>排序</td><td>INT</td><td></td><td></td></tr></tbody></table><h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3 代码实现"></a>3 代码实现</h3><h4 id="3-1-findAll"><a href="#3-1-findAll" class="headerlink" title="3.1 findAll()"></a>3.1 findAll()</h4><p>（1）创建pojo包，包下创建Brand实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table(name=&quot;tb_brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Brand</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="keyword">private</span> Integer id;<span class="comment">//品牌id</span></span><br><span class="line"><span class="keyword">private</span> String name;<span class="comment">//品牌名称</span></span><br><span class="line"><span class="keyword">private</span> String image;<span class="comment">//品牌图片地址</span></span><br><span class="line"><span class="keyword">private</span> String letter;<span class="comment">//品牌的首字母</span></span><br><span class="line"><span class="keyword">private</span> Integer seq;<span class="comment">//排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getter and setter  .....(省略)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>implements Serializable 实现序列化</p><p>@Table和@Id都是JPA注解，</p><p>@Table用于配置表与实体类的映射关系，</p><p>@Id用于标识主键属性。</p><p>（2）Dao创建</p><p>创建dao.BrandMapper接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Brand</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>继承了Mapper接口，</strong>就自动实现了增删改查的常用方法。</p><p>（3）业务层</p><p>创建service.BrandService接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 查询所有品牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span>  List&lt;Brand&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建service.impl包，包下创建服务实现类 BrandServiceImpl，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrandServiceImpl</span> <span class="keyword">implements</span> <span class="title">BrandService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandMapper brandMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Brand&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brandMapper.selectAll();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）控制层</p><p>控制层  com.changgou.goods包下创建controller包  ，包下创建类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrandController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandService brandService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Brand&gt; brandList = brandService.findAll();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK,<span class="string">&quot;查询成功&quot;</span>,brandList) ;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-根据ID查询"><a href="#3-2-根据ID查询" class="headerlink" title="3.2 根据ID查询"></a>3.2 根据ID查询</h4><p>（1） 业务层接口</p><p>修改service.BrandService接口，添加根据ID查询品牌数据方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据ID查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Brand <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><p>（2）业务层实现</p><p>修改service.impl.BrandServiceImpl新增方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据ID查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Brand <span class="title">findById</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  brandMapper.selectByPrimaryKey(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3） 控制层</p><p>BrandController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 根据ID查询品牌数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>&#123;</span><br><span class="line">    Brand brand = brandService.findById(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;查询成功&quot;</span>,brand);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-新增"><a href="#3-3-新增" class="headerlink" title="3.3 新增"></a>3.3 新增</h4><p>（1）业务层接口    修改service.BrandService，新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 新增品牌</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Brand brand)</span></span>;</span><br></pre></td></tr></table></figure><p>（2）业务层实现  修改service.impl.BrandServiceImpl，新增增加品牌方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 增加</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Brand brand)</span></span>&#123;</span><br><span class="line">    brandMapper.insertSelective(brand);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）控制层    BrandController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 新增品牌数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">add</span><span class="params">(<span class="meta">@RequestBody</span> Brand brand)</span></span>&#123;</span><br><span class="line">    brandService.add(brand);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-修改"><a href="#3-4-修改" class="headerlink" title="3.4 修改"></a>3.4 修改</h4><p>（1） 业务层接口</p><p>需改service.BrandService,添加修改品牌方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 修改品牌数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Brand brand)</span></span>;</span><br></pre></td></tr></table></figure><p>（2）业务层实现   修改service.impl.BrandServiceImpl，添加修改品牌方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Brand brand)</span></span>&#123;</span><br><span class="line">    brandMapper.updateByPrimaryKeySelective(brand);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）控制层</p><p>BrandController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 修改品牌数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping(value=&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> Brand brand,<span class="meta">@PathVariable</span> Integer id)</span></span>&#123;</span><br><span class="line">    brand.setId(id);</span><br><span class="line">    brandService.update(brand);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-删除"><a href="#3-5-删除" class="headerlink" title="3.5 删除"></a>3.5 删除</h4><p>（1）业务层接口</p><p>修改service.BrandService，添加删除品牌方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 删除品牌</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><p>（2）业务层实现  修改service.impl.BrandServiceImpl，新增删除品牌方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">    brandMapper.deleteByPrimaryKey(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）控制层  BrandController新增方法  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 根据ID删除品牌数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping(value = &quot;/&#123;id&#125;&quot; )</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>&#123;</span><br><span class="line">    brandService.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6-条件查询"><a href="#3-6-条件查询" class="headerlink" title="3.6 条件查询"></a>3.6 条件查询</h4><p>（1） 业务层接口</p><p>修改service.BrandService，增加根据条件搜索品牌方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 多条件搜索品牌方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> searchMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Brand&gt; <span class="title">findList</span><span class="params">(Map&lt;String, Object&gt; searchMap)</span></span>;</span><br></pre></td></tr></table></figure><p>（2）业务层实现  修改service.impl.BrandServiceImpl，添加根据多条件搜索品牌方法的实现，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 条件查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> searchMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Brand&gt; <span class="title">findList</span><span class="params">(Map&lt;String, Object&gt; searchMap)</span></span>&#123;</span><br><span class="line">Example example=<span class="keyword">new</span> Example(Brand.class);</span><br><span class="line">    Example.Criteria criteria = example.createCriteria();</span><br><span class="line"><span class="keyword">if</span>(searchMap!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">// 品牌名称</span></span><br><span class="line"><span class="keyword">if</span>(searchMap.get(<span class="string">&quot;name&quot;</span>)!=<span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(searchMap.get(<span class="string">&quot;name&quot;</span>)))&#123;</span><br><span class="line">criteria.andLike(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;%&quot;</span>+searchMap.get(<span class="string">&quot;name&quot;</span>)+<span class="string">&quot;%&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 品牌的首字母</span></span><br><span class="line"><span class="keyword">if</span>(searchMap.get(<span class="string">&quot;letter&quot;</span>)!=<span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(searchMap.get(<span class="string">&quot;letter&quot;</span>)))&#123;</span><br><span class="line">criteria.andEqualTo(<span class="string">&quot;letter&quot;</span>,searchMap.get(<span class="string">&quot;letter&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> brandMapper.selectByExample(example);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3） 控制层   BrandController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 多条件搜索品牌数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> searchMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/search&quot; )</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">findList</span><span class="params">(<span class="meta">@RequestParam</span> Map searchMap)</span></span>&#123;</span><br><span class="line">List&lt;Brand&gt; list = brandService.findList(searchMap);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;查询成功&quot;</span>,list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：Get请求：localhost:9011/brand/search?letter=C&amp;name=传智</strong></p><h4 id="3-7-列表分页查询"><a href="#3-7-列表分页查询" class="headerlink" title="3.7 列表分页查询"></a>3.7 列表分页查询</h4><p>（1） 业务层接口  修改service.BrandService添加分页方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Brand&gt; <span class="title">findPage</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure><p>（2）业务层实现  修改service.impl.BrandServiceImpl添加分页方法实现，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Brand&gt; <span class="title">findPage</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    PageHelper.startPage(page,size);</span><br><span class="line">    <span class="keyword">return</span> (Page&lt;Brand&gt;)brandMapper.selectAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3） 控制层 BrandController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 分页搜索实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/search/&#123;page&#125;/&#123;size&#125;&quot; )</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">findPage</span><span class="params">(<span class="meta">@PathVariable</span>  <span class="keyword">int</span> page, <span class="meta">@PathVariable</span>  <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">Page&lt;Brand&gt; pageList = brandService.findPage(page, size);</span><br><span class="line">PageResult pageResult=<span class="keyword">new</span> PageResult(pageList.getTotal(),pageList.getResult());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;查询成功&quot;</span>,pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：Get请求：localhost:9011/brand/search/1/3</strong></p><h4 id="3-8-列表条件-分页查询"><a href="#3-8-列表条件-分页查询" class="headerlink" title="3.8 列表条件+分页查询"></a>3.8 列表条件+分页查询</h4><p>（1） 业务层接口  修改service.BrandService，增加多条件分页查询方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 多条件分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> searchMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Page&lt;Brand&gt; <span class="title">findPage</span><span class="params">(Map&lt;String, Object&gt; searchMap, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure><p>（2）业务层实现  修改service.impl.BrandServiceImpl，添加多条件分页查询方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 条件+分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchMap 查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size 页大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Brand&gt; <span class="title">findPage</span><span class="params">(Map&lt;String,Object&gt; searchMap, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    PageHelper.startPage(page,size);</span><br><span class="line">    Example example=<span class="keyword">new</span> Example(Brand.class);</span><br><span class="line">    Example.Criteria criteria = example.createCriteria();</span><br><span class="line">    <span class="keyword">if</span>(searchMap!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 品牌名称</span></span><br><span class="line">        <span class="keyword">if</span>(searchMap.get(<span class="string">&quot;name&quot;</span>)!=<span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(searchMap.get(<span class="string">&quot;name&quot;</span>)))&#123;</span><br><span class="line">            criteria.andLike(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;%&quot;</span>+searchMap.get(<span class="string">&quot;name&quot;</span>)+<span class="string">&quot;%&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 品牌的首字母</span></span><br><span class="line">        <span class="keyword">if</span>(searchMap.get(<span class="string">&quot;letter&quot;</span>)!=<span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(searchMap.get(<span class="string">&quot;letter&quot;</span>)))&#123;</span><br><span class="line">            criteria.andEqualTo(<span class="string">&quot;letter&quot;</span>,searchMap.get(<span class="string">&quot;letter&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (Page&lt;Brand&gt;)brandMapper.selectByExample(example);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）控制层  BrandController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 分页搜索实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> searchMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/search/&#123;page&#125;/&#123;size&#125;&quot; )</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">findPage</span><span class="params">(<span class="meta">@RequestParam</span> Map searchMap, <span class="meta">@PathVariable</span>  <span class="keyword">int</span> page, <span class="meta">@PathVariable</span>  <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">Page&lt;Brand&gt; pageList = brandService.findPage(searchMap, page, size);</span><br><span class="line">PageResult pageResult=<span class="keyword">new</span> PageResult(pageList.getTotal(),pageList.getResult());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;查询成功&quot;</span>,pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：Get请求：localhost:9011/brand/searchPage/1/3/?letter=C</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-启动类&quot;&gt;&lt;a href=&quot;#1-启动类&quot; class=&quot;headerlink&quot; title=&quot;1.启动类&quot;&gt;&lt;/a&gt;1.启动类&lt;/h3&gt;&lt;p&gt;创建包com.changgou.goods 包下创建启动类&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
      
    
    
    
    
    <category term="TKMybatis" scheme="http://example.com/tags/TKMybatis/"/>
    
  </entry>
  
  <entry>
    <title>lua入门</title>
    <link href="http://example.com/2020/04/06/Lua%E8%84%9A%E6%9C%AC/"/>
    <id>http://example.com/2020/04/06/Lua%E8%84%9A%E6%9C%AC/</id>
    <published>2020-04-06T09:40:03.000Z</published>
    <updated>2020-12-14T12:21:22.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lua介绍"><a href="#Lua介绍" class="headerlink" title="Lua介绍"></a>Lua介绍</h2><h3 id="1-lua是什么"><a href="#1-lua是什么" class="headerlink" title="1 lua是什么"></a>1 lua是什么</h3><p>​    Lua 是一个小巧的<a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80">脚本语言</a>。它是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个由Roberto Ierusalimschy、Waldemar Celes 和 Luiz Henrique de Figueiredo三人所组成的研究小组于1993年开发的。 其设计目的是为了通过灵活嵌入应用程序中从而为应用程序提供灵活的扩展和定制功能。Lua由标准C编写而成，几乎在所有操作系统和平台上都可以编译，运行。Lua并没有提供强大的库，这是由它的定位决定的。所以Lua不适合作为开发独立应用程序的语言。Lua 有一个同时进行的JIT项目，提供在特定平台上的即时编译功能。</p><p>简单来说：</p><p>​    Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p><p><strong>lua 语言具有以下特性</strong></p><ul><li>支持面向过程(procedure-oriented)编程和函数式编程(functional programming)；</li><li>自动内存管理；只提供了一种通用类型的表（table），用它可以实现数组，哈希表，集合，对象；</li><li>语言内置模式匹配；闭包(closure)；函数也可以看做一个值；提供多线程（协同进程，并非操作系统所支持的线程）支持；</li><li>通过闭包和table可以很方便地支持面向对象编程所需要的一些关键机制，比如数据抽象，虚函数，继承和重载等。</li></ul><p><strong>应用场景</strong></p><ul><li>游戏开发</li><li>独立应用脚本</li><li>Web 应用脚本</li><li>扩展和数据库插件如：MySQL Proxy 和 MySQL WorkBench</li><li>安全系统，如入侵检测系统</li><li>redis中嵌套调用实现类似事务的功能</li><li>web容器中应用处理一些过滤 缓存等等的逻辑，例如nginx。 </li></ul><h3 id="2-lua的安装"><a href="#2-lua的安装" class="headerlink" title="2 lua的安装"></a>2 lua的安装</h3><p>有linux版本的安装也有mac版本的安装。。我们采用linux版本的安装，首先我们准备一个linux虚拟机。</p><p>安装步骤,在linux系统中执行下面的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc</span><br><span class="line"></span><br><span class="line">yum install libtermcap-devel ncurses-devel libevent-devel readline-devel</span><br><span class="line"></span><br><span class="line">curl -R -O http://www.lua.org/ftp/lua-5.3.5.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxf lua-5.3.5.tar.gz</span><br><span class="line"></span><br><span class="line">cd lua-5.3.5</span><br><span class="line"></span><br><span class="line">make linux test</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="3-快速入门"><a href="#3-快速入门" class="headerlink" title="3 快速入门"></a>3 快速入门</h3><p>创建hello.lua文件，内容为</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>保存。执行命令</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lua helloworld.lua</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br></pre></td></tr></table></figure><h3 id="4-LUA的基本语法"><a href="#4-LUA的基本语法" class="headerlink" title="4 LUA的基本语法"></a>4 LUA的基本语法</h3><ul><li>lua有交互式编程和脚本式编程。</li></ul><ul><li>交互式编程就是直接输入语法，就能执行。</li></ul><ul><li>脚本式编程需要编写脚本文件，然后再执行。</li></ul><p>一般采用脚本式编程。（例如：编写一个hello.lua的文件，输入文件内容，并执行lua hell.lua即可）</p><h4 id="4-1-注释"><a href="#4-1-注释" class="headerlink" title="4.1 注释"></a>4.1 注释</h4><p>单行注释：两个减号是单行注释:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--</span></span><br></pre></td></tr></table></figure><p>多行注释：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment"> 多行注释</span></span><br><span class="line"><span class="comment"> 多行注释</span></span><br><span class="line"><span class="comment"> --]]</span></span><br></pre></td></tr></table></figure><h4 id="4-2-关键字"><a href="#4-2-关键字" class="headerlink" title="4.2 关键字"></a>4.2 关键字</h4><p>关键字就好比java中的 break if else等等一样的效果。lua的关键字如下：</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>and</td><td>break</td><td>do</td><td>else</td></tr><tr><td>elseif</td><td>end</td><td>false</td><td>for</td></tr><tr><td>function</td><td>if</td><td>in</td><td>local</td></tr><tr><td>nil</td><td>not</td><td>or</td><td>repeat</td></tr><tr><td>return</td><td>then</td><td>true</td><td>until</td></tr><tr><td>while</td><td></td><td></td><td></td></tr></tbody></table><h4 id="4-3-定义变量"><a href="#4-3-定义变量" class="headerlink" title="4.3 定义变量"></a>4.3 定义变量</h4><p>全局变量，默认的情况下，定义一个变量都是全局变量，</p><p>如果要用局部变量 需要声明为local.例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 全局变量赋值</span></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line"><span class="comment">-- 局部变量赋值</span></span><br><span class="line"><span class="keyword">local</span> b=<span class="number">2</span> </span><br></pre></td></tr></table></figure><p>如果变量没有初始化：则 它的值为nil 这和java中的null不同。</p><h4 id="4-4-Lua中的数据类型"><a href="#4-4-Lua中的数据类型" class="headerlink" title="4.4 Lua中的数据类型"></a>4.4 Lua中的数据类型</h4><p>Lua 是动态类型语言，变量不要类型定义,只需要为变量赋值。 值可以存储在变量中，作为参数传递或结果返回。</p><p>Lua 中有 8 个基本类型分别为：nil、boolean、number、string、userdata、function、thread 和 table。</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>nil</td><td>这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）。</td></tr><tr><td>boolean</td><td>包含两个值：false和true。</td></tr><tr><td>number</td><td>表示双精度类型的实浮点数</td></tr><tr><td>string</td><td>字符串由一对双引号或单引号来表示</td></tr><tr><td>function</td><td>由 C 或 Lua 编写的函数</td></tr><tr><td>userdata</td><td>表示任意存储在变量中的C数据结构</td></tr><tr><td>thread</td><td>表示执行的独立线路，用于执行协同程序</td></tr><tr><td>table</td><td>Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以是数字、字符串或表类型。在 Lua 里，table 的创建是通过”构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。</td></tr></tbody></table><h4 id="4-5-流程控制"><a href="#4-5-流程控制" class="headerlink" title="4.5 流程控制"></a>4.5 流程控制</h4><p>如下：类似于if else </p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[ 0 为 true ]</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;0 为 true&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;0 不为true&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="4-6-函数"><a href="#4-6-函数" class="headerlink" title="4.6 函数"></a>4.6 函数</h4><p>lua中也可以定义函数，类似于java中的方法。例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[ 函数返回两个值的最大值 --]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span><span class="params">(num1, num2)</span></span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (num1 &gt; num2) <span class="keyword">then</span></span><br><span class="line">      result = num1;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      result = num2;</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> result; </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 调用函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;两值比较最大值为 &quot;</span>,<span class="built_in">max</span>(<span class="number">10</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;两值比较最大值为 &quot;</span>,<span class="built_in">max</span>(<span class="number">5</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure><p>执行之后的结果：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">两值比较最大值为     <span class="number">10</span></span><br><span class="line">两值比较最大值为     <span class="number">6</span></span><br></pre></td></tr></table></figure><h4 id="4-7-require-函数"><a href="#4-7-require-函数" class="headerlink" title="4.7 require 函数"></a>4.7 require 函数</h4><p>require 用于 引入其他的模块，类似于java中的类要引用别的类的效果。</p><p>用法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span> <span class="string">&quot;&lt;模块名&gt;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Lua介绍&quot;&gt;&lt;a href=&quot;#Lua介绍&quot; class=&quot;headerlink&quot; title=&quot;Lua介绍&quot;&gt;&lt;/a&gt;Lua介绍&lt;/h2&gt;&lt;h3 id=&quot;1-lua是什么&quot;&gt;&lt;a href=&quot;#1-lua是什么&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="lua" scheme="http://example.com/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>fastjson</title>
    <link href="http://example.com/2020/04/06/fastjson/"/>
    <id>http://example.com/2020/04/06/fastjson/</id>
    <published>2020-04-06T09:40:03.000Z</published>
    <updated>2020-12-14T12:20:22.737Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象转Json</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">ClassToJson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">user.setName(<span class="string">&quot;王二麻子&quot;</span>);</span><br><span class="line">String json = JSON.toJSONString(user);</span><br><span class="line"><span class="keyword">return</span> json;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Json转对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">JsonToClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String classJson = ClassToJson();</span><br><span class="line">User user = JSON.parseObject(classJson,User.class);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//List转Json</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">ListToJson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;王一麻子&quot;</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;王二麻子&quot;</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;王三麻子&quot;</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">&quot;4&quot;</span>,<span class="string">&quot;王四麻子&quot;</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">&quot;5&quot;</span>,<span class="string">&quot;王五麻子&quot;</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">&quot;6&quot;</span>,<span class="string">&quot;王六麻子&quot;</span>));</span><br><span class="line">String json = JSON.toJSONString(userList);</span><br><span class="line"><span class="keyword">return</span> json;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Json转List</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;User&gt; <span class="title">JsonToList</span><span class="params">()</span></span>&#123;</span><br><span class="line">String listJson = ListToJson();</span><br><span class="line">List&lt;User&gt; userList = JSON.parseArray(listJson,User.class);</span><br><span class="line"><span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//parse这个方法比较通用,但是无法精确泛型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">JsonToList2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String listJson = ListToJson();</span><br><span class="line">List userList = (List)JSON.parse(listJson);</span><br><span class="line"><span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Map转Json</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">MapToJson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String,User&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;大哥&quot;</span>, <span class="keyword">new</span> User(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;李狗蛋子&quot;</span>));</span><br><span class="line">map.put(<span class="string">&quot;二哥&quot;</span>, <span class="keyword">new</span> User(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;李猫蛋子&quot;</span>));</span><br><span class="line">map.put(<span class="string">&quot;三哥&quot;</span>, <span class="keyword">new</span> User(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;李竹鼠蛋子&quot;</span>));</span><br><span class="line">String json = JSON.toJSONString(map);</span><br><span class="line"><span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Json转Map</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">JsonToMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String mapJson = MapToJson();</span><br><span class="line">Map map = (Map)JSON.parseObject(mapJson,Map.class);</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通用的方法,但是无法确定泛型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">JsonToMap2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String mapJson = MapToJson();</span><br><span class="line"><span class="comment">//这2中写法都非常通用</span></span><br><span class="line"><span class="comment">//Map map = (Map)JSON.parse(mapJson);</span></span><br><span class="line">Map map = JSON.parseObject(mapJson);</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(ClassToJson());<span class="comment">//对象转Json</span></span><br><span class="line">System.out.println(JsonToClass());<span class="comment">//Json转对象</span></span><br><span class="line">System.out.println(ListToJson());<span class="comment">//List转Json</span></span><br><span class="line">JsonToList().forEach(x-&gt;System.out.println(x));<span class="comment">//Json转List集合</span></span><br><span class="line">System.out.println(MapToJson());<span class="comment">//Map转Json</span></span><br><span class="line">JsonToMap().forEach((x,y) -&gt; &#123;System.out.println(x+<span class="string">&quot;:&quot;</span>+y);&#125;);<span class="comment">//Json转Map</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String name</span><br><span class="line"><span class="comment">//set get tostring..</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
    <category term="fastjson" scheme="http://example.com/tags/fastjson/"/>
    
  </entry>
  
  <entry>
    <title>公共异常处理</title>
    <link href="http://example.com/2020/04/06/%E5%85%AC%E5%85%B1%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2020/04/06/%E5%85%AC%E5%85%B1%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2020-04-06T09:40:03.000Z</published>
    <updated>2020-12-14T12:21:54.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="公共异常处理"><a href="#公共异常处理" class="headerlink" title="公共异常处理"></a>公共异常处理</h2><p>为了使我们的代码更容易维护，我们创建一个类集中处理异常</p><p>在handler包下创建公共异常处理类BaseExceptionHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一异常处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span> <span class="comment">//声明该类是一个增强类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">error</span><span class="params">( Exception e)</span> </span>&#123;</span><br><span class="line">        e.printStackTrace();        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, StatusCode.ERROR, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;公共异常处理&quot;&gt;&lt;a href=&quot;#公共异常处理&quot; class=&quot;headerlink&quot; title=&quot;公共异常处理&quot;&gt;&lt;/a&gt;公共异常处理&lt;/h2&gt;&lt;p&gt;为了使我们的代码更容易维护，我们创建一个类集中处理异常&lt;/p&gt;
&lt;p&gt;在handler包下创建公共异常处理类</summary>
      
    
    
    
    
    <category term="项目" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>分布式ID生成解决方案</title>
    <link href="http://example.com/2020/03/04/%E5%88%86%E5%B8%83%E5%BC%8Fid/%E5%88%86%E5%B8%83%E5%BC%8Fid/"/>
    <id>http://example.com/2020/03/04/%E5%88%86%E5%B8%83%E5%BC%8Fid/%E5%88%86%E5%B8%83%E5%BC%8Fid/</id>
    <published>2020-03-04T02:49:37.000Z</published>
    <updated>2020-12-14T12:17:11.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式ID生成解决方案"><a href="#分布式ID生成解决方案" class="headerlink" title="分布式ID生成解决方案"></a>分布式ID生成解决方案</h2><h3 id="1-分布式ID生成解决方案"><a href="#1-分布式ID生成解决方案" class="headerlink" title="1 分布式ID生成解决方案"></a>1 分布式ID生成解决方案</h3><h4 id="1-1-UUID"><a href="#1-1-UUID" class="headerlink" title="1.1 UUID"></a>1.1 UUID</h4><p>常见的方式。可以利用数据库也可以利用程序生成，一般来说保证id全局唯一。</p><p>优点：</p><p>1）简单，代码方便。</p><p>2）生成ID性能非常好，基本不会有性能问题。</p><p>3）全局唯一，在遇见数据迁移，系统数据合并，或者数据库变更等情况下，可以从容应对。</p><p> 缺点：</p><p>1）<strong>没有排序</strong>，无法保证趋势递增。</p><p>2）UUID往往是使用<strong>字符串存储</strong>，<strong>查询的效率</strong>比较低。</p><p>3）<strong>存储空间比较大</strong>，如果是海量数据库，就需要考虑存储量的问题。</p><p>4）<strong>传输数据量</strong>大</p><p>5）<strong>不可读</strong>。</p><h4 id="1-2-Redis"><a href="#1-2-Redis" class="headerlink" title="1.2 Redis"></a>1.2 Redis</h4><p>当使用数据库来生成ID性能不够要求的时候，我们可以尝试使用Redis来生成ID。这主要依赖于Redis是单线程的，所以也可以用生成全局唯一的ID。可以用Redis的原子操作 INCR和INCRBY来实现。</p><p>优点：</p><p>1）不依赖于数据库，灵活方便，且性能优于数据库。</p><p>2）数字ID天然排序，对分页或者需要排序的结果很有帮助。</p><p>缺点：</p><p>1）如果系统中没有Redis，还需要<strong>引入新的组件</strong>，增加系统复杂度。</p><p>2）需要编码和配置的工作量比较大。</p><p>3）<strong>网络传输</strong>造成性能下降。</p><h4 id="1-3-开源算法snowflake"><a href="#1-3-开源算法snowflake" class="headerlink" title="1.3 开源算法snowflake"></a>1.3 开源算法snowflake</h4><p> snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：</p><p>使用：</p><p>41bit作为毫秒数，</p><p>10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），</p><p>12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），</p><p>最后还有一个符号位，永远是0</p><p><img src="/2020/03/04/%E5%88%86%E5%B8%83%E5%BC%8Fid/%E5%88%86%E5%B8%83%E5%BC%8Fid/4-2.png"></p><h3 id="2-snowflake快速入门"><a href="#2-snowflake快速入门" class="headerlink" title="2 snowflake快速入门"></a>2 snowflake快速入门</h3><h4 id="2-1-快速入门"><a href="#2-1-快速入门" class="headerlink" title="2.1 快速入门"></a>2.1 快速入门</h4><p>（1）新建工程，将资料/工具类下的IdWorker.java拷贝到工程中。</p><p>（2）编写代码</p><p>5个bit是数据中心，5个bit的机器ID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IdWorker idWorker=<span class="keyword">new</span> IdWorker(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">long</span> id = idWorker.nextId();</span><br><span class="line">    System.out.println(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-配置分布式ID生成器"><a href="#2-2-配置分布式ID生成器" class="headerlink" title="2.2 配置分布式ID生成器"></a>2.2 配置分布式ID生成器</h4><p>（1）IdWorker.java拷贝到yigou_common工程com.yigou.util包中</p><p>（2）yigou_service_goods的application.yml添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">workerId:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">datacenterId:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>（3）修改GoodsApplication，增加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;workerId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer workerId;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;datacenterId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer datacenterId;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IdWorker <span class="title">idWorker</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IdWorker(workerId,datacenterId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;分布式ID生成解决方案&quot;&gt;&lt;a href=&quot;#分布式ID生成解决方案&quot; class=&quot;headerlink&quot; title=&quot;分布式ID生成解决方案&quot;&gt;&lt;/a&gt;分布式ID生成解决方案&lt;/h2&gt;&lt;h3 id=&quot;1-分布式ID生成解决方案&quot;&gt;&lt;a href=&quot;#1-分布</summary>
      
    
    
    
    
    <category term="分布式ID" scheme="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8FID/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之单例模式</title>
    <link href="http://example.com/2020/01/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2020/01/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-01-22T03:48:33.000Z</published>
    <updated>2020-12-14T11:54:03.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="1-单例模式的定义"><a href="#1-单例模式的定义" class="headerlink" title="1 单例模式的定义"></a>1 单例模式的定义</h3><ul><li><p>单例模式是指确保一个类在任何的情况下都绝对只有一个实例，并提供一个全局访问点</p><p>ServletContext ServletConfig AplicationContext DBPool</p></li><li><p>隐藏所有的构造方法</p></li><li><p>属于创建型模式</p></li></ul><p>优点：保证一个类只有一个实例，并提供一个访问它的全局访问点常用于重量级对象，这个类创建对象是耗时，耗内存和复杂的单例模式的好处 保证对象在内存中仅有一个，减少内存开销</p><h3 id="2-单例模式常见写法"><a href="#2-单例模式常见写法" class="headerlink" title="2.单例模式常见写法"></a>2.单例模式常见写法</h3><h4 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h4><ul><li>构造方法私有</li><li>返回一个实例</li><li>创建一个静态的实例</li></ul><p>在 单例类首次加载时候就创建实例</p><p>优点：线程安全的</p><p>饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以天生是线程安全的</p><p>缺点：浪费内存空间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式单例类.在类初始化时，已经自行实例化 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton1 single = <span class="keyword">new</span> Singleton1();</span><br><span class="line">    <span class="comment">//静态工厂方法 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式单例类.在类初始化时，已经自行实例化 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton1 single;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        single = <span class="keyword">new</span> Singleton1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态工厂方法 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="懒汉式单例"><a href="#懒汉式单例" class="headerlink" title="懒汉式单例"></a>懒汉式单例</h4><p>被外部类调用时才创建实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//懒汉式单例类.在第一次调用的时候实例化自己 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton single=<span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//静态工厂方法 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;  </span><br><span class="line">             single = <span class="keyword">new</span> Singleton();</span><br><span class="line">         &#125;  </span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒汉式单例的实现没有考虑线程安全问题，它是线程不安全的</p><p>测试一下</p><p>ExectorThread.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wang.yinggang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExectorThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() +<span class="string">&quot;---&quot;</span>+instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>singletonTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wang.yinggang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singletonTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Thread thread01 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ExectorThread());</span><br><span class="line">        Thread thread02 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ExectorThread());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        thread01.start();</span><br><span class="line">        thread02.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;线程启动完毕&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">线程启动完毕</span><br><span class="line">Thread-1---wang.yinggang.Singleton@75dd38ba</span><br><span class="line">Thread-2---wang.yinggang.Singleton@75dd38ba</span><br></pre></td></tr></table></figure><p>两个线程再抢cpu 可能同时抢到 可能一前一后</p><p>多运行几次，结果有可能不同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">线程启动完毕</span><br><span class="line">Thread-2---wang.yinggang.Singleton@51219e67</span><br><span class="line">Thread-1---wang.yinggang.Singleton@7b1ad871</span><br></pre></td></tr></table></figure><p>如何避免线程安全的问题</p><ul><li>线程安全解决办法1：</li></ul><p>方法上加同步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//适中的方案</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;  </span><br><span class="line">             single = <span class="keyword">new</span> Singleton();</span><br><span class="line">         &#125;  </span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>synchronized在1.8之后性能优化了不少 不可避免的还是存在一些性能的问题</p><p>方法被static修饰 导致 整个类可能被锁住</p><ul><li><p>线程安全解决办法2：</p><p>双重检查锁定</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//适中的方案</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">             single = <span class="keyword">new</span> Singleton();</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        cpu执行的时候会转换成jvm指令进行智行</span></span><br><span class="line"><span class="comment">                        指令冲排序问题 volatile</span></span><br><span class="line"><span class="comment">                        </span></span><br><span class="line"><span class="comment">                        1.分配内存给这个对象</span></span><br><span class="line"><span class="comment">                        2.初始化对象</span></span><br><span class="line"><span class="comment">                        3.将初始化的对象和内存的地址建立关联，进行赋值</span></span><br><span class="line"><span class="comment">                        4.用户初次访问</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                        </span><br><span class="line">                      </span><br><span class="line">                    &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">         &#125;  </span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>线程安全解决办法3：</p><p>静态内部类方式</p><p>懒汉式单例写法 性能是最优</p><p>实现了线程安全，又避免了同步带来的性能影响</p></li></ul><p>  单例模式的缺点</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>缺点1：可以会被发射攻击</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">return</span> LazyHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>反射解决办法：</p><p>抛一个异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(LazyHolder.INSTANCE != <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;不允许创建多个实例&quot;</span>)；</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">return</span> LazyHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>情况</p><p>序列化会通过反射调用无参数的构造方法创建一个新的对象。</p><p>序列化破坏单例模式的解决办法</p><ul><li>重写readResolve方法 覆盖反序列化出来的对象</li><li>创建了两次 发生在jvm层 相对来说比较安全的</li><li></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注册式单例"><a href="#注册式单例" class="headerlink" title="注册式单例"></a>注册式单例</h4><p>​        有两种：一种式枚举登记，一种是容器缓存</p><h5 id="枚举式单例"><a href="#枚举式单例" class="headerlink" title="枚举式单例"></a>枚举式单例</h5><p>​    从jdk层面就为枚举不被序列化和反射破坏来保驾护航</p><ul><li>立即加载</li><li>线程安全</li><li>实现简单</li><li>序列化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBConnection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        EnumSingleton.SingletonClass con1 = EnumSingleton.INSTANCE.getInstance();</span><br><span class="line">        EnumSingleton.SingletonClass con2 = EnumSingleton.INSTANCE.getInstance();</span><br><span class="line">        System.out.println(con1 == con2);</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">EnumSingleton</span> </span>&#123;</span><br><span class="line">        INSTANCE;<span class="comment">// 枚举里的属性相当于Singleton的实例</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> SingletonClass instance;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">EnumSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonClass();</span><br><span class="line">            System.out.println(<span class="string">&quot;call EnumSingleton()&quot;</span>);</span><br><span class="line">        &#125;   </span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> SingletonClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;   </span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> </span>&#123;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>z</p><h3 id="3-登记式单例（不常用）"><a href="#3-登记式单例（不常用）" class="headerlink" title="3.登记式单例（不常用）"></a>3.登记式单例（不常用）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类似Spring里面的方法，将类名注册，下次从里面直接获取。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Singleton3&gt; map = <span class="keyword">new</span> HashMap&lt;String,Singleton3&gt;();</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        Singleton3 single = <span class="keyword">new</span> Singleton3();</span><br><span class="line">        map.put(single.getClass().getName(), single);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//保护的默认构造子</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Singleton3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//静态工厂方法,返还此类惟一的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(name == <span class="keyword">null</span>) &#123;</span><br><span class="line">            name = Singleton3.class.getName();</span><br><span class="line">            System.out.println(<span class="string">&quot;name == null&quot;</span>+<span class="string">&quot;---&gt;name=&quot;</span>+name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(map.get(name) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                map.put(name, (Singleton3) Class.forName(name).newInstance());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一个示意性的商业方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">about</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, I am RegSingleton.&quot;</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton3 single3 = Singleton3.getInstance(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(single3.about());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;h2 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Feign</title>
    <link href="http://example.com/2020/01/04/feign/Feign%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2020/01/04/feign/Feign%E4%BD%BF%E7%94%A8/</id>
    <published>2020-01-04T04:49:38.000Z</published>
    <updated>2020-12-14T12:13:25.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h1><h2 id="1-Feign-概述"><a href="#1-Feign-概述" class="headerlink" title="1-Feign-概述"></a>1-Feign-概述</h2><p>• Feign 是一个声明式的 REST 客户端，它用了基于接口的注解方式，很方便实现客户端配置。<br>• Feign 最初由 Netflix 公司提供，但不支持SpringMVC注解，后由 SpringCloud 对其封装，支持了SpringMVC注<br>解，让使用者更易于接受</p><p>![1587540970425](E:/上课资料/24 SpringCloud/day02/讲义/img/1587540970425.png)</p><h2 id="2-Feign-入门"><a href="#2-Feign-入门" class="headerlink" title="2-Feign-入门"></a>2-Feign-入门</h2><ol><li>在消费端引入 open-feign 依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--feign--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>编写Feign调用接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wingone.consumer.feign;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wingone.consumer.config.FeignLogConfig;</span><br><span class="line"><span class="keyword">import</span> com.wingone.consumer.domain.Goods;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * feign声明式接口。发起远程调用的。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> String url = &quot;http://FEIGN-PROVIDER/goods/findOne/&quot;+id;</span></span><br><span class="line"><span class="comment"> Goods goods = restTemplate.getForObject(url, Goods.class);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 定义接口</span></span><br><span class="line"><span class="comment"> * 2. 接口上添加注解 <span class="doctag">@FeignClient</span>,设置value属性为 服务提供者的 应用名称</span></span><br><span class="line"><span class="comment"> * 3. 编写调用接口，接口的声明规则 和 提供方接口保持一致。</span></span><br><span class="line"><span class="comment"> * 4. 注入该接口对象，调用接口方法完成远程调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;FEIGN-PROVIDER&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsFeignClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goods/findOne/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goods <span class="title">findGoodsById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wingone.consumer.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wingone.consumer.domain.Goods;</span><br><span class="line"><span class="keyword">import</span> com.wingone.consumer.feign.GoodsFeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsFeignClient goodsFeignClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goods/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goods <span class="title">findGoodsById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        String url = &quot;http://FEIGN-PROVIDER/goods/findOne/&quot;+id;</span></span><br><span class="line"><span class="comment">        // 3. 调用方法</span></span><br><span class="line"><span class="comment">        Goods goods = restTemplate.getForObject(url, Goods.class);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        return goods;*/</span></span><br><span class="line"></span><br><span class="line">        Goods goods = goodsFeignClient.findGoodsById(id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> goods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>goodsFeignClient报红，不影响使用</p><p>![1587541824858](E:/上课资料/24 SpringCloud/day02/讲义/img/1587541824858.png)</p><ol start="3"><li>在启动类 添加 @EnableFeignClients 注解，开启Feign功能</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wingone.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">// 激活DiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">//开启Feign的功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApp.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>测试调用</li></ol><h2 id="3-Feign超时配置"><a href="#3-Feign超时配置" class="headerlink" title="3-Feign超时配置"></a>3-Feign超时配置</h2><p>• Feign 底层依赖于 Ribbon 实现负载均衡和远程调用。<br>• Ribbon默认1秒超时。<br>• 超时配置：</p><p>feign-consumer  application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置Ribbon的超时时间</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">1000</span> <span class="comment"># 连接超时时间 默认1s  默认单位毫秒</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">3000</span> <span class="comment"># 逻辑处理的超时时间 默认1s 默认单位毫秒</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Feign&quot;&gt;&lt;a href=&quot;#Feign&quot; class=&quot;headerlink&quot; title=&quot;Feign&quot;&gt;&lt;/a&gt;Feign&lt;/h1&gt;&lt;h2 id=&quot;1-Feign-概述&quot;&gt;&lt;a href=&quot;#1-Feign-概述&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="Feign" scheme="http://example.com/tags/Feign/"/>
    
  </entry>
  
  <entry>
    <title>SPU与SKU</title>
    <link href="http://example.com/2020/01/04/sku_spu/SPU%E4%B8%8ESKU/"/>
    <id>http://example.com/2020/01/04/sku_spu/SPU%E4%B8%8ESKU/</id>
    <published>2020-01-04T04:49:38.000Z</published>
    <updated>2020-12-14T12:14:21.401Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1概念与表结构分析"><a href="#1概念与表结构分析" class="headerlink" title="1概念与表结构分析"></a>1概念与表结构分析</h3><h4 id="1-1-SPU与SKU概念"><a href="#1-1-SPU与SKU概念" class="headerlink" title="1.1 SPU与SKU概念"></a>1.1 SPU与SKU概念</h4><p><strong>SPU = Standard Product Unit  （标准产品单位）</strong></p><ul><li><p>概念 : SPU 是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个产品的特性。</p></li><li><p>通俗点讲，属性值、特性相同的货品就可以称为一个 SPU</p><p>例如：<strong>华为P30 就是一个 SPU</strong></p></li></ul><p><strong>SKU=stock keeping unit( 库存量单位)</strong></p><ul><li><p>SKU 即库存进出计量的单位， 可以是以件、盒、托盘等为单位。</p></li><li><p>SKU 是物理上不可分割的最小存货单元。在使用时要根据不同业态，不同管理模式来处理。</p></li><li><p>在服装、鞋类商品中使用最多最普遍。</p><p>例如：<strong>华为P30 红色 64G 就是一个 SKU</strong></p></li></ul><h4 id="1-2-表结构分析"><a href="#1-2-表结构分析" class="headerlink" title="1.2 表结构分析"></a>1.2 表结构分析</h4><p>tb_spu  表 （SPU表）</p><table><thead><tr><th>字段名称</th><th>字段含义</th><th>字段类型</th><th>字段长度</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>主键</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>sn</td><td>货号</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>name</td><td>SPU名</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>caption</td><td>副标题</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>brand_id</td><td>品牌ID</td><td>INT</td><td></td><td></td></tr><tr><td>category1_id</td><td>一级分类</td><td>INT</td><td></td><td></td></tr><tr><td>category2_id</td><td>二级分类</td><td>INT</td><td></td><td></td></tr><tr><td>category3_id</td><td>三级分类</td><td>INT</td><td></td><td></td></tr><tr><td>template_id</td><td>模板ID</td><td>INT</td><td></td><td></td></tr><tr><td>freight_id</td><td>运费模板id</td><td>INT</td><td></td><td></td></tr><tr><td>image</td><td>图片</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>images</td><td>图片列表</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>sale_service</td><td>售后服务</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>introduction</td><td>介绍</td><td>TEXT</td><td></td><td></td></tr><tr><td>spec_items</td><td>规格列表</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>para_items</td><td>参数列表</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>sale_num</td><td>销量</td><td>INT</td><td></td><td></td></tr><tr><td>comment_num</td><td>评论数</td><td>INT</td><td></td><td></td></tr><tr><td>is_marketable</td><td>是否上架</td><td>CHAR</td><td></td><td></td></tr><tr><td>is_enable_spec</td><td>是否启用规格</td><td>CHAR</td><td></td><td></td></tr><tr><td>is_delete</td><td>是否删除</td><td>CHAR</td><td></td><td></td></tr><tr><td>status</td><td>审核状态</td><td>CHAR</td><td></td><td></td></tr></tbody></table><p>tb_sku  表（SKU商品表）</p><table><thead><tr><th>字段名称</th><th>字段含义</th><th>字段类型</th><th>字段长度</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>商品id</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>sn</td><td>商品条码</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>name</td><td>SKU名称</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>price</td><td>价格（分）</td><td>INT</td><td></td><td></td></tr><tr><td>num</td><td>库存数量</td><td>INT</td><td></td><td></td></tr><tr><td>alert_num</td><td>库存预警数量</td><td>INT</td><td></td><td></td></tr><tr><td>image</td><td>商品图片</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>images</td><td>商品图片列表</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>weight</td><td>重量（克）</td><td>INT</td><td></td><td></td></tr><tr><td>create_time</td><td>创建时间</td><td>DATETIME</td><td></td><td></td></tr><tr><td>update_time</td><td>更新时间</td><td>DATETIME</td><td></td><td></td></tr><tr><td>spu_id</td><td>SPUID</td><td>BIGINT</td><td></td><td></td></tr><tr><td>category_id</td><td>类目ID</td><td>INT</td><td></td><td></td></tr><tr><td>category_name</td><td>类目名称</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>brand_name</td><td>品牌名称</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>spec</td><td>规格</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>sale_num</td><td>销量</td><td>INT</td><td></td><td></td></tr><tr><td>comment_num</td><td>评论数</td><td>INT</td><td></td><td></td></tr><tr><td>status</td><td>商品状态 1-正常，2-下架，3-删除</td><td>CHAR</td><td></td><td></td></tr></tbody></table><h3 id="2-2-实现思路"><a href="#2-2-实现思路" class="headerlink" title="2.2 实现思路"></a>2.2 实现思路</h3><p>前端传递给后端的数据格式 是一个spu对象和sku列表组成的对象。   Goods</p><p>private Spu sup;</p><p>private List<sku> list;</sku></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;spu&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;这个是商品名称&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;caption&quot;</span>: <span class="string">&quot;这个是副标题&quot;</span>,</span><br><span class="line"><span class="attr">&quot;brandId&quot;</span>: <span class="number">1115</span>,</span><br><span class="line"><span class="attr">&quot;category1Id&quot;</span>: <span class="number">558</span>,</span><br><span class="line"><span class="attr">&quot;category2Id&quot;</span>: <span class="number">559</span>,</span><br><span class="line"><span class="attr">&quot;category3Id&quot;</span>: <span class="number">560</span>,</span><br><span class="line"><span class="attr">&quot;freightId&quot;</span>: <span class="number">10</span>,</span><br><span class="line"><span class="attr">&quot;image&quot;</span>: <span class="string">&quot;http://www.yigou.com/image/1.jpg&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;images&quot;</span>: <span class="string">&quot;http://www.yigou.com/image/1.jpg,http://www.yigou.com/image/2.jpg&quot;</span>,</span><br><span class="line"><span class="attr">&quot;introduction&quot;</span>: <span class="string">&quot;这个是商品详情，html代码&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;paraItems&quot;</span>: <span class="string">&quot;&#123;&#x27;出厂年份&#x27;:&#x27;2019&#x27;,&#x27;赠品&#x27;:&#x27;充电器&#x27;&#125;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;saleService&quot;</span>: <span class="string">&quot;七天包退,闪电退货&quot;</span>,</span><br><span class="line"><span class="attr">&quot;sn&quot;</span>: <span class="string">&quot;020102331&quot;</span>,</span><br><span class="line"><span class="attr">&quot;specItems&quot;</span>:  <span class="string">&quot;&#123;&#x27;颜色&#x27;:[&#x27;红&#x27;,&#x27;绿&#x27;],&#x27;机身内存&#x27;:[&#x27;64G&#x27;,&#x27;8G&#x27;]&#125;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;templateId&quot;</span>: <span class="number">42</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;skuList&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;sn&quot;</span>: <span class="string">&quot;10192010292&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;num&quot;</span>: <span class="number">100</span>,</span><br><span class="line">       <span class="attr">&quot;alertNum&quot;</span>: <span class="number">20</span>,</span><br><span class="line"> <span class="attr">&quot;price&quot;</span>: <span class="number">900000</span>,</span><br><span class="line">         <span class="attr">&quot;spec&quot;</span>: <span class="string">&quot;&#123;&#x27;颜色&#x27;:&#x27;红&#x27;,&#x27;机身内存&#x27;:&#x27;64G&#x27;&#125;&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;image&quot;</span>: <span class="string">&quot;http://www.yigou.com/image/1.jpg&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;images&quot;</span>: <span class="string">&quot;http://www.yigou.com/image/1.jpg,http://www.yigou.com/image/2.jpg&quot;</span>,</span><br><span class="line"><span class="attr">&quot;status&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;weight&quot;</span>: <span class="number">130</span></span><br><span class="line">&#125;,</span><br><span class="line">    &#123;</span><br><span class="line"><span class="attr">&quot;sn&quot;</span>: <span class="string">&quot;10192010293&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;num&quot;</span>: <span class="number">100</span>,</span><br><span class="line">       <span class="attr">&quot;alertNum&quot;</span>: <span class="number">20</span>,</span><br><span class="line"> <span class="attr">&quot;price&quot;</span>: <span class="number">600000</span>,</span><br><span class="line">         <span class="attr">&quot;spec&quot;</span>: <span class="string">&quot;&#123;&#x27;颜色&#x27;:&#x27;蓝&#x27;,&#x27;机身内存&#x27;:&#x27;128G&#x27;&#125;&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;image&quot;</span>: <span class="string">&quot;http://www.yigou.com/image/1.jpg&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;images&quot;</span>: <span class="string">&quot;http://www.yigou.com/image/1.jpg,http://www.yigou.com/image/2.jpg&quot;</span>,</span><br><span class="line"><span class="attr">&quot;status&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;weight&quot;</span>: <span class="number">130</span></span><br><span class="line">&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们需要定义一个Goods实体对前端传过来的参数进行封装：</p><p><img src="/2020/01/04/sku_spu/SPU%E4%B8%8ESKU/Users\gao\AppData\Roaming\Typora\typora-user-images\1574418879507.png" alt="1574418879507"></p><h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3 代码实现"></a>3 代码实现</h3><h4 id="3-1-SPU与SKU列表的保存"><a href="#3-1-SPU与SKU列表的保存" class="headerlink" title="3.1 SPU与SKU列表的保存"></a>3.1 SPU与SKU列表的保存</h4><p>代码实现：</p><p>（1）yigou_service_goods_api工程创建组合实体类Goods</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品组合实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Spu spu;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Sku&gt; skuList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Spu <span class="title">getSpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> spu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSpu</span><span class="params">(Spu spu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.spu = spu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Sku&gt; <span class="title">getSkuList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> skuList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSkuList</span><span class="params">(List&lt;Sku&gt; skuList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.skuList = skuList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）yigou_service_goods工程SpuService新增方法add(Goods goods)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 新增</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> goods</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Goods goods)</span></span>;</span><br></pre></td></tr></table></figure><p>（3）yigou_service_goods工程SpuServiceImpl实现此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CategoryMapper categoryMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SkuMapper skuMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BrandMapper brandMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IdWorker idWorker;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存商品 SPU+SKU列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> goods 商品组合实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Goods goods)</span> </span>&#123;</span><br><span class="line">    Spu spu = goods.getSpu();</span><br><span class="line">    <span class="keyword">long</span> spuId = idWorker.nextId();</span><br><span class="line">    spu.setId(String.valueOf(spuId));</span><br><span class="line">    spu.setIsDelete(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    spu.setIsMarketable(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    spu.setStatus(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    spuMapper.insertSelective(spu);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存sku集合数据到数据库</span></span><br><span class="line">    saveSkuList(goods);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存sku列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> goods</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveSkuList</span><span class="params">(Goods goods)</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取spu对象</span></span><br><span class="line">    Spu spu = goods.getSpu();</span><br><span class="line">    <span class="comment">//当前日期</span></span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    <span class="comment">//获取品牌对象</span></span><br><span class="line">    Brand brand = brandMapper.selectByPrimaryKey(spu.getBrandId());</span><br><span class="line">    <span class="comment">//获取分类对象</span></span><br><span class="line">    Category category = categoryMapper.selectByPrimaryKey(spu.getCategory3Id());</span><br><span class="line">    <span class="comment">//获取sku集合对象</span></span><br><span class="line">    List&lt;Sku&gt; skuList = goods.getSkuList();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (skuList != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Sku sku : skuList) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//设置sku主键ID 分布式id</span></span><br><span class="line">            sku.setId(String.valueOf(idWorker.nextId()));</span><br><span class="line">             </span><br><span class="line">            <span class="comment">//设置sku规格 如果前端没有传数据 设置为null  &#123;&#125;</span></span><br><span class="line">            <span class="keyword">if</span> (sku.getSpec() == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(sku.getSpec())) &#123;</span><br><span class="line">                sku.setSpec(<span class="string">&quot;&#123;&#125;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//设置sku名称</span></span><br><span class="line">            <span class="comment">//(spau商品名称 + 规格)</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            String name = spu.getName();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//将规格json字符串转换成Map</span></span><br><span class="line">            Map&lt;String, String&gt; specMap = JSON.parseObject(sku.getSpec(), Map.class);</span><br><span class="line">            <span class="comment">//获取Map中的所有value</span></span><br><span class="line">            <span class="keyword">if</span> (specMap != <span class="keyword">null</span> &amp;&amp; specMap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span>(String value : specMap.values())&#123;</span><br><span class="line">                    name += <span class="string">&quot; &quot;</span>+ value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sku.setName(name);<span class="comment">//名称</span></span><br><span class="line">            sku.setSpuId(spu.getId());<span class="comment">//设置spu的ID</span></span><br><span class="line">            sku.setCreateTime(date);<span class="comment">//创建日期</span></span><br><span class="line">            sku.setUpdateTime(date);<span class="comment">//修改日期</span></span><br><span class="line">            sku.setCategoryId(category.getId());<span class="comment">//商品分类ID</span></span><br><span class="line">            sku.setCategoryName(category.getName());<span class="comment">//商品分类名称</span></span><br><span class="line">            sku.setBrandName(brand.getName());<span class="comment">//品牌名称</span></span><br><span class="line">            skuMapper.insertSelective(sku);<span class="comment">//插入sku表数据</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）修改SpuController的add方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 新增数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> goods</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">add</span><span class="params">(<span class="meta">@RequestBody</span> Goods goods)</span></span>&#123;</span><br><span class="line">    spuService.add(goods);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">goods</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.200.128:3306/yigou_goods?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;allowMultiQueries=true&amp;serverTimezone=GMT%2b8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span> <span class="comment">#当遇到同样名字的时候，是否允许覆盖注册</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:6868/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span>   <span class="comment">#配置全局的feign的调用超时时间  如果 有指定的服务配置 默认的配置不会生效</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">60000</span> <span class="comment"># 指定的是 消费者 连接服务提供者的连接超时时间 是否能连接  单位是毫秒</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">20000</span>  <span class="comment"># 指定的是调用服务提供者的 服务 的超时时间（）  单位是毫秒</span></span><br><span class="line"><span class="comment">#hystrix 配置</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">timeout:</span></span><br><span class="line">          <span class="comment">#如果enabled设置为false，则请求超时交给ribbon控制</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">strategy:</span> <span class="string">SEMAPHORE</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="comment"># 熔断器超时时间，默认：1000/毫秒</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">20000</span></span><br><span class="line"><span class="attr">workerId:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">datacenterId:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-2-品牌与分类关联"><a href="#3-2-品牌与分类关联" class="headerlink" title="3.2 品牌与分类关联"></a>3.2 品牌与分类关联</h4><p>实现思路：</p><p>将分类ID与SPU的品牌ID 一起插入到tb_category_brand表中</p><p>（1）创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table(name=&quot;tb_category_brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryBrand</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer brandId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCategoryId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> categoryId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCategoryId</span><span class="params">(Integer categoryId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.categoryId = categoryId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getBrandId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brandId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrandId</span><span class="params">(Integer brandId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brandId = brandId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个表是联合主键，所以templateId和brandId都有@Id注解</p><p>（2）新建数据访问接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryBrandMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">CategoryBrand</span>&gt; </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）SpuServiceImpl引入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CategoryBrandMapper categoryBrandMapper;</span><br></pre></td></tr></table></figure><p>（4）修改SpuServiceImpl的saveSkuList方法，添加分类与品牌之间的关联, </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 添加分类与品牌之间的关联</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       CategoryBrand categoryBrand = <span class="keyword">new</span> CategoryBrand();</span><br><span class="line">       categoryBrand.setBrandId(spu.getBrandId());</span><br><span class="line">       categoryBrand.setCategoryId(spu.getCategory3Id());</span><br><span class="line">       <span class="keyword">int</span> count = categoryBrandMapper.selectCount(categoryBrand);</span><br><span class="line">       <span class="comment">//判断是否有这个品牌和分类的关系数据</span></span><br><span class="line">       <span class="keyword">if</span>(count == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">//如果没有关系数据则添加品牌和分类关系数据</span></span><br><span class="line">           categoryBrandMapper.insert(categoryBrand);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改后代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveSkuList</span><span class="params">(Goods goods)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取spu对象</span></span><br><span class="line">        Spu spu = goods.getSpu();</span><br><span class="line">        <span class="comment">//当前日期</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">//获取品牌对象</span></span><br><span class="line">        Brand brand = brandMapper.selectByPrimaryKey(spu.getBrandId());</span><br><span class="line">        <span class="comment">//获取分类对象</span></span><br><span class="line">        Category category = categoryMapper.selectByPrimaryKey(spu.getCategory3Id());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 添加分类与品牌之间的关联</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        CategoryBrand categoryBrand = <span class="keyword">new</span> CategoryBrand();</span><br><span class="line">        categoryBrand.setBrandId(spu.getBrandId());</span><br><span class="line">        categoryBrand.setCategoryId(spu.getCategory3Id());</span><br><span class="line">        <span class="keyword">int</span> count = categoryBrandMapper.selectCount(categoryBrand);</span><br><span class="line">        <span class="comment">//判断是否有这个品牌和分类的关系数据</span></span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//如果没有关系数据则添加品牌和分类关系数据</span></span><br><span class="line">            categoryBrandMapper.insert(categoryBrand);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取sku集合对象</span></span><br><span class="line">        List&lt;Sku&gt; skuList = goods.getSkuList();</span><br><span class="line">        <span class="keyword">if</span> (skuList != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Sku sku : skuList) &#123;</span><br><span class="line">                <span class="comment">//设置sku主键ID</span></span><br><span class="line">                sku.setId(String.valueOf(idWorker.nextId()));</span><br><span class="line">                <span class="comment">//设置sku规格</span></span><br><span class="line">                <span class="keyword">if</span> (sku.getSpec() == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(sku.getSpec())) &#123;</span><br><span class="line">                    sku.setSpec(<span class="string">&quot;&#123;&#125;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//设置sku名称(商品名称 + 规格)</span></span><br><span class="line">                String name = spu.getName();</span><br><span class="line">                <span class="comment">//将规格json字符串转换成Map</span></span><br><span class="line">                Map&lt;String, String&gt; specMap = JSON.parseObject(sku.getSpec(), Map.class);</span><br><span class="line">                <span class="keyword">if</span> (specMap != <span class="keyword">null</span> &amp;&amp; specMap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(String value : specMap.values())&#123;</span><br><span class="line">                        name += <span class="string">&quot; &quot;</span>+ value;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                sku.setName(name);<span class="comment">//名称</span></span><br><span class="line">                sku.setSpuId(spu.getId());<span class="comment">//设置spu的ID</span></span><br><span class="line">                sku.setCreateTime(date);<span class="comment">//创建日期</span></span><br><span class="line">                sku.setUpdateTime(date);<span class="comment">//修改日期</span></span><br><span class="line">                sku.setCategoryId(category.getId());<span class="comment">//商品分类ID</span></span><br><span class="line">                sku.setCategoryName(category.getName());<span class="comment">//商品分类名称</span></span><br><span class="line">                sku.setBrandName(brand.getName());<span class="comment">//品牌名称</span></span><br><span class="line">                skuMapper.insertSelective(sku);<span class="comment">//插入sku表数据</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-根据ID查询商品"><a href="#3-3-根据ID查询商品" class="headerlink" title="3.3 根据ID查询商品"></a>3.3 根据ID查询商品</h4><p>需求：根据id 查询SPU和SKU列表 ，显示效果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;spu&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;brandId&quot;</span>: <span class="number">8557</span>,</span><br><span class="line"><span class="attr">&quot;caption&quot;</span>: <span class="string">&quot;111&quot;</span>,</span><br><span class="line"><span class="attr">&quot;category1Id&quot;</span>: <span class="number">558</span>,</span><br><span class="line"><span class="attr">&quot;category2Id&quot;</span>: <span class="number">559</span>,</span><br><span class="line"><span class="attr">&quot;category3Id&quot;</span>: <span class="number">560</span>,</span><br><span class="line"><span class="attr">&quot;commentNum&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;freightId&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">149187842867993</span>,</span><br><span class="line"><span class="attr">&quot;image&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;images&quot;</span>: <span class="string">&quot;[&#123;\&quot;color\&quot;:\&quot;银白色\&quot;,\&quot;url\&quot;:\&quot;//img11.360buyimg.com/n7/jfs/t30040/100/1290632710/208879/1f7e2225/5cdd0d92Nb78895a6.jpg\&quot;&#125;]&quot;</span>,</span><br><span class="line"><span class="attr">&quot;introduction&quot;</span>: <span class="string">&quot;这是测试手机数据&quot;</span>,</span><br><span class="line"><span class="attr">&quot;isDelete&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;isEnableSpec&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line"><span class="attr">&quot;isMarketable&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;黑马智能手机&quot;</span>,</span><br><span class="line"><span class="attr">&quot;paraItems&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;saleNum&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;saleService&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;sn&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;specItems&quot;</span>: <span class="string">&quot;&#123;\&quot;颜色\&quot;:[\&quot;金色\&quot;,\&quot;黑色\&quot;,\&quot;蓝色\&quot;],\&quot;版本\&quot;:[\&quot;6GB+64GB\&quot;]&#125;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;status&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line"><span class="attr">&quot;templateId&quot;</span>: <span class="number">42</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;skuList&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;alertNum&quot;</span>: <span class="number">100</span>,</span><br><span class="line"><span class="attr">&quot;commentNum&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;image&quot;</span>: <span class="string">&quot;https://m.360buyimg.com/mobilecms/s720x720_jfs/t22642/312/2563982615/103706/1398b13d/5b865bb3N0409f0d0.jpg!q70.jpg.webp&quot;</span>,</span><br><span class="line"><span class="attr">&quot;images&quot;</span>: <span class="string">&quot;https://m.360buyimg.com/mobilecms/s720x720_jfs/t22642/312/2563982615/103706/1398b13d/5b865bb3N0409f0d0.jpg!q70.jpg.webp&quot;</span>,</span><br><span class="line"><span class="attr">&quot;num&quot;</span>: <span class="number">100</span>,</span><br><span class="line"><span class="attr">&quot;price&quot;</span>: <span class="number">90000</span>,</span><br><span class="line"><span class="attr">&quot;saleNum&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;sn&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;spec&quot;</span>: <span class="string">&quot;&#123;&#x27;颜色&#x27;: &#x27;蓝色&#x27;&#125;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;status&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;weight&quot;</span>: <span class="number">10</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line"><span class="attr">&quot;alertNum&quot;</span>: <span class="number">100</span>,</span><br><span class="line"><span class="attr">&quot;commentNum&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;image&quot;</span>: <span class="string">&quot;https://m.360buyimg.com/mobilecms/s720x720_jfs/t22642/312/2563982615/103706/1398b13d/5b865bb3N0409f0d0.jpg!q70.jpg.webp&quot;</span>,</span><br><span class="line"><span class="attr">&quot;images&quot;</span>: <span class="string">&quot;https://m.360buyimg.com/mobilecms/s720x720_jfs/t22642/312/2563982615/103706/1398b13d/5b865bb3N0409f0d0.jpg!q70.jpg.webp&quot;</span>,</span><br><span class="line"><span class="attr">&quot;num&quot;</span>: <span class="number">100</span>,</span><br><span class="line"><span class="attr">&quot;price&quot;</span>: <span class="number">80000</span>,</span><br><span class="line"><span class="attr">&quot;saleNum&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;sn&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;spec&quot;</span>: <span class="string">&quot;&#123;&#x27;颜色&#x27;: &#x27;黑色&#x27;&#125;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;status&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;weight&quot;</span>: <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码实现：</p><p>（1）yigou_service_goods工程SpuService新增方法定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据ID查询商品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Goods <span class="title">findGoodsById</span><span class="params">(String id)</span></span>;</span><br></pre></td></tr></table></figure><p>（2）yigou_service_goods工程SpuServiceImpl实现此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据ID查询商品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Goods <span class="title">findGoodsById</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">    <span class="comment">//查询spu</span></span><br><span class="line">    Spu spu = spuMapper.selectByPrimaryKey(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询SKU 列表</span></span><br><span class="line">    Example example=<span class="keyword">new</span> Example(Sku.class);</span><br><span class="line">    Example.Criteria criteria = example.createCriteria();</span><br><span class="line">    criteria.andEqualTo(<span class="string">&quot;spuId&quot;</span>,id);</span><br><span class="line">    List&lt;Sku&gt; skuList = skuMapper.selectByExample(example);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装，返回</span></span><br><span class="line">    Goods goods=<span class="keyword">new</span> Goods();</span><br><span class="line">    goods.setSpu(spu);</span><br><span class="line">    goods.setSkuList(skuList);</span><br><span class="line">    <span class="keyword">return</span> goods;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）修改SpuController的findById方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span></span>&#123;</span><br><span class="line">    Goods goods = spuService.findGoodsById(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;查询成功&quot;</span>,goods);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-修改"><a href="#3-4-修改" class="headerlink" title="3.4 修改"></a>3.4 修改</h4><p>（1）yigou_service_goods工程SpuService新增方法定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 修改数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> spu</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Goods goods)</span></span>;</span><br></pre></td></tr></table></figure><p>（2）yigou_service_goods工程SpuServiceImpl实现此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Goods goods )</span> </span>&#123;</span><br><span class="line">    <span class="comment">//取出spu部分</span></span><br><span class="line">    Spu spu = goods.getSpu();</span><br><span class="line">    spuMapper.updateByPrimaryKey(spu);</span><br><span class="line">    <span class="comment">//删除原sku列表</span></span><br><span class="line">    Example example=<span class="keyword">new</span> Example(Sku.class);</span><br><span class="line">    Example.Criteria criteria = example.createCriteria();</span><br><span class="line">    criteria.andEqualTo(<span class="string">&quot;spuId&quot;</span>,spu.getId());</span><br><span class="line">    skuMapper.deleteByExample(example);</span><br><span class="line"></span><br><span class="line">    saveSkuList(goods);<span class="comment">//保存sku列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）修改SpuController的update方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 修改数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> goods</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping(value=&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> Goods goods,<span class="meta">@PathVariable</span> String id)</span></span>&#123;</span><br><span class="line">    spuService.update(goods);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1概念与表结构分析&quot;&gt;&lt;a href=&quot;#1概念与表结构分析&quot; class=&quot;headerlink&quot; title=&quot;1概念与表结构分析&quot;&gt;&lt;/a&gt;1概念与表结构分析&lt;/h3&gt;&lt;h4 id=&quot;1-1-SPU与SKU概念&quot;&gt;&lt;a href=&quot;#1-1-SPU与SKU概</summary>
      
    
    
    
    
    <category term="SPU与SKU" scheme="http://example.com/tags/SPU%E4%B8%8ESKU/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper_javaAPI操作</title>
    <link href="http://example.com/2019/12/09/zookeeper/zookeeper_javaAPI%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2019/12/09/zookeeper/zookeeper_javaAPI%E6%93%8D%E4%BD%9C/</id>
    <published>2019-12-09T01:55:33.000Z</published>
    <updated>2020-12-14T12:04:52.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zookeeper-javaAPI操作"><a href="#zookeeper-javaAPI操作" class="headerlink" title="zookeeper_javaAPI操作"></a>zookeeper_javaAPI操作</h1><h2 id="1、建立连接"><a href="#1、建立连接" class="headerlink" title="1、建立连接"></a>1、建立连接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 建立连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnect</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param connectString       连接字符串。zk server 地址和端口 &quot;192.168.149.135:2181,192.168.149.136:2181&quot;</span></span><br><span class="line"><span class="comment">     * @param sessionTimeoutMs    会话超时时间 单位ms</span></span><br><span class="line"><span class="comment">     * @param connectionTimeoutMs 连接超时时间 单位ms</span></span><br><span class="line"><span class="comment">     * @param retryPolicy         重试策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="comment">/* //重试策略</span></span><br><span class="line"><span class="comment">    RetryPolicy retryPolicy = new ExponentialBackoffRetry(3000,10);</span></span><br><span class="line"><span class="comment">    //1.第一种方式</span></span><br><span class="line"><span class="comment">    CuratorFramework client = CuratorFrameworkFactory.newClient(&quot;192.168.149.135:2181&quot;,</span></span><br><span class="line"><span class="comment">            60 * 1000, 15 * 1000, retryPolicy);*/</span></span><br><span class="line">    <span class="comment">//重试策略</span></span><br><span class="line">    RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">3000</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="comment">//2.第二种方式</span></span><br><span class="line">    <span class="comment">//CuratorFrameworkFactory.builder();</span></span><br><span class="line">    client = CuratorFrameworkFactory.builder()</span><br><span class="line">            .connectString(<span class="string">&quot;192.168.149.135:2181&quot;</span>)</span><br><span class="line">            .sessionTimeoutMs(<span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">            .connectionTimeoutMs(<span class="number">15</span> * <span class="number">1000</span>)</span><br><span class="line">            .retryPolicy(retryPolicy)</span><br><span class="line">            .namespace(<span class="string">&quot;itheima&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启连接</span></span><br><span class="line">    client.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、操作节点"><a href="#2、操作节点" class="headerlink" title="2、操作节点"></a>2、操作节点</h2><h3 id="2-1-创建节点"><a href="#2-1-创建节点" class="headerlink" title="2.1 创建节点"></a>2.1 创建节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//==============================create=============================================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建节点：create 持久 临时 顺序 数据</span></span><br><span class="line"><span class="comment">     * 1. 基本创建 ：create().forPath(&quot;&quot;)</span></span><br><span class="line"><span class="comment">     * 2. 创建节点 带有数据:create().forPath(&quot;&quot;,data)</span></span><br><span class="line"><span class="comment">     * 3. 设置节点的类型：create().withMode().forPath(&quot;&quot;,data)</span></span><br><span class="line"><span class="comment">     * 4. 创建多级节点  /app1/p1 ：create().creatingParentsIfNeeded().forPath(&quot;&quot;,data)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//2. 创建节点 带有数据</span></span><br><span class="line">        <span class="comment">//如果创建节点，没有指定数据，则默认将当前客户端的ip作为数据存储</span></span><br><span class="line">        String path = client.create().forPath(<span class="string">&quot;/app2&quot;</span>, <span class="string">&quot;hehe&quot;</span>.getBytes());</span><br><span class="line">        System.out.println(path);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 基本创建</span></span><br><span class="line">        <span class="comment">//如果创建节点，没有指定数据，则默认将当前客户端的ip作为数据存储</span></span><br><span class="line">        String path = client.create().forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">        System.out.println(path);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//3. 设置节点的类型</span></span><br><span class="line">        <span class="comment">//默认类型：持久化</span></span><br><span class="line">        String path = client.create().withMode(CreateMode.EPHEMERAL).forPath(<span class="string">&quot;/app3&quot;</span>);</span><br><span class="line">        System.out.println(path);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate4</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//4. 创建多级节点  /app1/p1</span></span><br><span class="line">        <span class="comment">//creatingParentsIfNeeded():如果父节点不存在，则创建父节点</span></span><br><span class="line">        String path = client.create().creatingParentsIfNeeded().forPath(<span class="string">&quot;/app4/p1&quot;</span>);</span><br><span class="line">        System.out.println(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-查询节点"><a href="#2-2-查询节点" class="headerlink" title="2.2 查询节点"></a>2.2 查询节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//===========================get================================================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询节点：</span></span><br><span class="line"><span class="comment">     * 1. 查询数据：get: getData().forPath()</span></span><br><span class="line"><span class="comment">     * 2. 查询子节点： ls: getChildren().forPath()</span></span><br><span class="line"><span class="comment">     * 3. 查询节点状态信息：ls -s:getData().storingStatIn(状态对象).forPath()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 查询数据：get</span></span><br><span class="line">        <span class="keyword">byte</span>[] data = client.getData().forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 2. 查询子节点： ls</span></span><br><span class="line">        List&lt;String&gt; path = client.getChildren().forPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Stat status = <span class="keyword">new</span> Stat();</span><br><span class="line">        System.out.println(status);</span><br><span class="line">        <span class="comment">//3. 查询节点状态信息：ls -s</span></span><br><span class="line">        client.getData().storingStatIn(status).forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(status);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="2-3-修改数据"><a href="#2-3-修改数据" class="headerlink" title="2.3 修改数据"></a>2.3 修改数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//===========================set================================================================================</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 修改数据</span></span><br><span class="line"><span class="comment">  * 1. 基本修改数据：setData().forPath()</span></span><br><span class="line"><span class="comment">  * 2. 根据版本修改: setData().withVersion().forPath()</span></span><br><span class="line"><span class="comment">  * * version 是通过查询出来的。目的就是为了让其他客户端或者线程不干扰我。</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     client.setData().forPath(<span class="string">&quot;/app1&quot;</span>, <span class="string">&quot;itcast&quot;</span>.getBytes());</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetForVersion</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">     Stat status = <span class="keyword">new</span> Stat();</span><br><span class="line">     <span class="comment">//3. 查询节点状态信息：ls -s</span></span><br><span class="line">     client.getData().storingStatIn(status).forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="keyword">int</span> version = status.getVersion();<span class="comment">//查询出来的 3</span></span><br><span class="line">     System.out.println(version);</span><br><span class="line">     client.setData().withVersion(version).forPath(<span class="string">&quot;/app1&quot;</span>, <span class="string">&quot;hehe&quot;</span>.getBytes());</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-4-删除节点"><a href="#2-4-删除节点" class="headerlink" title="2.4  删除节点"></a>2.4  删除节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//===========================delete================================================================================</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 删除节点： delete deleteall</span></span><br><span class="line"><span class="comment">   * 1. 删除单个节点:delete().forPath(&quot;/app1&quot;);</span></span><br><span class="line"><span class="comment">   * 2. 删除带有子节点的节点:delete().deletingChildrenIfNeeded().forPath(&quot;/app1&quot;);</span></span><br><span class="line"><span class="comment">   * 3. 必须成功的删除:为了防止网络抖动。本质就是重试。  client.delete().guaranteed().forPath(&quot;/app2&quot;);</span></span><br><span class="line"><span class="comment">   * 4. 回调：inBackground</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 1. 删除单个节点</span></span><br><span class="line">      client.delete().forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">//2. 删除带有子节点的节点</span></span><br><span class="line">      client.delete().deletingChildrenIfNeeded().forPath(<span class="string">&quot;/app4&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">//3. 必须成功的删除</span></span><br><span class="line">      client.delete().guaranteed().forPath(<span class="string">&quot;/app2&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete4</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">//4. 回调</span></span><br><span class="line">      client.delete().guaranteed().inBackground(<span class="keyword">new</span> BackgroundCallback()&#123;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(CuratorFramework client, CuratorEvent event)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;我被删除了~&quot;</span>);</span><br><span class="line">              System.out.println(event);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;).forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@After</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (client != <span class="keyword">null</span>) &#123;</span><br><span class="line">          client.close();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、watch监听"><a href="#3、watch监听" class="headerlink" title="3、watch监听"></a>3、watch监听</h2><h3 id="3-1-NodeCache"><a href="#3-1-NodeCache" class="headerlink" title="3.1 NodeCache"></a>3.1 NodeCache</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示 NodeCache：给指定一个节点注册监听器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNodeCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1. 创建NodeCache对象</span></span><br><span class="line">    <span class="keyword">final</span> NodeCache nodeCache = <span class="keyword">new</span> NodeCache(client,<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">    <span class="comment">//2. 注册监听</span></span><br><span class="line">    nodeCache.getListenable().addListener(<span class="keyword">new</span> NodeCacheListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nodeChanged</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;节点变化了~&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取修改节点后的数据</span></span><br><span class="line">            <span class="keyword">byte</span>[] data = nodeCache.getCurrentData().getData();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(data));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 开启监听.如果设置为true，则开启监听是，加载缓冲数据</span></span><br><span class="line">    nodeCache.start(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-PathChildrenCache"><a href="#3-2-PathChildrenCache" class="headerlink" title="3.2 PathChildrenCache"></a>3.2 PathChildrenCache</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示 PathChildrenCache：监听某个节点的所有子节点们</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPathChildrenCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建监听对象</span></span><br><span class="line">    PathChildrenCache pathChildrenCache = <span class="keyword">new</span> PathChildrenCache(client,<span class="string">&quot;/app2&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 绑定监听器</span></span><br><span class="line">    pathChildrenCache.getListenable().addListener(<span class="keyword">new</span> PathChildrenCacheListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">childEvent</span><span class="params">(CuratorFramework client, PathChildrenCacheEvent event)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子节点变化了~&quot;</span>);</span><br><span class="line">            System.out.println(event);</span><br><span class="line">            <span class="comment">//监听子节点的数据变更，并且拿到变更后的数据</span></span><br><span class="line">            <span class="comment">//1.获取类型</span></span><br><span class="line">            PathChildrenCacheEvent.Type type = event.getType();</span><br><span class="line">            <span class="comment">//2.判断类型是否是update</span></span><br><span class="line">            <span class="keyword">if</span>(type.equals(PathChildrenCacheEvent.Type.CHILD_UPDATED))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;数据变了！！！&quot;</span>);</span><br><span class="line">                <span class="keyword">byte</span>[] data = event.getData().getData();</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(data));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//3. 开启</span></span><br><span class="line">    pathChildrenCache.start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-TreeCache"><a href="#3-3-TreeCache" class="headerlink" title="3.3 TreeCache"></a>3.3 TreeCache</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示 TreeCache：监听某个节点自己和所有子节点们</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTreeCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1. 创建监听器</span></span><br><span class="line">    TreeCache treeCache = <span class="keyword">new</span> TreeCache(client,<span class="string">&quot;/app2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 注册监听</span></span><br><span class="line">    treeCache.getListenable().addListener(<span class="keyword">new</span> TreeCacheListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">childEvent</span><span class="params">(CuratorFramework client, TreeCacheEvent event)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;节点变化了&quot;</span>);</span><br><span class="line">            System.out.println(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 开启</span></span><br><span class="line">    treeCache.start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;zookeeper-javaAPI操作&quot;&gt;&lt;a href=&quot;#zookeeper-javaAPI操作&quot; class=&quot;headerlink&quot; title=&quot;zookeeper_javaAPI操作&quot;&gt;&lt;/a&gt;zookeeper_javaAPI操作&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
    <category term="zookeeper" scheme="http://example.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>POI入门</title>
    <link href="http://example.com/2019/12/04/POI%20%E8%AF%BB%E5%86%99%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/2019/12/04/POI%20%E8%AF%BB%E5%86%99%E6%95%B0%E6%8D%AE/</id>
    <published>2019-12-04T04:48:33.000Z</published>
    <updated>2020-12-14T11:20:23.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="POI-读写xml文件数据"><a href="#POI-读写xml文件数据" class="headerlink" title="POI 读写xml文件数据"></a>POI 读写xml文件数据</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Cell;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Row;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFCell;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFRow;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">POITest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用POI读取Excel文件中的数据</span></span><br><span class="line">    <span class="comment">//@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//加载指定文件，创建一个Excel对象（工作簿）</span></span><br><span class="line">        XSSFWorkbook excel = <span class="keyword">new</span> XSSFWorkbook(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;e:\\poi.xlsx&quot;</span>)));</span><br><span class="line">        <span class="comment">//读取Excel文件中第一个Sheet标签页</span></span><br><span class="line">        XSSFSheet sheet = excel.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//遍历Sheet标签页，获得每一行数据</span></span><br><span class="line">        <span class="keyword">for</span> (Row row : sheet) &#123;</span><br><span class="line">            <span class="comment">//遍历行，获得每个单元格对象</span></span><br><span class="line">            <span class="keyword">for</span> (Cell cell : row) &#123;</span><br><span class="line">                System.out.println(cell.getStringCellValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        excel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用POI读取Excel文件中的数据</span></span><br><span class="line">    <span class="comment">//@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//加载指定文件，创建一个Excel对象（工作簿）</span></span><br><span class="line">        XSSFWorkbook excel = <span class="keyword">new</span> XSSFWorkbook(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;e:\\poi.xlsx&quot;</span>)));</span><br><span class="line">        <span class="comment">//读取Excel文件中第一个Sheet标签页</span></span><br><span class="line">        XSSFSheet sheet = excel.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//获得当前工作表中最后一个行号，需要注意：行号从0开始</span></span><br><span class="line">        <span class="keyword">int</span> lastRowNum = sheet.getLastRowNum();</span><br><span class="line">        System.out.println(<span class="string">&quot;lastRowNum = &quot;</span> + lastRowNum);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=lastRowNum;i++)&#123;</span><br><span class="line">            XSSFRow row = sheet.getRow(i);<span class="comment">//根据行号获取每一行</span></span><br><span class="line">            <span class="comment">//获得当前行最后一个单元格索引</span></span><br><span class="line">            <span class="keyword">short</span> lastCellNum = row.getLastCellNum();</span><br><span class="line">            System.out.println(<span class="string">&quot;lastCellNum = &quot;</span> + lastCellNum);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;lastCellNum;j++)&#123;</span><br><span class="line">                XSSFCell cell = row.getCell(j);<span class="comment">//根据单元格索引获得单元格对象</span></span><br><span class="line">                System.out.println(cell.getStringCellValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        excel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用POI向Excel文件写入数据，并且通过输出流将创建的Excel文件保存到本地磁盘</span></span><br><span class="line">    <span class="comment">//@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//在内存中创建一个Excel文件（工作簿）</span></span><br><span class="line">        XSSFWorkbook excel = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">        <span class="comment">//创建一个工作表对象</span></span><br><span class="line">        XSSFSheet sheet = excel.createSheet(<span class="string">&quot;wyg&quot;</span>);</span><br><span class="line">        <span class="comment">//在工作表中创建行对象</span></span><br><span class="line">        XSSFRow title = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//在行中创建单元格对象</span></span><br><span class="line">        title.createCell(<span class="number">0</span>).setCellValue(<span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">        title.createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;地址&quot;</span>);</span><br><span class="line">        title.createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;年龄&quot;</span>);</span><br><span class="line"></span><br><span class="line">        XSSFRow dataRow = sheet.createRow(<span class="number">1</span>);</span><br><span class="line">        dataRow.createCell(<span class="number">0</span>).setCellValue(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        dataRow.createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        dataRow.createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;22&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个输出流，通过输出流将内存中的Excel文件写到磁盘</span></span><br><span class="line">        FileOutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;e:\\hello.xlsx&quot;</span>));</span><br><span class="line">        excel.write(out);</span><br><span class="line">        out.flush();</span><br><span class="line">        excel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;POI-读写xml文件数据&quot;&gt;&lt;a href=&quot;#POI-读写xml文件数据&quot; class=&quot;headerlink&quot; title=&quot;POI 读写xml文件数据&quot;&gt;&lt;/a&gt;POI 读写xml文件数据&lt;/h1&gt;&lt;figure class=&quot;highlight java</summary>
      
    
    
    
    
    <category term="POI" scheme="http://example.com/tags/POI/"/>
    
  </entry>
  
  <entry>
    <title>BCrypt密码加密</title>
    <link href="http://example.com/2019/12/04/BCrypt%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/BCrypt%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/"/>
    <id>http://example.com/2019/12/04/BCrypt%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/BCrypt%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/</id>
    <published>2019-12-04T04:48:33.000Z</published>
    <updated>2020-12-14T12:10:13.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BCrypt密码加密"><a href="#BCrypt密码加密" class="headerlink" title="BCrypt密码加密"></a>BCrypt密码加密</h2><h3 id="1-BCrypt快速入门"><a href="#1-BCrypt快速入门" class="headerlink" title="1 BCrypt快速入门"></a>1 BCrypt快速入门</h3><p>​    在用户模块，对于用户密码的保护，通常都会进行加密。我们通常对密码进行加密，然后存放在数据库中，在用户进行登录的时候，将其输入的密码进行加密然后与数据库中存放的密文进行比较，以验证用户密码是否正确。  目前，MD5和BCrypt比较流行。相对来说，BCrypt比MD5更安全。因为其内部引入的加盐机制</p><p>BCrypt 官网<a href="http://www.mindrot.org/projects/jBCrypt/">http://www.mindrot.org/projects/jBCrypt/</a></p><p>（1）新建测试类，main方法中编写代码，实现对密码的加密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBcrypt</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 得到盐</span></span><br><span class="line"><span class="comment">         * 盐是一个随机生成的含有29个字符的字符串,并且会与密码一起合并进行最终的密文生成</span></span><br><span class="line"><span class="comment">         * 并且每一次生成的盐的值都是不同的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            String gensalt = BCrypt.gensalt();<span class="comment">//获取到盐</span></span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="string">&quot;salt:&quot;</span>+gensalt);</span><br><span class="line">            String saltPassword = BCrypt.hashpw(<span class="string">&quot;123456&quot;</span>, gensalt);<span class="comment">//加盐</span></span><br><span class="line">            System.out.println(<span class="string">&quot;本次生成的密码:&quot;</span>+saltPassword);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）main方法中编写代码，实现对密码的校验。BCrypt不支持反运算，只支持密码校验。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//校验密码</span></span><br><span class="line"><span class="keyword">boolean</span> checkpw = BCrypt.checkpw(<span class="string">&quot;123456&quot;</span>, saltPassword);<span class="comment">//校验密码</span></span><br><span class="line">System.out.println(<span class="string">&quot;密码校验结果:&quot;</span>+checkpw);</span><br></pre></td></tr></table></figure><p>//输出结果</p><p>ture</p><h3 id="2-新增管理员密码加密"><a href="#2-新增管理员密码加密" class="headerlink" title="2 新增管理员密码加密"></a>2 新增管理员密码加密</h3><h4 id="2-1-需求与表结构分析"><a href="#2-1-需求与表结构分析" class="headerlink" title="2.1 需求与表结构分析"></a>2.1 需求与表结构分析</h4><p>新增管理员，使用BCrypt进行密码加密</p><table><thead><tr><th>id</th><th>int</th><th>主键id</th></tr></thead><tbody><tr><td>login_name</td><td>varchar</td><td>登录名</td></tr><tr><td>password</td><td>varchar</td><td>密码</td></tr><tr><td>status</td><td>char</td><td>状态</td></tr></tbody></table><h4 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2 代码实现"></a>2.2 代码实现</h4><p>（1）修改yigou_service_system项目的AdminServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 增加</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> admin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Admin admin)</span></span>&#123;</span><br><span class="line">    String password = BCrypt.hashpw(admin.getPassword(), BCrypt.gensalt());</span><br><span class="line">    admin.setPassword(password);   </span><br><span class="line">    adminMapper.insert(admin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-管理员登录密码验证"><a href="#3-管理员登录密码验证" class="headerlink" title="3 管理员登录密码验证"></a>3 管理员登录密码验证</h3><h4 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1 需求分析"></a>1 需求分析</h4><p>系统管理用户需要管理后台，需要先输入用户名和密码进行登录，才能进入管理后台。</p><p>思路：</p><p>​    用户发送请求，输入用户名和密码</p><p>​    后台管理微服务controller接收参数，验证用户名和密码是否正确，如果正确则返回用户登录成功结果</p><h4 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2 代码实现"></a>2 代码实现</h4><p>（1）AdminService新增方法定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录验证密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> admin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">login</span><span class="params">(Admin admin)</span></span>;</span><br></pre></td></tr></table></figure><p>（2）AdminServiceImpl实现此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(Admin admin)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据登录名查询管理员</span></span><br><span class="line">    Admin admin1=<span class="keyword">new</span> Admin();</span><br><span class="line">    admin1.setLoginName(admin.getLoginName());</span><br><span class="line">    admin1.setStatus(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    Admin admin2 = adminMapper.selectOne(admin1);<span class="comment">//数据库查询出的对象</span></span><br><span class="line">    <span class="keyword">if</span>(admin2==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//验证密码, Bcrypt为spring的包, 第一个参数为明文密码, 第二个参数为密文密码</span></span><br><span class="line">        <span class="keyword">return</span> BCrypt.checkpw(admin.getPassword(),admin2.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）AdminController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> admin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">login</span><span class="params">(<span class="meta">@RequestBody</span> Admin admin)</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> login = adminService.login(admin);</span><br><span class="line">    <span class="keyword">if</span>(login)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>,StatusCode.LOGINERROR,<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;BCrypt密码加密&quot;&gt;&lt;a href=&quot;#BCrypt密码加密&quot; class=&quot;headerlink&quot; title=&quot;BCrypt密码加密&quot;&gt;&lt;/a&gt;BCrypt密码加密&lt;/h2&gt;&lt;h3 id=&quot;1-BCrypt快速入门&quot;&gt;&lt;a href=&quot;#1-BCrypt快</summary>
      
    
    
    
    
    <category term="密码加密" scheme="http://example.com/tags/%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>linux命令</title>
    <link href="http://example.com/2019/11/20/linux/linux%E4%B8%8B%E7%9A%84jdk%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2019/11/20/linux/linux%E4%B8%8B%E7%9A%84jdk%E5%AE%89%E8%A3%85/</id>
    <published>2019-11-20T02:48:33.000Z</published>
    <updated>2020-12-14T12:07:41.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux命令"><a href="#linux命令" class="headerlink" title="linux命令"></a>linux命令</h1><h3 id="linux下的jdk安装"><a href="#linux下的jdk安装" class="headerlink" title="linux下的jdk安装"></a>linux下的jdk安装</h3><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf tar -zxvf jdk-9.0.1_linux-x64_bin.tar.gz </span><br></pre></td></tr></table></figure><h4 id="配置JAVA-HOME："><a href="#配置JAVA-HOME：" class="headerlink" title="配置JAVA_HOME："></a>配置JAVA_HOME：</h4><p>/root/es/es/elasticsearch-7.4.0/jdk</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><h4 id="内容如下："><a href="#内容如下：" class="headerlink" title="内容如下："></a>内容如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk-<span class="number">9.0</span><span class="number">.1</span></span><br><span class="line">export JRE_HOME=/usr/local/jdk-<span class="number">9.0</span><span class="number">.1</span>/jre</span><br><span class="line">export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br></pre></td></tr></table></figure><h4 id="4-使修改生效："><a href="#4-使修改生效：" class="headerlink" title="4.使修改生效："></a>4.使修改生效：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="5-验证是否安装成功："><a href="#5-验证是否安装成功：" class="headerlink" title="5.验证是否安装成功："></a>5.验证是否安装成功：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>成功！</p><h4 id="解决Linux下更换jdk版本，source-etc-profile还是原来的版本问题"><a href="#解决Linux下更换jdk版本，source-etc-profile还是原来的版本问题" class="headerlink" title="解决Linux下更换jdk版本，source /etc/profile还是原来的版本问题"></a>解决Linux下更换jdk版本，source /etc/profile还是原来的版本问题</h4><p>在服务器上更新了新的 jdk，也在 /etc/profile 中设置了新的 JAVA_HOME，并且 source /etc/profile</p><p>然后使用<a href="http://lib.csdn.net/base/javase">Java</a> -version 和 javac -version 发现版本还是老版本，死活没有使用我新指定的。</p><p>中间各种排查，这里就不废话了，下面是文件的根源和解决方法：</p><p>使用which java 和 which javac 分别可以看到</p><p>[root@localhost ~]# which java<br>/usr/bin/java<br>[root@localhost ~]# which javac<br>/usr/bin/javac</p><p>简单说一下，就是把这2个文件ln -s 到我们新的jdk 下的 java 和 javac 上，命令如下：</p><p>rm -rf /usr/bin/java</p><p>rm -rf /usr/bin/javac</p><p>ln -s $JAVA_HOME/bin/javac /usr/bin/javac</p><p>ln -s $JAVA_HOME/bin/java /usr/bin/java</p><p>如果以上不行则直接把path目录下的java和javac拷贝到/usr/bin/下，path目录中就是 $JAVA_HOME/bin/，</p><p>有的不是安装而是免安装的解压包，一样的，一般免安装包在/usr/java下，这个看自己目录来。</p><p>最终最重要的一点，/usr/bin/下的java和javac都要改权限，chmod 755 java、chmod 755 javac，</p><p>如果是免安装解压缩包，则解压后的包整个目录要改权限 chmod 755 /usr/java/jdk1.8.0_181/ -R (我的免安装包版本是1.8.0_181，放在了/usr/java/目录下，不改则使用java命令起服务起不来)</p><p>这样执行以后，然后 java -version 、 javac -version </p><p>ps aux | grep elasticsearch</p><p>kill - 9 进程ID</p><p>查找一个文件</p><p>find / -name jvm.options</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;linux命令&quot;&gt;&lt;a href=&quot;#linux命令&quot; class=&quot;headerlink&quot; title=&quot;linux命令&quot;&gt;&lt;/a&gt;linux命令&lt;/h1&gt;&lt;h3 id=&quot;linux下的jdk安装&quot;&gt;&lt;a href=&quot;#linux下的jdk安装&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>日期转换工具类</title>
    <link href="http://example.com/2019/11/07/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E6%97%A5%E6%9C%9F%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://example.com/2019/11/07/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E6%97%A5%E6%9C%9F%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7%E7%B1%BB/</id>
    <published>2019-11-07T05:54:43.000Z</published>
    <updated>2020-12-14T12:02:42.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="日期转换工具类"><a href="#日期转换工具类" class="headerlink" title="日期转换工具类"></a>日期转换工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wang.yinggang.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期操作工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期转换-  String -&gt; Date</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dateString 字符串时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Date类型信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parseString2Date</span><span class="params">(String dateString)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dateString == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parseString2Date(dateString, <span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期转换-  String -&gt; Date</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dateString 字符串时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern    格式模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Date类型信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parseString2Date</span><span class="params">(String dateString, String pattern)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dateString == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(pattern);</span><br><span class="line">        Date date = sdf.parse(dateString);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期转换 Date -&gt; String</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date Date类型信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字符串时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">parseDate2String</span><span class="params">(Date date)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (date == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parseDate2String(date, <span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期转换 Date -&gt; String</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date    Date类型信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 格式模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字符串时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">parseDate2String</span><span class="params">(Date date, String pattern)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (date == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(pattern);</span><br><span class="line">        String strDate = sdf.format(date);</span><br><span class="line">        <span class="keyword">return</span> strDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前日期的本周一是几号</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 本周一的日期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getThisWeekMonday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="comment">// 获得当前日期是一个星期的第几天</span></span><br><span class="line">        <span class="keyword">int</span> dayWeek = cal.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == dayWeek) &#123;</span><br><span class="line">            cal.add(Calendar.DAY_OF_MONTH, -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置一个星期的第一天，按中国的习惯一个星期的第一天是星期一</span></span><br><span class="line">        cal.setFirstDayOfWeek(Calendar.MONDAY);</span><br><span class="line">        <span class="comment">// 获得当前日期是一个星期的第几天</span></span><br><span class="line">        <span class="keyword">int</span> day = cal.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">        <span class="comment">// 根据日历的规则，给当前日期减去星期几与一个星期第一天的差值</span></span><br><span class="line">        cal.add(Calendar.DATE, cal.getFirstDayOfWeek() - day);</span><br><span class="line">        <span class="keyword">return</span> cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前日期周的最后一天</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前日期周的最后一天</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getSundayOfThisWeek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        <span class="keyword">int</span> dayOfWeek = c.get(Calendar.DAY_OF_WEEK) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (dayOfWeek == <span class="number">0</span>) &#123;</span><br><span class="line">            dayOfWeek = <span class="number">7</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c.add(Calendar.DATE, -dayOfWeek + <span class="number">7</span>);</span><br><span class="line">        <span class="keyword">return</span> c.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据日期区间获取月份列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minDate 开始时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxDate 结束时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 月份列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getMonthBetween</span><span class="params">(String minDate, String maxDate, String format)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Calendar min = Calendar.getInstance();</span><br><span class="line">        Calendar max = Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">        min.setTime(sdf.parse(minDate));</span><br><span class="line">        min.set(min.get(Calendar.YEAR), min.get(Calendar.MONTH), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        max.setTime(sdf.parse(maxDate));</span><br><span class="line">        max.set(max.get(Calendar.YEAR), max.get(Calendar.MONTH), <span class="number">2</span>);</span><br><span class="line">        SimpleDateFormat sdf2 = <span class="keyword">new</span> SimpleDateFormat(format);</span><br><span class="line"></span><br><span class="line">        Calendar curr = min;</span><br><span class="line">        <span class="keyword">while</span> (curr.before(max)) &#123;</span><br><span class="line">            result.add(sdf2.format(curr.getTime()));</span><br><span class="line">            curr.add(Calendar.MONTH, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据日期获取年度中的周索引</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date 日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 周索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getWeekOfYear</span><span class="params">(String date)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Date useDate = parseString2Date(date);</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(useDate);</span><br><span class="line">        <span class="keyword">return</span> cal.get(Calendar.WEEK_OF_YEAR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据年份获取年中周列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> year 年分</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 周列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Integer, String&gt; <span class="title">getWeeksOfYear</span><span class="params">(String year)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Date useDate = parseString2Date(year, <span class="string">&quot;yyyy&quot;</span>);</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(useDate);</span><br><span class="line">        <span class="comment">//获取年中周数量</span></span><br><span class="line">        <span class="keyword">int</span> weeksCount = cal.getWeeksInWeekYear();</span><br><span class="line">        Map&lt;Integer, String&gt; mapWeeks = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">55</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; weeksCount; i++) &#123;</span><br><span class="line">            cal.get(Calendar.DAY_OF_YEAR);</span><br><span class="line">            mapWeeks.put(i + <span class="number">1</span>, parseDate2String(getFirstDayOfWeek(cal.get(Calendar.YEAR), i)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mapWeeks;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某年的第几周的开始日期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> year 年分</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> week 周索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 开始日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getFirstDayOfWeek</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> week)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Calendar c = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">        c.set(Calendar.YEAR, year);</span><br><span class="line">        c.set(Calendar.MONTH, Calendar.JANUARY);</span><br><span class="line">        c.set(Calendar.DATE, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Calendar cal = (GregorianCalendar) c.clone();</span><br><span class="line">        cal.add(Calendar.DATE, week * <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getFirstDayOfWeek(cal.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某年的第几周的结束日期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> year 年份</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> week 周索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结束日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getLastDayOfWeek</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> week)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Calendar c = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">        c.set(Calendar.YEAR, year);</span><br><span class="line">        c.set(Calendar.MONTH, Calendar.JANUARY);</span><br><span class="line">        c.set(Calendar.DATE, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Calendar cal = (GregorianCalendar) c.clone();</span><br><span class="line">        cal.add(Calendar.DATE, week * <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getLastDayOfWeek(cal.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前时间所在周的开始日期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date 当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 开始时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getFirstDayOfWeek</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        Calendar c = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">        c.setFirstDayOfWeek(Calendar.SUNDAY);</span><br><span class="line">        c.setTime(date);</span><br><span class="line">        c.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek());</span><br><span class="line">        <span class="keyword">return</span> c.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前时间所在周的结束日期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date 当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结束日期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getLastDayOfWeek</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        Calendar c = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">        c.setFirstDayOfWeek(Calendar.SUNDAY);</span><br><span class="line">        c.setTime(date);</span><br><span class="line">        c.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() + <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">return</span> c.getTime();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获得上周一的日期</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">geLastWeekMonday</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(getThisWeekMonday(date));</span><br><span class="line">        cal.add(Calendar.DATE, -<span class="number">7</span>);</span><br><span class="line">        <span class="keyword">return</span> cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得本周一的日期</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getThisWeekMonday</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(date);</span><br><span class="line">        <span class="comment">// 获得当前日期是一个星期的第几天</span></span><br><span class="line">        <span class="keyword">int</span> dayWeek = cal.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == dayWeek) &#123;</span><br><span class="line">            cal.add(Calendar.DAY_OF_MONTH, -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置一个星期的第一天，按中国的习惯一个星期的第一天是星期一</span></span><br><span class="line">        cal.setFirstDayOfWeek(Calendar.MONDAY);</span><br><span class="line">        <span class="comment">// 获得当前日期是一个星期的第几天</span></span><br><span class="line">        <span class="keyword">int</span> day = cal.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">        <span class="comment">// 根据日历的规则，给当前日期减去星期几与一个星期第一天的差值</span></span><br><span class="line">        cal.add(Calendar.DATE, cal.getFirstDayOfWeek() - day);</span><br><span class="line">        <span class="keyword">return</span> cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得下周一的日期</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getNextWeekMonday</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.setTime(getThisWeekMonday(date));</span><br><span class="line">        cal.add(Calendar.DATE, <span class="number">7</span>);</span><br><span class="line">        <span class="keyword">return</span> cal.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得今天日期</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getToday</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得本月一日的日期</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getFirstDay4ThisMonth</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.set(Calendar.DAY_OF_MONTH,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> calendar.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本周一&quot;</span> + parseDate2String(getThisWeekMonday()));</span><br><span class="line">            System.out.println(<span class="string">&quot;本月一日&quot;</span> + parseDate2String(getFirstDay4ThisMonth()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;日期转换工具类&quot;&gt;&lt;a href=&quot;#日期转换工具类&quot; class=&quot;headerlink&quot; title=&quot;日期转换工具类&quot;&gt;&lt;/a&gt;日期转换工具类&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    
    <category term="工具类" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
  </entry>
  
</feed>
