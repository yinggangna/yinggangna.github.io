<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WinGone&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-23T12:07:43.147Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>WangYinggang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/01/23/docker/"/>
    <id>http://example.com/2021/01/23/docker/</id>
    <published>2021-01-23T09:55:47.832Z</published>
    <updated>2021-01-23T12:07:43.147Z</updated>
    
    <content type="html"><![CDATA[<hr><p>   layout: “docker”<br>    title: “docker”<br>    date: 2020-06-23 09:48:33<br>    comments: true<br>    tags: docker</p><hr><h2 id="1-docker介绍"><a href="#1-docker介绍" class="headerlink" title="1. docker介绍"></a>1. docker介绍</h2><h3 id="1-1-docker概念"><a href="#1-1-docker概念" class="headerlink" title="1.1 docker概念"></a>1.1 docker概念</h3><p>我们写的代码会接触到好几个环境：开发环境、测试环境以及生产环境：</p><p><img src="/2021/01/23/docker/.%5C1592741447865.png" alt="1592741447865"></p><ul><li><p>Docker 是一个开源的应用容器引擎</p></li><li><p>诞生于 2013 年初，基于 Go 语言实现， dotCloud 公司出品（后改名为Docker Inc） </p></li><li><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上</p></li><li><p>容器是完全使用沙箱机制，相互隔离</p></li><li><p>容器性能开销极低</p></li><li><p>Docker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版）</p></li></ul><h3 id="1-2-安装docker"><a href="#1-2-安装docker" class="headerlink" title="1.2 安装docker"></a>1.2 安装docker</h3><p>Docker可以运行在MAC、Windows、CentOS、UBUNTU等操作系统上，本课程基于CentOS 7 安装 </p><p>Docker。官网：<a href="https://www.docker.com/">https://www.docker.com</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、yum 包更新到最新</span> </span><br><span class="line">yum update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、 设置yum源</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、 安装docker，出现输入的界面都按 y</span> </span><br><span class="line">yum install -y docker-ce</span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、 查看docker版本，验证是否验证成功</span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><h3 id="1-3-docker架构"><a href="#1-3-docker架构" class="headerlink" title="1.3 docker架构"></a>1.3 docker架构</h3><p><img src="/2021/01/23/docker/.%5C1592741985974.png" alt="1592741985974"></p><ul><li><strong>镜像（Image）：</strong>Docker 镜像（Image），就相当于是 一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包 含了完整的一套 Ubuntu16.04 最小系统的 root 文件系 统。</li><li><strong>容器（Container）</strong>：镜像（Image）和容器（Contain er）的关系，就像是面向对象程序设计中的类和对象一 样，镜像是静态的定义，容器是镜像运行时的实体。容 器可以被创建、启动、停止、删除、暂停等。 </li><li><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心， 用来保存镜像。</li></ul><h3 id="1-4-配置-Docker-镜像加速器"><a href="#1-4-配置-Docker-镜像加速器" class="headerlink" title="1.4 配置 Docker 镜像加速器"></a>1.4 配置 Docker 镜像加速器</h3><p>国内拉取镜像的话可能会比较忙，这里提高加速的方法<br>Ubuntu 16.04+、Debian 8+、CentOS 7<br>对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，将来从docker hub（<a href="https://hub.docker.com/%EF%BC%89%E4%B8%8A%E4%B8%8B%E8%BD%BD">https://hub.docker.com/）上下载</a> </p><p>docker镜像，太慢。一般都会配置镜像加速器：</p><p>• USTC：中科大镜像加速器（<a href="https://docker.mirrors.ustc.edu.cn)/">https://docker.mirrors.ustc.edu.cn）</a> </p><p>• 阿里云 </p><p>• 网易云 </p><p>• 腾讯云</p><p>本次我们使用阿里云镜像</p><p>1.登录阿里云网站（<a href="https://www.aliyun.com/%EF%BC%89">https://www.aliyun.com/）</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://z571z49g.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p><img src="/2021/01/23/docker/.%5C1592742973168.png" alt="1592742973168"></p><ol start="2"><li> 查看文件/etc/docker/daemon.json</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 执行如下命令：</span> </span><br><span class="line">cat /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p><img src="/2021/01/23/docker/.%5C1592743065182.png" alt="1592743065182"></p><h2 id="2-docker命令"><a href="#2-docker命令" class="headerlink" title="2 .docker命令"></a>2 .docker命令</h2><h3 id="2-1-进程相关命令"><a href="#2-1-进程相关命令" class="headerlink" title="2.1 进程相关命令"></a>2.1 进程相关命令</h3><p>关于进程相关的命令</p><h4 id="2-1-1-启动docker服务"><a href="#2-1-1-启动docker服务" class="headerlink" title="2.1.1 启动docker服务"></a>2.1.1 启动docker服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="2-1-2-停止docker服务"><a href="#2-1-2-停止docker服务" class="headerlink" title="2.1.2 停止docker服务"></a>2.1.2 停止docker服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><h4 id="2-1-3-重启docker服务"><a href="#2-1-3-重启docker服务" class="headerlink" title="2.1.3 重启docker服务"></a>2.1.3 重启docker服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="2-1-4-查看docker服务状态"><a href="#2-1-4-查看docker服务状态" class="headerlink" title="2.1.4 查看docker服务状态"></a>2.1.4 查看docker服务状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><h4 id="2-1-5-开机启动docker服务"><a href="#2-1-5-开机启动docker服务" class="headerlink" title="2.1.5 开机启动docker服务"></a>2.1.5 开机启动docker服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><p><img src="/2021/01/23/docker/.%5C1592743261888.png" alt="1592743261888"></p><h3 id="2-2-Docker-镜像相关命令"><a href="#2-2-Docker-镜像相关命令" class="headerlink" title="2.2 Docker 镜像相关命令"></a>2.2 Docker 镜像相关命令</h3><h4 id="2-2-1-查看镜像"><a href="#2-2-1-查看镜像" class="headerlink" title="2.2.1 查看镜像"></a>2.2.1 查看镜像</h4><ul><li>查看本地所有的镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker images –q # 查看所用镜像的id</span><br></pre></td></tr></table></figure><p><img src="/2021/01/23/docker/.%5C1592743915716.png" alt="1592743915716"></p><p>REPOSITORY：镜像名称 </p><p>TAG：镜像标签 </p><p>IMAGE ID：镜像ID </p><p>CREATED：镜像的创建日期 </p><p>SIZE：镜像大小</p><h4 id="2-2-2-搜索镜像"><a href="#2-2-2-搜索镜像" class="headerlink" title="2.2.2 搜索镜像"></a>2.2.2 搜索镜像</h4><ul><li>从网络中查找需要的镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像名称</span><br></pre></td></tr></table></figure><p><img src="/2021/01/23/docker/.%5C1592744016271.png" alt="1592744016271"></p><p>NAME：镜像名称 </p><p>DESCRIPTION：镜像描述 </p><p>STARS：用户评价，反应一个镜像的受欢迎程度 </p><p>OFFICIAL：是否官方 </p><p>AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的 </p><h4 id="2-2-3-拉取镜像"><a href="#2-2-3-拉取镜像" class="headerlink" title="2.2.3 拉取镜像"></a>2.2.3 拉取镜像</h4><p>从Docker仓库下载镜像到本地，镜像名称格式为 名称:版本号，如果版本号不指定则是最新的版本。 如果不知道镜像版本，可以去docker hub 搜索对应镜像查看。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名称</span><br></pre></td></tr></table></figure><h4 id="2-2-4-删除镜像"><a href="#2-2-4-删除镜像" class="headerlink" title="2.2.4 删除镜像"></a>2.2.4 删除镜像</h4><p> 删除本地镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f id # 删除指定本地镜像</span><br><span class="line">docker rmi -f `docker images -q` # 删除所有本地镜像</span><br></pre></td></tr></table></figure><p>关于docker更多命令， 大家可以菜鸟教程查看, 网址：</p><p><a href="https://www.runoob.com/docker/docker-command-manual.html">https://www.runoob.com/docker/docker-command-manual.html</a></p><h3 id="2-3-容器相关的命令"><a href="#2-3-容器相关的命令" class="headerlink" title="2.3 容器相关的命令"></a>2.3 容器相关的命令</h3><h4 id="2-3-1-查看容器"><a href="#2-3-1-查看容器" class="headerlink" title="2.3.1 查看容器"></a>2.3.1 查看容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps # 查看正在运行的容器</span><br><span class="line">docker ps –a # 查看所有容器，包括正在运行和停止的容器</span><br></pre></td></tr></table></figure><h4 id="2-3-2-创建并启动容器"><a href="#2-3-2-创建并启动容器" class="headerlink" title="2.3.2 创建并启动容器"></a>2.3.2 创建并启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run 参数</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><p>• -i：保持容器运行。通常与 -t 同时使用。加入it这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭。 </p><p>• -t：为容器重新分配一个伪输入终端，通常与 -i 同时使用。 </p><p>• -d：以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用docker exec 进入容器。退出后，容器不会关闭。 </p><p>• -it 创建的容器一般称为交互式容器，-id 创建的容器一般称为守护式容器 </p><p>• –name：为创建的容器命名。</p><p><strong>1）交互式容器</strong> </p><p>以<strong>交互式</strong>方式创建并启动容器，启动完成后，直接进入当前容器。使用exit命令退出容器。需要注意的是以此种方式 启动容器，如果退出容器，则容器会进入<strong>停止</strong>状态。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先拉取一个镜像；这一步不是每次启动容器都要做的，而是因为前面我们删除了镜像，无镜像可用所以才再拉取一个</span> </span><br><span class="line">docker pull centos:7 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建并启动名称为 mycentos7 的交互式容器；下面指令中的镜像名称 centos:7 也可以使用镜像id</span> </span><br><span class="line">docker run -it --name=mycentos7 centos:7 /bin/bash</span><br></pre></td></tr></table></figure><p><strong>2）守护式容器</strong></p><p>创建一个守护式容器；如果对于一个需要长期运行的容器来说，我们可以创建一个守护式容器。命令如下（容器名称 不能重复）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建并启动守护式容器</span></span><br><span class="line">docker run -di --name=mycentos2 centos:7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">登录进入容器命令为：docker <span class="built_in">exec</span> -it container_name (或者 container_id) /bin/bash（<span class="built_in">exit</span>退出 时，容器不会停止）</span></span><br><span class="line">docker exec -it mycentos2 /bin/bash</span><br></pre></td></tr></table></figure><h4 id="2-3-3-进入容器"><a href="#2-3-3-进入容器" class="headerlink" title="2.3.3 进入容器"></a>2.3.3 进入容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec 参数 # 退出容器，容器不会关闭</span><br><span class="line">eg: </span><br><span class="line">docker exec -it mycentos2 /bin/bash</span><br></pre></td></tr></table></figure><h4 id="2-3-4-停止容器"><a href="#2-3-4-停止容器" class="headerlink" title="2.3.4 停止容器"></a>2.3.4 停止容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器名称或者容器id</span><br></pre></td></tr></table></figure><h4 id="2-3-5-启动容器"><a href="#2-3-5-启动容器" class="headerlink" title="2.3.5 启动容器"></a>2.3.5 启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器名称或者容器id</span><br></pre></td></tr></table></figure><h4 id="2-3-6-删除容器"><a href="#2-3-6-删除容器" class="headerlink" title="2.3.6 删除容器"></a>2.3.6 删除容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">删除指定容器</span></span><br><span class="line">docker rm 容器名称或者容器id</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除所有容器：</span></span><br><span class="line">docker rm `docker ps -a -q`</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：如果容器是运行状态则删除失败，需要停止容器才能删除</strong></p><h4 id="2-3-7-查看容器信息"><a href="#2-3-7-查看容器信息" class="headerlink" title="2.3. 7 查看容器信息"></a>2.3. 7 查看容器信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器名称或者容器id</span><br></pre></td></tr></table></figure><p><img src="/2021/01/23/docker/.%5C1592745823262.png" alt="1592745823262"></p><p>说明：容器之间在一个局域网内，linux宿主机器可以与容器进行通信；但是外部的物理机笔记本是不能与容器直接通信的，如果需要则需要通过宿主机器端口的代理。 </p><h2 id="3-docker容器的数据卷"><a href="#3-docker容器的数据卷" class="headerlink" title="3 . docker容器的数据卷"></a>3 . docker容器的数据卷</h2><h3 id="3-1-数据卷概念"><a href="#3-1-数据卷概念" class="headerlink" title="3.1 数据卷概念"></a>3.1 数据卷概念</h3><p>思考：</p><p>• Docker 容器删除后，在容器中产生的数据也会随之销毁 </p><p>• Docker 容器和外部机器可以直接交换文件吗？ </p><p>• 容器之间想要进行数据交互？</p><p><img src="/2021/01/23/docker/.%5C1592748818477.png" alt="1592748818477"></p><p><strong>数据卷</strong></p><ul><li>数据卷是宿主机中的一个目录或文件</li><li>当容器目录和数据卷目录绑定后，对方的修改会立即同步</li><li>一个数据卷可以被多个容器同时挂载</li><li>一个容器也可以被挂载多个数据卷</li></ul><p><img src="/2021/01/23/docker/.%5C1592748888266.png" alt="1592748888266"></p><p><strong>数据卷的作用</strong></p><p>• 容器数据持久化 </p><p>• 外部机器和容器间接通信 </p><p>• 容器之间数据交换 </p><h3 id="3-2-配置数据卷"><a href="#3-2-配置数据卷" class="headerlink" title="3.2 配置数据卷"></a>3.2 配置数据卷</h3><p><strong>创建启动容器时，使用 –v 参数 设置数据卷</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ... –v 宿主机目录(文件):容器内目录(文件) ...</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong> </p><ol><li><p>目录必须是绝对路径 </p></li><li><p>如果目录不存在，会自动创建 </p></li><li><p>一个容器可以挂载多个数据卷</p></li><li><p>一个数据卷也可以被多个容器挂载</p></li><li><p>两个容器可以挂载同一个容器</p></li></ol><p>在宿主机中实现与容器目录的挂载：</p><p>在c1容器中的root目录下就可以看到data_container文件夹：如下图</p><p><img src="/2021/01/23/docker/.%5C1592750980127.png" alt="1592750980127"></p><p>同时我们我们回到宿主机中，可以在data文件夹下创建一个文件itcast.txt ,可以发现在容器中也会生成itcast.txt文件：如下图</p><p><img src="/2021/01/23/docker/.%5C1592751613509.png" alt="1592751613509"></p><ol><li>数据卷的持久化：</li></ol><p>​    当我们把c1容器删除后，宿主机中的数据卷依然存在。  所以当我们重新创建一个容器的同时依然可以挂载宿主机中的data文件夹，对应data里的数据依然同步到容器中。</p><ol start="2"><li>一个容器可以挂载多个数据卷</li></ol><p><img src="/2021/01/23/docker/.%5C1592752027409.png" alt="1592752027409"></p><ol start="3"><li>多个容器可以挂载同一个数据卷</li></ol><p><img src="/2021/01/23/docker/.%5C1592749838266.png" alt="1592749838266"></p><p>分别创建两个容器，两个容器都挂载宿主机中data目录，当 修改c3容器的data目录c4会实现同步。</p><p>从而实现两个容器之间的交互。</p><h3 id="3-3-配置数据卷容器"><a href="#3-3-配置数据卷容器" class="headerlink" title="3.3 配置数据卷容器"></a>3.3 配置数据卷容器</h3><p><strong>多容器进行数据交换</strong> </p><ol><li><p>多个容器挂载同一个数据卷 </p></li><li><p>数据卷容器 </p></li></ol><p><img src="/2021/01/23/docker/.%5C1592753247374.png" alt="1592753247374"></p><p><strong>步骤：</strong></p><p>1.创建启动c3数据卷容器，使用 –v 参数 设置数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run –it --name=c3 –v /volume centos:7 /bin/bash</span><br></pre></td></tr></table></figure><ol start="2"><li>创建启动 c1 c2 容器，使用 –-volumes-from 参数 设置数据卷</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run –it --name=c1 --volumes-from c3 centos:7 /bin/bash</span><br><span class="line"></span><br><span class="line">docker run –it --name=c2 --volumes-from c3 centos:7 /bin/bash</span><br></pre></td></tr></table></figure><h3 id="3-4-数据卷小结"><a href="#3-4-数据卷小结" class="headerlink" title="3.4 数据卷小结"></a>3.4 数据卷小结</h3><ol><li><p>数据卷概念<br> •宿主机的一个目录或文件</p></li><li><p>数据卷作用<br> • 容器数据持久化<br> • 客户端和容器数据交换<br> • 容器间数据交换</p></li><li><p>数据卷容器<br> • 创建一个容器，挂载一个目录，让其他容器继承自该容器( –volume-from )。 </p><p>• 通过简单方式实现数据卷配置</p></li></ol><h2 id="4-应用部署"><a href="#4-应用部署" class="headerlink" title="4. 应用部署"></a>4. 应用部署</h2><p>参考资料中docker应用部署.md</p><h2 id="5-Docerfile"><a href="#5-Docerfile" class="headerlink" title="5.  Docerfile"></a>5.  Docerfile</h2><p>前面的课程中已经知道了，要获得镜像，可以从Docker仓库中进行下载。那如果我们想自己开发一个镜像，那该如 何做呢？答案是：Dockerfifile </p><p>Dockerfifile其实就是一个文本文件，由一系列命令和参数构成，Docker可以读取Dockerfifile文件并根据Dockerfifile文 件的描述来构建镜像。 </p><h3 id="5-1-Docker-镜像原理-了解"><a href="#5-1-Docker-镜像原理-了解" class="headerlink" title="5.1 Docker 镜像原理(了解)"></a>5.1 Docker 镜像原理(了解)</h3><p>思考：</p><ol><li><p>Docker 镜像本质是什么？<br>是一个分层文件系统</p></li><li><p>Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？ ?</p><p>  Centos的iso镜像文件包含bootfs和rootfs，而docker的centos镜像复用操作系统的bootfs，只有rootfs和其他镜像层</p></li><li><p>Docker 中一个tomcat镜像为什么有500MB，而一个tomcat安装包只有70多MB？ ? </p><p>由于docker中镜像是分层的，tomcat虽然只有70多MB，但他需要依赖于父镜像和基础镜像，所有整个对外暴露的<br>tomcat镜像大小500多MB</p></li></ol><p><img src="/2021/01/23/docker/.%5C1592761590593.png" alt="1592761590593"></p><p><img src="/2021/01/23/docker/.%5C1592761605037.png" alt="1592761605037"></p><h3 id="5-2-镜像制作"><a href="#5-2-镜像制作" class="headerlink" title="5.2 镜像制作"></a>5.2 镜像制作</h3><p><img src="/2021/01/23/docker/.%5C1592762650841.png" alt="1592762650841"></p><h4 id="5-2-1-容器转为镜像"><a href="#5-2-1-容器转为镜像" class="headerlink" title="5.2.1 容器转为镜像"></a>5.2.1 容器转为镜像</h4><ol><li>使用docker commit命令可以将容器保存为镜像。</li></ol><p>命令形式：docker commit 容器名称 镜像名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">docker commit 381827f60f70 itheima_tomcat:1.0</span><br></pre></td></tr></table></figure><ol start="2"><li>使用docker save命令可以将已有镜像保存为tar 文件。</li></ol><p>命令形式：docker save –o tar文件名 镜像名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o itheima_tomcat:1.0.tar</span><br></pre></td></tr></table></figure><ol start="3"><li>使用docker load命令可以根据tar文件恢复为docker镜像。</li></ol><p>命令形式：docker load -i tar文件名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 加载恢复镜像</span></span><br><span class="line">docker load -i itheima_tomcat.tar </span><br><span class="line"><span class="meta">#</span><span class="bash"> 在镜像恢复之后，基于该镜像再次创建启动容器</span> </span><br><span class="line">docker run -di --name=new_tomcat -p 8080:8080 itheima_tomcat:1.0</span><br></pre></td></tr></table></figure><p><strong>注意：新的镜像制作后，原本容器中挂载的目录将失效，  索引一般在恢复镜像创建容器容器的时候需要重新挂载。</strong></p><h3 id="5-3-Dockerfile-概念"><a href="#5-3-Dockerfile-概念" class="headerlink" title="5.3 Dockerfile 概念"></a>5.3 Dockerfile 概念</h3><ul><li>Dockerfile 是一个文本文件</li><li>包含了一条条的指令</li><li>每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像</li><li>对于开发人员：可以为开发团队提供一个完全一致的开发环境</li><li>对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件<br>构建一个新的镜像开始工作了</li><li>对于运维人员：在部署时，可以实现应用的无缝移植</li></ul><p>Dochub网址：<a href="https://hub.docker.com/">https://hub.docker.com</a></p><p><img src="/2021/01/23/docker/.%5C1592763188913.png" alt="1592763188913"></p><p><strong>关键字：</strong></p><table><thead><tr><th>关键字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td>指定dockerfile基于哪个image构建</td></tr><tr><td>MAINTAINER</td><td>作者信息</td><td>用来标明这个dockerfile谁写的</td></tr><tr><td>LABEL</td><td>标签</td><td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td></tr><tr><td>RUN</td><td>执行命令</td><td>执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN [“command” , “param1”,”param2”]</td></tr><tr><td>CMD</td><td>容器启动命令</td><td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [“command” , “param1”,”param2”]</td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td>一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td>build的时候复制文件到image中</td></tr><tr><td>ADD</td><td>添加文件</td><td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value</td></tr><tr><td>ARG</td><td>构建参数</td><td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td></tr><tr><td>VOLUME</td><td>定义外部可以挂载的数据卷</td><td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp</td></tr><tr><td>WORKDIR</td><td>工作目录</td><td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用户</td><td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信号量到宿主机</td><td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td>SHELL</td><td>指定执行脚本的shell</td><td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr></tbody></table><h3 id="5-4-Dockerfile-案例"><a href="#5-4-Dockerfile-案例" class="headerlink" title="5.4 Dockerfile 案例"></a>5.4 Dockerfile 案例</h3><h4 id="需求1："><a href="#需求1：" class="headerlink" title="需求1："></a>需求1：</h4><p>自定义centos7镜像。要求：</p><ol><li>默认登录路径为 /usr</li><li>可以使用vim</li></ol><p><strong>实现步骤</strong>：</p><p>①  定义父镜像：FROM centos:7</p><p>② 定义作者信息：MAINTAINER itheima <a href="mailto:&#105;&#x74;&#104;&#x65;&#x69;&#109;&#97;&#64;&#x69;&#116;&#99;&#x61;&#115;&#116;&#x2e;&#x63;&#x6e;">&#105;&#x74;&#104;&#x65;&#x69;&#109;&#97;&#64;&#x69;&#116;&#99;&#x61;&#115;&#116;&#x2e;&#x63;&#x6e;</a></p><p>③ 执行安装vim命令： RUN yum install -y vim</p><p>④ 定义默认的工作目录：WORKDIR /usr</p><p>⑤ 定义容器启动执行的命令：CMD /bin/bash</p><p>⑥ 通过dockerfile构建镜像：docker bulid –f dockerfile文件路径 –t 镜像名称:版本</p><p><strong>Dockerfile文件：</strong></p><p><img src="/2021/01/23/docker/.%5C1592764213253.png" alt="1592764213253"></p><p>文件编写完成执行命令构建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f ./centos_dockerfile -t itheima_centos:1 .</span><br></pre></td></tr></table></figure><h4 id="需求2："><a href="#需求2：" class="headerlink" title="需求2："></a>需求2：</h4><p>定义dockerfile，发布springboot项目</p><p><strong>实现步骤</strong> </p><p>​     ① 定义父镜像：FROM java:8 </p><p>​     ② 定义作者信息：MAINTAINER itheima <a href="mailto:&#x69;&#x74;&#x68;&#x65;&#x69;&#x6d;&#x61;&#x40;&#105;&#x74;&#x63;&#97;&#115;&#116;&#x2e;&#99;&#110;">&#x69;&#x74;&#x68;&#x65;&#x69;&#x6d;&#x61;&#x40;&#105;&#x74;&#x63;&#97;&#115;&#116;&#x2e;&#99;&#110;</a> </p><p>​     ③ 将jar包添加到容器： ADD springboot.jar app.jar </p><p>​     ④ 定义容器启动执行的命令：CMD java–jar app.jar </p><p>​     ⑤ 通过dockerfile构建镜像：docker bulid –f dockerfile文件路径 –t 镜像名称:版本</p><p><img src="/2021/01/23/docker/.%5C1592765120052.png" alt="1592765120052"></p><p>文件编写完成执行命令构建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f ./springboot_dockerfile -t app .</span><br></pre></td></tr></table></figure><h2 id="6-服务编排"><a href="#6-服务编排" class="headerlink" title="6.  服务编排"></a>6.  服务编排</h2><h2 id="6-1-服务编排概念"><a href="#6-1-服务编排概念" class="headerlink" title="6.1 服务编排概念"></a>6.1 服务编排概念</h2><p>微服务架构的应用系统中一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启停，维护的工作量会很大。</p><ul><li>要从Dockerfile build image 或者去dockerhub拉取image</li><li>要创建多个container</li><li> 要管理这些container（启动停止删除）</li><li> 服务编排： 按照一定的业务规则批量管理容器</li></ul><h2 id="6-2-Docker-Compose-概述"><a href="#6-2-Docker-Compose-概述" class="headerlink" title="6.2 Docker Compose 概述"></a>6.2 Docker Compose 概述</h2><h3 id="6-2-1-Docker-Compose"><a href="#6-2-1-Docker-Compose" class="headerlink" title="6.2.1 Docker Compose"></a>6.2.1 Docker Compose</h3><p>Docker Compose是一个编排多容器分布式部署的工具，提供命令集管理容器化应用的完整开发周期，包括服务构建 ，启动和停止。使用步骤： </p><ol><li><p>利用 Dockerfile 定义运行环境镜像 </p></li><li><p>使用 docker-compose.yml 定义组成应用的各服务 </p></li><li><p>运行 docker-compose up 启动应用</p></li></ol><p><img src="/2021/01/23/docker/.%5C1592767533518.png" alt="1592767533518"></p><h3 id="6-2-2-Docker-Compose-安装使用"><a href="#6-2-2-Docker-Compose-安装使用" class="headerlink" title="6.2.2  Docker Compose 安装使用"></a>6.2.2  Docker Compose 安装使用</h3><p>参考《docker-compose.md》</p><h2 id="7-Docker-私有仓库"><a href="#7-Docker-私有仓库" class="headerlink" title="7. Docker 私有仓库"></a>7. Docker 私有仓库</h2><p>Docker官方的Docker hub（<a href="https://hub.docker.com)是一个用于管理公共镜像的仓库,我们可以从上面拉取镜像/">https://hub.docker.com）是一个用于管理公共镜像的仓库，我们可以从上面拉取镜像</a> 到本地，也可以把我们自己的镜像推送上去。但是，有时候我们的服务器无法访问互联网，或者你不希望将自己的镜 像放到公网当中，那么我们就需要搭建自己的私有仓库来存储和管理自己的镜像。</p><p>搭建参考《docker 私有仓库.md》</p><h2 id="8-Docker相关概念"><a href="#8-Docker相关概念" class="headerlink" title="8. Docker相关概念"></a>8. Docker相关概念</h2><p>docker容器虚拟化 与 传统虚拟机比较：</p><p><img src="/2021/01/23/docker/.%5C1592770300637.png" alt="1592770300637"></p><p><img src="/2021/01/23/docker/.%5C1592770331752.png" alt="1592770331752"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;   layout: “docker”&lt;br&gt;    title: “docker”&lt;br&gt;    date: 2020-06-23 09:48:33&lt;br&gt;    comments: true&lt;br&gt;    tags: docker&lt;/p&gt;
&lt;hr&gt;
&lt;h2 i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>idea插件</title>
    <link href="http://example.com/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/"/>
    <id>http://example.com/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/</id>
    <published>2021-01-23T09:49:38.000Z</published>
    <updated>2021-01-23T09:33:21.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-自动导包"><a href="#1-自动导包" class="headerlink" title="1.自动导包"></a>1.自动导包</h1><p>下面是Auto Import设置步骤详解。</p><p>Settings→Editor→General→Auto Import<br>然后勾选Add unambiguous imports on the fly以及Optimize imports on the fly</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5C1337265-20180413112619423-1610499505.png" alt="img"></p><p>Add unambiguous imports on the fly：快速添加明确的导入。</p><p>Optimize imports on the fly：快速优化导入，优化的意思即自动帮助删除无用的导入。</p><h1 id="2-IntelliJ-Idea设置-自定义的-类代码注释模板"><a href="#2-IntelliJ-Idea设置-自定义的-类代码注释模板" class="headerlink" title="2.IntelliJ Idea设置(自定义的)类代码注释模板"></a>2.IntelliJ Idea设置(自定义的)类代码注释模板</h1><p> 用IntelliJ Idea开发的时候代码没有注释或者注释不如人意，我们就自定义一下类代码的注释。</p><p>​    一、打开Settings – Editor – Code Style – File and Code Templates</p><p>​        <img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5CSouthEast.png" alt="img"></p><p>​     二、注释模板内容</p><p>​       </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* $&#123;DESCRIPTION&#125;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> 名字</span></span><br><span class="line"><span class="comment">* <span class="doctag">@create</span> $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><p>​     三、效果</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5C70.png" alt="img"></p><h1 id="3-取消Idea开始界面打开默认项目配置"><a href="#3-取消Idea开始界面打开默认项目配置" class="headerlink" title="3.取消Idea开始界面打开默认项目配置"></a>3.取消Idea开始界面打开默认项目配置</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>​      idea是非常强大的开发集成工具，打开idea软件默认会打开最近一次的项目工程，有时候我们并不需要开发上次的工程，而需要打开另外一个工程，这样默认给打开的工程需要关闭切换到新的工程。那么可不可以取消idea默认打开工程呢，当然是可以的。下面就来介绍下如何取消设置。</p><h2 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h2><p>​      1、打开idea软件，这个时候没有设置之前，会默认打开上次的项目工程。选择菜单File&gt;Settings进入设置页面。</p><p>​      2、左侧树形菜单，选择Appearance &amp; Behavior&gt;System Settings，进入系统设置页面。</p><p>​      3、在Startup/Shutdown栏目处，去掉默认的勾选Reopen last project on startup（在启动的时候打开上次的项目），去掉勾选之后，点击确认。</p><p>​         <img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5CSouthEast11.png" alt="img"></p><p>​       4、关闭idea软件后，再次打开idea软件，这个时候没有直接进入项目工程，而是进入了欢迎页面，在欢迎页面左侧列表是历史打开的项目工程，可以选择一个打开，右侧可以创建新的工程或导入新的工程等</p><p>​         <img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5CSouthEast12.png" alt="img"></p><p>​       5、在刚刚关闭idea软件的时候，你可能会注意到一个提示框，是确认关闭的提示窗口，防止误操作关闭了当前的工作空间。</p><p>​         <img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5CSouthEast13.png" alt="img"></p><p>​       6、 可能某些人不经意勾选了Do not ask me again。结果每次关闭都不会有确认提示了。一不小心就把当前的窗口误操作关闭了。这个开关就在上面设置的那个取消打开默认工程的配置的下方。将Confirm application exit选项再次勾选上。这个时候关闭确认提示就再次开启了。</p><p>​         <img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5CSouthEast14.png" alt="img"></p><h1 id="4-IDEA使用—代码如何在方法之间加入一条分割线"><a href="#4-IDEA使用—代码如何在方法之间加入一条分割线" class="headerlink" title="4.IDEA使用—代码如何在方法之间加入一条分割线"></a>4.IDEA使用—代码如何在方法之间加入一条分割线</h1><p>位置：【File】→【Settings】→【Editor】→【General】→【Appearance】→【Show method separators】<br>把【Show method separators】打上勾即可。<br><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5Caa15.png" alt="在这里插入图片描述"></p><h1 id="5-IDEA查看源码返回上一级快捷键"><a href="#5-IDEA查看源码返回上一级快捷键" class="headerlink" title="5.IDEA查看源码返回上一级快捷键"></a>5.IDEA查看源码返回上一级快捷键</h1><p>快捷键 alt + 方向左键 放回上一级</p><h1 id="6-Lombok插件及注解"><a href="#6-Lombok插件及注解" class="headerlink" title="6.Lombok插件及注解"></a>6.Lombok插件及注解</h1><p>安装</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5CC33FG37Gk4.png" alt="mark"></p><p>依赖</p><p>在自己的项目里添加 lombok 的编译支持，在 pom 文件里面添加 dependency</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.16.18&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3><h2 id="Data"><a href="#Data" class="headerlink" title="@Data"></a><strong>@Data</strong></h2><p>注解在 <strong>类</strong> 上；提供类所有属性的 get 和 set 方法，此外还提供了equals、canEqual、hashCode、toString 方法。</p><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5CmHj1eak6fJ.png" alt="mark"></p><h2 id="Setter"><a href="#Setter" class="headerlink" title="@Setter"></a><strong>@Setter</strong></h2><p>注解在 <strong>属性</strong> 上；为单个属性提供 set 方法; 注解在 <strong>类</strong> 上，为该类所有的属性提供 set 方法， 都提供默认构造方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5Clkkff2b6Dc.png" alt="mark">]</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5CJ9mC8FGfc0.png" alt="mark">]</p><h2 id="Getter"><a href="#Getter" class="headerlink" title="@Getter"></a><strong>@Getter</strong></h2><p>注解在 <strong>属性</strong> 上；为单个属性提供 get 方法; 注解在 <strong>类</strong> 上，为该类所有的属性提供 get 方法，都提供默认构造方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5Cd0F5h97J5f.png" alt="mark">]</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5CK0m81cFd6g.png" alt="mark">]</p><h2 id="Slf4j"><a href="#Slf4j" class="headerlink" title="@Slf4j"></a><strong>@Slf4j</strong></h2><p>注解在 <strong>类</strong> 上；为类提供一个 属性名为 log 的日志对象，提供默认构造方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5CBChd89Cbh5.png" alt="mark">]</p><h2 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a><strong>@AllArgsConstructor</strong></h2><p>注解在 <strong>类</strong> 上；为类提供一个全参的构造方法，加了这个注解后，类中不提供默认构造方法了。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5C4iji9AJ0fE.png" alt="mark">]</p><h2 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a><strong>@NoArgsConstructor</strong></h2><p>注解在 <strong>类</strong> 上；为类提供一个无参的构造方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5CJcdfmhDAaB.png" alt="mark">]</p><h2 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a><strong>@EqualsAndHashCode</strong></h2><p>注解在 <strong>类</strong> 上, 可以生成 equals、canEqual、hashCode 方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5CCKHe7EICGd.png" alt="mark">]</p><h2 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a><strong>@NonNull</strong></h2><p>注解在 <strong>属性</strong> 上，会自动产生一个关于此参数的非空检查，如果参数为空，则抛出一个空指针异常，也会有一个默认的无参构造方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5Cg6Lh1eh1jm.png" alt="mark">]</p><h2 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a><strong>@Cleanup</strong></h2><p>这个注解用在 <strong>变量</strong> 前面，可以保证此变量代表的资源会被自动关闭，默认是调用资源的 close() 方法，如果该资源有其它关闭方法，可使用 @Cleanup(“methodName”) 来指定要调用的方法，也会生成默认的构造方法</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5CBa1bDkKb9J.png" alt="mark">]</p><h2 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a><strong>@ToString</strong></h2><p>这个注解用在 <strong>类</strong> 上，可以生成所有参数的 toString 方法，还会生成默认的构造方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5C7LjglDeH8e.png" alt="mark">]</p><h2 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a><strong>@RequiredArgsConstructor</strong></h2><p>这个注解用在 <strong>类</strong> 上，使用类中所有带有 @NonNull 注解的或者带有 final 修饰的成员变量生成对应的构造方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5CCBgAF4ei8m.png" alt="mark">]</p><h2 id="Value"><a href="#Value" class="headerlink" title="@Value"></a><strong>@Value</strong></h2><p>这个注解用在 <strong>类</strong> 上，会生成含所有参数的构造方法，get 方法，此外还提供了equals、hashCode、toString 方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5Cb6KeAg0ABi.png" alt="mark">]</p><h2 id="SneakyThrows"><a href="#SneakyThrows" class="headerlink" title="@SneakyThrows"></a><strong>@SneakyThrows</strong></h2><p>这个注解用在 <strong>方法</strong> 上，可以将方法中的代码用 try-catch 语句包裹起来，捕获异常并在 catch 中用 Lombok.sneakyThrow(e) 把异常抛出，可以使用 @SneakyThrows(Exception.class) 的形式指定抛出哪种异常，也会生成默认的构造方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5CIfCKh1FGbh.png" alt="mark">]</p><h2 id="Synchronized"><a href="#Synchronized" class="headerlink" title="@Synchronized"></a><strong>@Synchronized</strong></h2><p>这个注解用在 <strong>类方法</strong> 或者 <strong>实例方法</strong> 上，效果和 synchronized 关键字相同，区别在于锁对象不同，对于类方法和实例方法，synchronized 关键字的锁对象分别是类的 class 对象和 this 对象，而 @Synchronized 的锁对象分别是 私有静态 final 对象 lock 和 私有 final 对象 lock，当然，也可以自己指定锁对象，此外也提供默认的构造方法。</p><p>[<img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5CL95jIc7eJi.png" alt="mark">]</p><h1 id="7-json对象快速生成实体类"><a href="#7-json对象快速生成实体类" class="headerlink" title="7.json对象快速生成实体类"></a>7.json对象快速生成实体类</h1><h3 id="1-idea插件安装：GsonFormat"><a href="#1-idea插件安装：GsonFormat" class="headerlink" title="1.idea插件安装：GsonFormat"></a>1.idea插件安装：GsonFormat</h3><ul><li><pre><code>idea内打开File-----&gt;setting(或者idea快捷键Ctrl + Alt + S)------&gt; -----&gt;Plugins， 搜索GsonFormat，-----&gt;install，安装完之后重启idea<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  ### 2、idea插件使用：json对象生成json实体类</span><br><span class="line"></span><br><span class="line">- &#96;新建一个类，然后有右键------&gt;Generate------&gt;GsonFormat，或者快捷键Alt + insert&#96;</span><br><span class="line"></span><br><span class="line">![idea插件 json对象快速生成json实体类  json对象转json实体类  json对象生成json实体类](.\aa18.png)![idea插件 json对象快速生成json实体类  json对象转json实体类  json对象生成json实体类](.\aa19.png)</span><br><span class="line"></span><br><span class="line">- &#96;将要转换的JSON格式数据粘贴进去，点击ok。 -&#96;![idea插件 json对象快速生成json实体类  json对象转json实体类  json对象生成json实体类](.\aa20.png)</span><br><span class="line"></span><br><span class="line">### 3、 设置生成类型：setting（可忽略）</span><br><span class="line"></span><br><span class="line">- &#96;生成之前可以设置类型，我的idea集成了lombok的插件，所以直接选择lombok类型，点击ok。此处可以忽略 -&#96;![idea插件 json对象快速生成json实体类  json对象转json实体类  json对象生成json实体类](.\aa21.png)</span><br><span class="line"></span><br><span class="line">### 4、生成效果</span><br><span class="line"></span><br><span class="line">- &#96;生成效果如下 -&#96;</span><br><span class="line">  ![idea插件 json对象快速生成json实体类  json对象转json实体类  json对象生成json实体类](.\aa22.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">给你一段&#96;Json&#96;格式数据，除了手写之外，如何快速生成一个和该&#96;Json&#96;数据对应的&#96;Java&#96;对象？</span><br><span class="line"></span><br><span class="line">比如一段&#96;Json&#96;格式数据如下：</span><br><span class="line"></span><br></pre></td></tr></table></figure>&#123;  &quot;status&quot;: 0,  &quot;msg&quot;: &quot;操作成功&quot;,  &quot;data&quot;: 1&#125;12345<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**GsonFormat**则是一个**JSON格式数据 → 对象**的快速**代码自动生成**插件。</span><br><span class="line"></span><br><span class="line">![image](.\format.png)</span><br><span class="line"></span><br><span class="line">![image](.\aa23.png)</span><br><span class="line"></span><br><span class="line">![image](.\aa25.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 8.CSDN tools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">顺便安利下我司的[Chrome插件](https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_44463441&#x2F;article&#x2F;details&#x2F;109071551)，不要太好使，根本停不下来.jpg</span><br><span class="line"></span><br><span class="line">  插件主要功能：</span><br><span class="line"></span><br><span class="line">1. json格式化</span><br><span class="line">2. 时间格式化</span><br><span class="line">3. ip查询</span><br><span class="line">4. 计算器</span><br><span class="line">5. CSDN平台搜索</span><br><span class="line">6. github仓库搜索</span><br><span class="line">7. maven仓库依赖搜索</span><br><span class="line">8. 常用文档检索</span><br><span class="line">9. 单词翻译</span><br><span class="line">10. 看新闻</span><br><span class="line">11. 代码查询</span><br><span class="line">12. 二维码生成</span><br><span class="line"></span><br><span class="line">## 2.安装方法</span><br><span class="line"></span><br><span class="line">1.插件本地安装</span><br><span class="line"></span><br><span class="line">先下载tools的zip安装包[idea-tools下载地址](https:&#x2F;&#x2F;img-operation.csdnimg.cn&#x2F;plugin&#x2F;csdn_idea_tools-1.3.0.zip)</span><br><span class="line"></span><br><span class="line">在File--&gt;Settings--&gt;Plugins中点击设置图标选择本地磁盘安装，选中下载好的**zip包！zip包！zip包！**点击安装即可</span><br><span class="line"></span><br><span class="line">![img](.\aa26.png)</span><br><span class="line"></span><br><span class="line">2.通过idea的应用商店Marketplace安装（插件已在应用商店发布，后期新版本会同步更新两种安装方式）</span><br><span class="line"></span><br><span class="line">idea页面File--&gt;Settings--&gt;Plugins在Marketplace搜索csdn，选择下载安装。成功安装如图</span><br><span class="line"></span><br><span class="line">![img](.\aa27.png)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">## 3.使用方法</span><br><span class="line"></span><br><span class="line">1. ctrl+shift+I唤起插件（**Esc退出插件）**</span><br><span class="line">2. Tools toolbar或右键使用插件**（Esc退出插件）**</span><br><span class="line"></span><br><span class="line">![img](.\aa28.png)![img](.\20201013144435219.png)</span><br><span class="line"></span><br><span class="line">唤醒页面：</span><br><span class="line"></span><br><span class="line">![img](.\aa29.png)</span><br><span class="line"></span><br><span class="line"> 3.输入框输入help命令查看使用引导及插件功能使用示例</span><br><span class="line"></span><br><span class="line">![img](.\aa30.png)</span><br><span class="line"></span><br><span class="line">下面举几个栗子：</span><br><span class="line"></span><br><span class="line">①时间插件功能</span><br><span class="line"></span><br><span class="line">![img](.\20201028135252596.gif)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">②mvn仓库插件</span><br><span class="line"></span><br><span class="line">依赖包检索</span><br><span class="line"></span><br><span class="line">![img](.\20201028135833593.gif)</span><br><span class="line"></span><br><span class="line">③csdn搜索插件</span><br><span class="line"></span><br><span class="line">直接输入关键字检索CSDN站内数据，想怎么搜就怎么搜~</span><br><span class="line"></span><br><span class="line">![img](.\20201028135457267.gif)</span><br><span class="line"></span><br><span class="line">④Json插件功能</span><br><span class="line"></span><br><span class="line">对json格式的数据格式化、生成实体类</span><br><span class="line"></span><br><span class="line">![img](.\20201028135602726.gif)</span><br><span class="line"></span><br><span class="line">⑤代码查询</span><br><span class="line"></span><br><span class="line">![img](.\2020102813570187.gif)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># 9.括号进行着色的插件</span><br><span class="line"></span><br><span class="line">## Rainbow Brackets</span><br><span class="line"></span><br><span class="line">在代码非常复杂时，各种**俄罗斯套娃式**的括号简直让人心碎，**Rainbow Brackets**则是一款可以对**成对括号**进行着色的插件，顾名思义“彩虹色的括号”，从此复杂代码一眼即可看穿！</span><br><span class="line"></span><br><span class="line">装完插件，括号都被染上了彩虹的颜色：</span><br><span class="line"></span><br><span class="line">![image](.\aa31.png)</span><br><span class="line"></span><br><span class="line">![image](.\aa32.png)</span><br><span class="line"></span><br><span class="line"># 10.打印日志时不同颜色</span><br><span class="line"></span><br><span class="line">## Grep Console</span><br><span class="line"></span><br><span class="line">默认情况下，IDEA控制台窗口在打印日志时都是一种颜色到底，比如各种&#96;info&#96;,&#96;warn&#96;,和&#96;error&#96;等类型的日志信息交织在一起，不好分辨。</span><br><span class="line"></span><br><span class="line">**Grep Console**插件则可以帮助我们自定义设置不用日志用不同的颜色进行标识，非常方便观看！</span><br><span class="line"></span><br><span class="line">**设置自定义颜色：**</span><br><span class="line"></span><br><span class="line">![image](.\aa33.png)</span><br><span class="line"></span><br><span class="line">**着色后的日志打印效果：**</span><br><span class="line"></span><br><span class="line">![image](.\aa44.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 11.url接口</span><br><span class="line"></span><br><span class="line">## RestfulToolkit</span><br><span class="line"></span><br><span class="line">- 你知道你项目里到底写了多少个URL接口吗？</span><br><span class="line">- 如何快速定位某个&#96;URL&#96;接口对应的&#96;Controller&#96;代码？</span><br><span class="line">- 如何快速测试你的&#96;Controller&#96;接口？</span><br><span class="line"></span><br><span class="line">**RestfulToolkit**则是一个可以解决上述问题的，非常方便的IDEA集成插件，从此&#96;Postman&#96;怕是要下岗了：</span><br><span class="line"></span><br><span class="line">![image](.\aa45.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 12.mybatis的mapper Java接口方法和mapper XML文件之间来回切换</span><br><span class="line"></span><br><span class="line">## Free Mybatis plugin</span><br><span class="line"></span><br><span class="line">除了全局搜索以外，如何方便地在&#96;Mybatis&#96;的&#96;mapper Java&#96;接口方法和&#96;mapper XML&#96;文件之间来回切换？</span><br><span class="line"></span><br><span class="line">**Free Mybatis plugin**插件此时就可以大显身手了：</span><br><span class="line"></span><br><span class="line">![image](.\aa46.png)</span><br><span class="line"></span><br><span class="line">![image](.\aa47.png)</span><br><span class="line"></span><br><span class="line"># 13.google-java-format —— 代码自动格式化</span><br><span class="line"></span><br><span class="line">这个插件的优点在于不需要手动快捷键去格式化代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 14.GenerateAllSetter——自动调用所有 Setter 函数（可填充默认值）</span><br><span class="line"></span><br><span class="line">![在这里插入图片描述](.\20200806230436736.png)</span><br><span class="line">![在这里插入图片描述](.\20200806230436529.png)</span><br><span class="line">![在这里插入图片描述](.\20200806230436412.png)</span><br><span class="line"></span><br><span class="line"># 15.Maven Helper ——方便maven项目解决jar冲突</span><br><span class="line"></span><br><span class="line">![在这里插入图片描述](.\aa55.png)</span><br><span class="line">![在这里插入图片描述](.\aa56.png)</span><br><span class="line">![在这里插入图片描述](.\aa57.png)</span><br><span class="line">![在这里插入图片描述](https:&#x2F;&#x2F;img-blog.csdnimg.cn&#x2F;20200806230810294.png)</span><br><span class="line">![在这里插入图片描述](.\aa58.png)</span><br><span class="line"></span><br><span class="line"># 16.FindBugs ——检查代码中的隐患</span><br><span class="line"></span><br><span class="line">![在这里插入图片描述](.\aa59.png)</span><br><span class="line">![在这里插入图片描述](.\aa60.png)</span><br><span class="line"></span><br><span class="line"># 17.Stack trace to UML —— 根据 JVM 异常堆栈画 UML时序图和通信图</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">打开方式：Analyze &gt; Open Stack trace to UML plugin + Generate UML diagrams from stacktrace from debug</span><br><span class="line">1</span><br></pre></td></tr></table></figure></code></pre></li></ul><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5Caa61.png" alt="在这里插入图片描述"><br><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5Caa62.png" alt="在这里插入图片描述"></p><h1 id="18-Java-Stream-Debugger-——-Stream-将操作步骤可视化"><a href="#18-Java-Stream-Debugger-——-Stream-将操作步骤可视化" class="headerlink" title="18.Java Stream Debugger —— Stream 将操作步骤可视化"></a>18.Java Stream Debugger —— Stream 将操作步骤可视化</h1><p><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5Caa63.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200806231325623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjI4NTQxNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="/2021/01/23/idea%E6%8F%92%E4%BB%B6/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6-IDEA/.%5Caa64.png" alt="在这里插入图片描述"></p><h1 id="2-code码"><a href="#2-code码" class="headerlink" title="2.code码"></a>2.code码</h1><p>1.</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D87IQPUU3Q-eyJsaWNlbnNlSWQiOiJEODdJUVBVVTNRIiwibGljZW5zZWVOYW1lIjoiTnNzIEltIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOS0wMi0wNyJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDE5LTAyLTA3In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxOS0wMi0wNyJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE5LTAyLTA3In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOS0wMi0wNyJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDE5LTAyLTA3In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDE5LTAyLTA3In0seyJjb2RlIjoiR08iLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifSx7ImNvZGUiOiJQUyIsInBhaWRVcFRvIjoiMjAxOS0wMi0wNyJ9LHsiY29kZSI6IkNMIiwicGFpZFVwVG8iOiIyMDE5LTAyLTA3In0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifSx7ImNvZGUiOiJSU1UiLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifV0sImhhc2giOiI4MDI4NjgyLzAiLCJncmFjZVBlcmlvZERheXMiOjAsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-iPLvfrIl0qTga/F9rnjf0Sz6yYvw+2FWgZpcLOFbvb3CllsE2ui4+bw8emxzcYr3GyxN4/4BhfcX6gmmI4EJaTSihP+m4Oa8jZApb5zGEHENJE+I8hewQWIyiekNE7+21meJ3swPCYiTWKkUXMIVUWNfieZhqHd96dHpD335dSRCmAImgQ31qpmzemMxztu1/FAIiaUrav1VU/M0waj9B9xuhDG77PU7deSxX363RQjbmRdWBorjH6gSyUpCXnyh6Crlhtj+lC+VndAdnT4HUXXsmpCw6uLotL5Gv/TM7/fAqIjSQghlnm4vpss4Pc7xI9n07KwQE9ok4fuF3HMRUA==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==</span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IQJBET5GKT-eyJsaWNlbnNlSWQiOiJJUUpCRVQ1R0tUIiwibGljZW5zZWVOYW1lIjoi5rC45LmF5r+A5rS7IGlkZWHCt21lZGVtaW5nwrdjb20iLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMjUiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDIxLTAxLTI1IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMjUiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJTViIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJSU1UiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMjUiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDIxLTAxLTI1IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUkQiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMjUiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkRNIiwicGFpZFVwVG8iOiIyMDIxLTAxLTI1IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDIxLTAxLTI1IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSU0MiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMjUiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiR08iLCJwYWlkVXBUbyI6IjIwMjEtMDEtMjUiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJTRiIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUyIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDIxLTAxLTI1IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUERCIiwicGFpZFVwVG8iOiIyMDIxLTAxLTI1IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBXUyIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQR08iLCJwYWlkVXBUbyI6IjIwMjEtMDEtMjUiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBTIiwicGFpZFVwVG8iOiIyMDIxLTAxLTI1IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQQyIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUkIiLCJwYWlkVXBUbyI6IjIwMjEtMDEtMjUiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNXIiwicGFpZFVwVG8iOiIyMDIxLTAxLTI1IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJEUCIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJSUyIsInBhaWRVcFRvIjoiMjAyMS0wMS0yNSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIwMTIyNlBQQU0wMDAwMDUiLCJoYXNoIjoiMjE3MjA0NTgvMDotMTQ1OTQ5MjM1OCIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-XD/D7zpGWSRPf7o1P83M1nllpsNPJHWadhJCJGw/0z4zcyRxYUb+eOMgkNQFx5iAqXrfXb/Qz03SVKX9cvYdJg2Ag3YpG1LvKf29p5w2jNyU4li9fT4HLNQC5IHizLH+mm8AtWRIOVaul6O3P20JF59YUI6zRuX4jHA9uGqxDDI1+buG+JOaK3T9UukjkdhmN2uVnvybYNQ/eRqYkILbjZo6DxnQqDU9dtBMA1vluf7lbDZ2Capr0wYc/U5cAYwfePatEcHHm9FRRY2r9tYnNEL6Yg0CO3Dynz2Ean/kghIoexARxamATvSGJ2pO+LdOgk3wok7zEHuP+LINM5arSQ==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDCP4uk4SlVdA5nuA3DQC+NsEnZS9npFnO0zrmMWcz1++q2UWJNuGTh0rwi+3fUJIArfvVh7gNtIp93rxjtrQAuf4/Fa6sySp4c32MeFACfC0q+oUoWebhOIaYTYUxm4LAZ355vzt8YeDPmvWKxA81udqEk4gU9NNAOz1Um5/8LyR8SGsSc4EDBRSjcMWMwMkYSauGqGcEUK8WhfplsyF61lKSOFA6VmfUmeDK15rUWWLbOMKgn2cxFA98A+s74T9Oo96CU7rp/umDXvhnyhAXSukw/qCGOVhwKR8B6aeDtoBWQgjnvMtPgOUPRTPkPGbwPwwDkvAHYiuKJ7Bd2wH7rAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBAB2J1ysRudbkqmkUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/wi9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></table></figure><h1 id="-1"><a href="#-1" class="headerlink" title></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-自动导包&quot;&gt;&lt;a href=&quot;#1-自动导包&quot; class=&quot;headerlink&quot; title=&quot;1.自动导包&quot;&gt;&lt;/a&gt;1.自动导包&lt;/h1&gt;&lt;p&gt;下面是Auto Import设置步骤详解。&lt;/p&gt;
&lt;p&gt;Settings→Editor→General→A</summary>
      
    
    
    
    
    <category term="idea插件" scheme="http://example.com/tags/idea%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>docker应用的部署</title>
    <link href="http://example.com/2020/12/09/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2020/12/09/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/</id>
    <published>2020-12-09T05:48:33.000Z</published>
    <updated>2021-01-23T12:13:26.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-应用部署"><a href="#Docker-应用部署" class="headerlink" title="Docker 应用部署"></a>Docker 应用部署</h2><h3 id="一、部署MySQL"><a href="#一、部署MySQL" class="headerlink" title="一、部署MySQL"></a>一、部署MySQL</h3><ol><li>搜索mysql镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取mysql镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.6</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建mysql目录用于存储mysql数据信息</span></span><br><span class="line">mkdir ~/mysql</span><br><span class="line">cd ~/mysql</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -id \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">--name=c_mysql \</span><br><span class="line">-v $PWD/conf:/etc/mysql/conf.d \</span><br><span class="line">-v $PWD/logs:/logs \</span><br><span class="line">-v $PWD/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">mysql:5.6</span><br></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><strong>-p 3307:3306</strong>：将容器的 3306 端口<strong>映射</strong>到宿主机的 3307 端口。</li><li><strong>-v $PWD/conf:/etc/mysql/conf.d</strong>：将主机当前目录下的 conf/my.cnf <strong>挂载</strong>到容器的 /etc/mysql/my.cnf。配置目录</li><li><strong>-v $PWD/logs:/logs</strong>：将主机当前目录下的 logs 目录<strong>挂载</strong>到容器的 /logs。日志目录</li><li><strong>-v $PWD/data:/var/lib/mysql</strong> ：将主机当前目录下的data目录<strong>挂载</strong>到容器的 /var/lib/mysql 。数据目录</li><li><strong>-e MYSQL_ROOT_PASSWORD=123456：</strong>初始化 root 用户的密码。</li></ul></li></ul><ol start="4"><li>进入容器，操作mysql</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec –it c_mysql /bin/bash</span><br></pre></td></tr></table></figure><ol start="5"><li>使用外部机器连接容器中的mysql</li></ol><p><img src="/2020/12/09/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/.%5C1573636765632.png" alt="1573636765632"></p><h3 id="二、部署Tomcat"><a href="#二、部署Tomcat" class="headerlink" title="二、部署Tomcat"></a>二、部署Tomcat</h3><ol><li>搜索tomcat镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search tomcat</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取tomcat镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建tomcat目录用于存储tomcat数据信息</span></span><br><span class="line">mkdir ~/tomcat</span><br><span class="line">cd ~/tomcat</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_tomcat \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-v $PWD:/usr/local/tomcat/webapps \</span><br><span class="line">tomcat </span><br></pre></td></tr></table></figure><ul><li><p>参数说明：</p><ul><li><p><strong>-p 8080:8080：</strong>将容器的8080端口<strong>映射</strong>到主机的8080端口</p><p><strong>-v $PWD:/usr/local/tomcat/webapps：</strong>将主机中当前目录<strong>挂载</strong>到容器的webapps</p></li></ul></li></ul><ol start="4"><li>使用外部机器访问tomcat</li></ol><p><img src="/2020/12/09/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/imgs%5C1573649804623.png" alt="1573649804623"></p><h3 id="三、部署Nginx"><a href="#三、部署Nginx" class="headerlink" title="三、部署Nginx"></a>三、部署Nginx</h3><ol><li>搜索nginx镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取nginx镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建nginx目录用于存储nginx数据信息</span></span><br><span class="line">mkdir ~/nginx</span><br><span class="line">cd ~/nginx</span><br><span class="line">mkdir conf</span><br><span class="line">cd conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容</span></span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_nginx \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v $PWD/logs:/var/log/nginx \</span><br><span class="line">-v $PWD/html:/usr/share/nginx/html \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><strong>-p 80:80</strong>：将容器的 80端口映射到宿主机的 80 端口。</li><li><strong>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf</strong>：将主机当前目录下的 /conf/nginx.conf 挂载到容器的 :/etc/nginx/nginx.conf。配置目录</li><li><strong>-v $PWD/logs:/var/log/nginx</strong>：将主机当前目录下的 logs 目录挂载到容器的/var/log/nginx。日志目录</li></ul></li></ul><ol start="4"><li>使用外部机器访问nginx</li></ol><p><img src="/2020/12/09/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/.%5C1573652396669.png" alt="1573652396669"></p><h3 id="四、部署Redis"><a href="#四、部署Redis" class="headerlink" title="四、部署Redis"></a>四、部署Redis</h3><ol><li>搜索redis镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search redis</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取redis镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:5.0</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_redis -p 6379:6379 redis:5.0</span><br></pre></td></tr></table></figure><ol start="4"><li>使用外部机器连接redis</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli.exe -h 192.168.149.135 -p 6379</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker-应用部署&quot;&gt;&lt;a href=&quot;#Docker-应用部署&quot; class=&quot;headerlink&quot; title=&quot;Docker 应用部署&quot;&gt;&lt;/a&gt;Docker 应用部署&lt;/h2&gt;&lt;h3 id=&quot;一、部署MySQL&quot;&gt;&lt;a href=&quot;#一、部署MySQ</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>docker应用的部署</title>
    <link href="http://example.com/2020/12/09/docker%E5%BA%94%E7%94%A8%E7%9A%84%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2020/12/09/docker%E5%BA%94%E7%94%A8%E7%9A%84%E9%83%A8%E7%BD%B2/</id>
    <published>2020-12-09T05:48:33.000Z</published>
    <updated>2021-01-23T12:13:26.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-应用部署"><a href="#Docker-应用部署" class="headerlink" title="Docker 应用部署"></a>Docker 应用部署</h2><h3 id="一、部署MySQL"><a href="#一、部署MySQL" class="headerlink" title="一、部署MySQL"></a>一、部署MySQL</h3><ol><li>搜索mysql镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取mysql镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.6</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建mysql目录用于存储mysql数据信息</span></span><br><span class="line">mkdir ~/mysql</span><br><span class="line">cd ~/mysql</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -id \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">--name=c_mysql \</span><br><span class="line">-v $PWD/conf:/etc/mysql/conf.d \</span><br><span class="line">-v $PWD/logs:/logs \</span><br><span class="line">-v $PWD/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">mysql:5.6</span><br></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><strong>-p 3307:3306</strong>：将容器的 3306 端口<strong>映射</strong>到宿主机的 3307 端口。</li><li><strong>-v $PWD/conf:/etc/mysql/conf.d</strong>：将主机当前目录下的 conf/my.cnf <strong>挂载</strong>到容器的 /etc/mysql/my.cnf。配置目录</li><li><strong>-v $PWD/logs:/logs</strong>：将主机当前目录下的 logs 目录<strong>挂载</strong>到容器的 /logs。日志目录</li><li><strong>-v $PWD/data:/var/lib/mysql</strong> ：将主机当前目录下的data目录<strong>挂载</strong>到容器的 /var/lib/mysql 。数据目录</li><li><strong>-e MYSQL_ROOT_PASSWORD=123456：</strong>初始化 root 用户的密码。</li></ul></li></ul><ol start="4"><li>进入容器，操作mysql</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec –it c_mysql /bin/bash</span><br></pre></td></tr></table></figure><ol start="5"><li>使用外部机器连接容器中的mysql</li></ol><p><img src="/2020/12/09/docker%E5%BA%94%E7%94%A8%E7%9A%84%E9%83%A8%E7%BD%B2/.%5C1573636765632.png" alt="1573636765632"></p><h3 id="二、部署Tomcat"><a href="#二、部署Tomcat" class="headerlink" title="二、部署Tomcat"></a>二、部署Tomcat</h3><ol><li>搜索tomcat镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search tomcat</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取tomcat镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建tomcat目录用于存储tomcat数据信息</span></span><br><span class="line">mkdir ~/tomcat</span><br><span class="line">cd ~/tomcat</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_tomcat \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-v $PWD:/usr/local/tomcat/webapps \</span><br><span class="line">tomcat </span><br></pre></td></tr></table></figure><ul><li><p>参数说明：</p><ul><li><p><strong>-p 8080:8080：</strong>将容器的8080端口<strong>映射</strong>到主机的8080端口</p><p><strong>-v $PWD:/usr/local/tomcat/webapps：</strong>将主机中当前目录<strong>挂载</strong>到容器的webapps</p></li></ul></li></ul><ol start="4"><li>使用外部机器访问tomcat</li></ol><p><img src="/2020/12/09/docker%E5%BA%94%E7%94%A8%E7%9A%84%E9%83%A8%E7%BD%B2/imgs%5C1573649804623.png" alt="1573649804623"></p><h3 id="三、部署Nginx"><a href="#三、部署Nginx" class="headerlink" title="三、部署Nginx"></a>三、部署Nginx</h3><ol><li>搜索nginx镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取nginx镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建nginx目录用于存储nginx数据信息</span></span><br><span class="line">mkdir ~/nginx</span><br><span class="line">cd ~/nginx</span><br><span class="line">mkdir conf</span><br><span class="line">cd conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容</span></span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_nginx \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v $PWD/logs:/var/log/nginx \</span><br><span class="line">-v $PWD/html:/usr/share/nginx/html \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><strong>-p 80:80</strong>：将容器的 80端口映射到宿主机的 80 端口。</li><li><strong>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf</strong>：将主机当前目录下的 /conf/nginx.conf 挂载到容器的 :/etc/nginx/nginx.conf。配置目录</li><li><strong>-v $PWD/logs:/var/log/nginx</strong>：将主机当前目录下的 logs 目录挂载到容器的/var/log/nginx。日志目录</li></ul></li></ul><ol start="4"><li>使用外部机器访问nginx</li></ol><p><img src="/2020/12/09/docker%E5%BA%94%E7%94%A8%E7%9A%84%E9%83%A8%E7%BD%B2/.%5C1573652396669.png" alt="1573652396669"></p><h3 id="四、部署Redis"><a href="#四、部署Redis" class="headerlink" title="四、部署Redis"></a>四、部署Redis</h3><ol><li>搜索redis镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search redis</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取redis镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:5.0</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_redis -p 6379:6379 redis:5.0</span><br></pre></td></tr></table></figure><ol start="4"><li>使用外部机器连接redis</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli.exe -h 192.168.149.135 -p 6379</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker-应用部署&quot;&gt;&lt;a href=&quot;#Docker-应用部署&quot; class=&quot;headerlink&quot; title=&quot;Docker 应用部署&quot;&gt;&lt;/a&gt;Docker 应用部署&lt;/h2&gt;&lt;h3 id=&quot;一、部署MySQL&quot;&gt;&lt;a href=&quot;#一、部署MySQ</summary>
      
    
    
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="http://example.com/2020/11/12/shujujg/"/>
    <id>http://example.com/2020/11/12/shujujg/</id>
    <published>2020-11-12T03:48:33.000Z</published>
    <updated>2020-12-15T06:52:23.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="1-1二叉树【理解】"><a href="#1-1二叉树【理解】" class="headerlink" title="1.1二叉树【理解】"></a>1.1二叉树【理解】</h3><ul><li><p>二叉树的特点</p><ul><li>二叉树中,任意一个节点的度要小于等于2<ul><li>节点: 在树结构中,每一个元素称之为节点</li><li>度: 每一个节点的子节点数量称之为度</li></ul></li></ul></li><li><p>二叉树结构图</p><p><img src="/2020/11/12/shujujg/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="01_二叉树结构图"></p></li></ul><h3 id="1-2二叉查找树【理解】"><a href="#1-2二叉查找树【理解】" class="headerlink" title="1.2二叉查找树【理解】"></a>1.2二叉查找树【理解】</h3><ul><li><p>二叉查找树的特点</p><ul><li>二叉查找树,又称<strong>二叉排序树</strong>或者<strong>二叉搜索树</strong></li><li>每一个节点上最多有<strong>两个子节点</strong></li><li>左子树上所有节点的值都小于根节点的值</li><li>右子树上所有节点的值都大于根节点的值</li><li><strong>左&lt;根&lt;右</strong></li></ul></li><li><p>二叉查找树结构图</p><p><img src="/2020/11/12/shujujg/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="02_二叉查找树结构图"></p></li><li><p>二叉查找树和二叉树对比结构图</p><p><img src="/2020/11/12/shujujg/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AF%B9%E6%AF%94%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="03_二叉查找树和二叉树对比结构图"></p></li><li><p>二叉查找树添加节点规则</p><ul><li>小的存左边</li><li>大的存右边</li><li><strong>一样的不存</strong></li></ul><p><img src="/2020/11/12/shujujg/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E6%B7%BB%E5%8A%A0%E8%8A%82%E7%82%B9%E8%A7%84%E5%88%99.png" alt="04_二叉查找树添加节点规则"></p></li></ul><h3 id="1-3平衡二叉树【理解】"><a href="#1-3平衡二叉树【理解】" class="headerlink" title="1.3平衡二叉树【理解】"></a>1.3平衡二叉树【理解】</h3><ul><li><p>平衡二叉树的特点</p><ul><li>二叉树左右两个子树的<strong>高度差不超过1</strong></li><li><strong>任意节点</strong>的左右两个<strong>子树</strong>都是一颗<strong>平衡二叉树</strong></li></ul></li><li><p>平衡二叉树旋转</p><ul><li><p>旋转触发时机    <strong>破坏了平衡</strong></p><ul><li>当<strong>添加一个节点</strong>之后,该树不再是一颗平衡二叉树</li></ul></li><li><p>左旋</p><ul><li>就是将根节点的右侧往左拉,原先的右子节点变成新的父节点,并把多余的左子节点出让,给已经降级的根节点当右子节点</li></ul></li></ul></li></ul><pre><code>添加一个**12**节点![05_平衡二叉树左旋01](平衡二叉树左旋01.png)![05_平衡二叉树左旋02](平衡二叉树左旋02.png)</code></pre><p>  复杂左旋</p><p>  添加<strong>12</strong></p><p>  <img src="/2020/11/12/shujujg/zx1.png" alt="image-20201107102149442"></p><p>  <strong>拿掉9节点</strong></p><p>  <img src="/2020/11/12/shujujg/zx2.png" alt="image-20201107102410776"></p><p>  |||||</p><p>  <img src="/2020/11/12/shujujg/zx3.png" alt="image-20201107102611349"></p><p>  <img src="/2020/11/12/shujujg/zx4.png" alt="image-20201107102704474"></p><p>  <img src="/2020/11/12/shujujg/zx5.png" alt="image-20201107102744783"></p><ul><li><p>右旋</p><ul><li><p>就是将根节点的左侧往右拉,左子节点变成了新的父节点,并把多余的右子节点出让,给已经降级根节点当左子节点</p><p><img src="/2020/11/12/shujujg/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%B3%E6%97%8B01.png" alt="06_平衡二叉树右旋01"></p><p><img src="/2020/11/12/shujujg/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%B3%E6%97%8B02.png" alt="06_平衡二叉树右旋02"></p></li></ul></li><li><p>平衡二叉树和二叉查找树对比结构图</p><p><img src="/2020/11/12/shujujg/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E5%AF%B9%E6%AF%94%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="07_平衡二叉树和二叉查找树对比结构图"></p></li><li><p>平衡二叉树旋转的四种情况</p><ul><li><p>左左</p><ul><li><p>左左: 当根节点左子树的左子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 直接对整体进行右旋即可</p><p><img src="/2020/11/12/shujujg/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B7%A6%E5%B7%A6.png" alt="08_平衡二叉树左左"></p></li></ul></li><li><p>左右</p><ul><li><p>左右: 当根节点左子树的右子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 先在左子树对应的节点位置进行左旋,在对整体进行右旋</p><p><img src="/2020/11/12/shujujg/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B7%A6%E5%8F%B3.png" alt="09_平衡二叉树左右"></p></li></ul></li><li><p>右右</p><ul><li><p>右右: 当根节点右子树的右子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 直接对整体进行左旋即可</p><p><img src="/2020/11/12/shujujg/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%B3%E5%8F%B3.png" alt="10_平衡二叉树右右"></p></li></ul></li><li><p>右左</p><ul><li><p>右左:当根节点右子树的左子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 先在右子树对应的节点位置进行右旋,在对整体进行左旋</p><p><img src="/2020/11/12/shujujg/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%B3%E5%B7%A6.png" alt="11_平衡二叉树右左"></p></li></ul></li></ul></li></ul><h2 id="1-红黑树"><a href="#1-红黑树" class="headerlink" title="1.红黑树"></a>1.红黑树</h2><h3 id="1-1概述【理解】"><a href="#1-1概述【理解】" class="headerlink" title="1.1概述【理解】"></a>1.1概述【理解】</h3><ul><li><p>红黑树的特点</p><ul><li><strong>平衡二叉B树</strong></li><li>每一个节点可以是<strong>红</strong>或者<strong>黑</strong></li><li>红黑树不是高度平衡的,它的平衡是通过”自己的<strong>红黑规则</strong>“进行实现的</li></ul></li><li><p>红黑树的<strong>红黑规则</strong>有哪些</p><ol><li><p>每一个节点或是红色的,或者是黑色的</p></li><li><p><strong>根节点</strong>必须是<strong>黑</strong>色</p></li><li><p>如果一个节点<strong>没有子节点</strong>或者<strong>父</strong>节点,则<strong>该节点</strong>相应的<strong>指针</strong>属性值为<strong>Nil</strong>,这些<strong>Nil</strong>视为叶节点,每个叶节点(Nil)是<strong>黑色</strong>的</p></li><li><p>如果某一个节点是<strong>红色</strong>,那么它的子节点必须是<strong>黑色</strong>(<strong>不能出现两个红色</strong>节点相连 的情况)</p></li><li><p>对每一个节点,从<strong>该节点</strong>到其所有<strong>后代叶节点</strong>的简单<strong>路径</strong>上,均包含<strong>相同数目的黑色节点</strong></p><p><img src="/2020/11/12/shujujg/%E7%BA%A2%E9%BB%91%E6%A0%91%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="12_红黑树结构图"></p></li></ol></li><li><p>红黑树添加节点的默认颜色</p><ul><li><p>添加节点时,默认为红色,效率高</p><p><img src="/2020/11/12/shujujg/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%B7%BB%E5%8A%A0%E8%8A%82%E7%82%B9%E9%A2%9C%E8%89%B2.png" alt="13_红黑树添加节点颜色"></p></li></ul></li><li><p>红黑树添加节点后如何保持红黑规则</p><ul><li>根节点位置<ul><li>直接变为黑色</li></ul></li><li>非根节点位置<ul><li>父节点为黑色<ul><li>不需要任何操作,默认红色即可</li></ul></li><li>父节点为红色<ul><li>叔叔节点为红色<ol><li>将”父节点”设为黑色,将”叔叔节点”设为黑色</li><li>将”祖父节点”设为红色</li><li>如果”祖父节点”为根节点,则将根节点再次变成黑色</li></ol></li><li>叔叔节点为黑色<ol><li>将”父节点”设为黑色</li><li>将”祖父节点”设为红色</li><li>以”祖父节点”为支点进行旋转</li></ol></li></ul></li></ul></li></ul></li></ul><h3 id="添加黑色节点"><a href="#添加黑色节点" class="headerlink" title="添加黑色节点"></a>添加黑色节点</h3><p><img src="/2020/11/12/shujujg/hh01.png" alt="image-20201110142039570"></p><p><img src="/2020/11/12/shujujg/hh02.png" alt="image-20201110142211238"></p><p><img src="/2020/11/12/shujujg/hh03.png" alt="image-20201110142332133"></p><p><img src="/2020/11/12/shujujg/hh04.png" alt="image-20201110142414043"></p><h3 id="添加红色节点（效率高）"><a href="#添加红色节点（效率高）" class="headerlink" title="添加红色节点（效率高）"></a>添加红色节点（效率高）</h3><p>一共只需要调整一次 所以添加的效率要更高点</p><p><img src="/2020/11/12/shujujg/hh04.png" alt="image-20201110142414043"></p><h3 id="添加节点思路"><a href="#添加节点思路" class="headerlink" title="添加节点思路"></a>添加节点思路</h3><p><img src="/2020/11/12/shujujg/h01.png" alt="image-20201110142734821"></p><p><img src="/2020/11/12/shujujg/h2.png" alt="image-20201110142828938"></p><p><img src="/2020/11/12/shujujg/h3.png" alt="image-20201110142914836"></p><p><img src="/2020/11/12/shujujg/h4.png" alt="image-20201110143005987"></p><p><img src="/2020/11/12/shujujg/h5.png" alt="image-20201110143128714"></p><p>20是根节点 所以不用变成<strong>红色</strong></p><p><img src="/2020/11/12/shujujg/hx01.png" alt="image-20201110143532153"></p><p><img src="/2020/11/12/shujujg/001.png" alt="image-20201110143943929"></p><p><img src="/2020/11/12/shujujg/002.png" alt="image-20201110144007100"></p><p><img src="/2020/11/12/shujujg/003.png" alt="image-20201110144020937"></p><p><img src="/2020/11/12/shujujg/004.png" alt="image-20201110144034368"></p><p><img src="/2020/11/12/shujujg/005.png" alt="image-20201110144121104"></p><p><img src="/2020/11/12/shujujg/006.png" alt="image-20201110144208117"></p><p><img src="/2020/11/12/shujujg/007.png" alt="image-20201110144227530"></p><p><img src="/2020/11/12/shujujg/008.png" alt="image-20201110144303897"></p><h2 id="2-哈希表结构【理解】"><a href="#2-哈希表结构【理解】" class="headerlink" title="2 哈希表结构【理解】"></a>2 哈希表结构【理解】</h2><ul><li><p>JDK1.8以前</p><p>​    数组 + 链表</p><p><img src="/2020/11/12/shujujg/JKD8%E4%BB%A5%E5%89%8D%E5%93%88%E5%B8%8C%E8%A1%A8.png" alt="14_JKD8以前哈希表"></p></li><li><p>JDK1.8以后</p><ul><li><p>节点个数少于等于8个</p><p>​    数组 + 链表</p></li><li><p>节点个数多于8个</p><p>​    数组 + 红黑树</p></li></ul><p><img src="/2020/11/12/shujujg/JKD8%E4%BB%A5%E5%90%8E%E5%93%88%E5%B8%8C%E8%A1%A8.png" alt="15_JKD8以后哈希表"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉树&lt;/h2&gt;&lt;h3 id=&quot;1-1二叉树【理解】&quot;&gt;&lt;a href=&quot;#1-1二叉树【理解】&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="http://example.com/2020/10/12/git/"/>
    <id>http://example.com/2020/10/12/git/</id>
    <published>2020-10-12T03:48:33.000Z</published>
    <updated>2021-01-23T12:12:42.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-git下载"><a href="#1-git下载" class="headerlink" title="1.git下载"></a>1.git下载</h2><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><h2 id="2-Git-配置"><a href="#2-Git-配置" class="headerlink" title="2.Git 配置"></a>2.Git 配置</h2><p>配置全局用户名和密码，git提交代码时用来显示你身份和联系方式，并不是github用户名和邮箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;cardioid&quot;</span> <span class="comment">//改成自己的</span></span><br><span class="line">git config --global user.email <span class="string">&quot;1415479273@qq.com&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3-生成SSH-key"><a href="#3-生成SSH-key" class="headerlink" title="3.生成SSH key"></a>3.生成SSH key</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;1415479273@qq.com&quot;</span><br></pre></td></tr></table></figure><ul><li><p>然后会叫你输入保存路径，直接按回车即可，保存在C盘用户目录下</p></li><li><p>然后会提示输入密码和确认密码，不用输入直接按两下回车即可</p></li></ul><p>文件默认是在C盘用户目录下，我的是<code>C:\Users\13452\.ssh</code></p><p>文件夹中应该会有两个文件 ：<code>id_rsa</code>和<code>id_rsa.pub</code></p><p><code>id_rsa.pub</code>就是我们要的key</p><p>SSH key就生成好了，接下来就是配置到github或者码云上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-git下载&quot;&gt;&lt;a href=&quot;#1-git下载&quot; class=&quot;headerlink&quot; title=&quot;1.git下载&quot;&gt;&lt;/a&gt;1.git下载&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;https://gi</summary>
      
    
    
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>mata标签</title>
    <link href="http://example.com/2020/09/03/html/meta%E6%A0%87%E7%AD%BE%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2020/09/03/html/meta%E6%A0%87%E7%AD%BE%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2020-09-03T04:48:33.000Z</published>
    <updated>2020-12-14T12:08:01.554Z</updated>
    
    <content type="html"><![CDATA[<h3 id="meta标签的应用"><a href="#meta标签的应用" class="headerlink" title="meta标签的应用"></a>meta标签的应用</h3><h4 id="1-声明字符的编码-防止出现乱码"><a href="#1-声明字符的编码-防止出现乱码" class="headerlink" title="1.声明字符的编码**防止出现乱码"></a>1.声明字符的编码**防止出现乱码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-设置无法放大、缩小网页"><a href="#2-设置无法放大、缩小网页" class="headerlink" title="2.设置无法放大、缩小网页"></a>2.设置无法放大、缩小网页</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no,viewport-fit=cover&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-删除默认的苹果工具栏和菜单栏"><a href="#3-删除默认的苹果工具栏和菜单栏" class="headerlink" title="3.删除默认的苹果工具栏和菜单栏"></a>3.删除默认的苹果工具栏和菜单栏</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-capable&quot;</span> <span class="attr">content</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-Edge模式告诉IE以最高级-模式渲染文档，也就是任何IE版本都以当前版本所支持的最高级标准模式渲染，避免版本升级造成的影响。"><a href="#4-Edge模式告诉IE以最高级-模式渲染文档，也就是任何IE版本都以当前版本所支持的最高级标准模式渲染，避免版本升级造成的影响。" class="headerlink" title="4.Edge模式告诉IE以最高级 模式渲染文档，也就是任何IE版本都以当前版本所支持的最高级标准模式渲染，避免版本升级造成的影响。"></a>4.Edge模式告诉IE以最高级 模式渲染文档，也就是任何IE版本都以当前版本所支持的最高级标准模式渲染，避免版本升级造成的影响。</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-禁止默认的将数字识别为可点击的telephone"><a href="#5-禁止默认的将数字识别为可点击的telephone" class="headerlink" title="5.禁止默认的将数字识别为可点击的telephone"></a>5.禁止默认的将数字识别为可点击的telephone</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&#x27;telephone=no&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;format-detection&#x27;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-禁止默认的将数字识别为可点击的telephone"><a href="#6-禁止默认的将数字识别为可点击的telephone" class="headerlink" title="6.禁止默认的将数字识别为可点击的telephone"></a>6.禁止默认的将数字识别为可点击的telephone</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&#x27;email=no&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;format-detection&#x27;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-网站关键词，有助于seo"><a href="#7-网站关键词，有助于seo" class="headerlink" title="7.网站关键词，有助于seo"></a>7.网站关键词，有助于seo</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;keywords&#x27;</span> <span class="attr">content</span>=<span class="string">&quot;&#123;% block keywords %&#125;&#123;% endblock %&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-网站描述，有助于seo"><a href="#8-网站描述，有助于seo" class="headerlink" title="8.网站描述，有助于seo"></a>8.网站描述，有助于seo</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;description&#x27;</span> <span class="attr">content</span>=<span class="string">&quot;&#123;% block description %&#125;&#123;% endblock %&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="9-topic、subject用来告诉搜索引擎你的网站主旨、主题"><a href="#9-topic、subject用来告诉搜索引擎你的网站主旨、主题" class="headerlink" title="9.topic、subject用来告诉搜索引擎你的网站主旨、主题"></a>9.topic、subject用来告诉搜索引擎你的网站主旨、主题</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;topic&quot;</span> <span class="attr">content</span>=<span class="string">&quot;your website&#x27;s topic&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;subject&quot;</span> <span class="attr">content</span>=<span class="string">&quot;your website&#x27;s subject&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="10-copyright用来说明网站版权信息。"><a href="#10-copyright用来说明网站版权信息。" class="headerlink" title="10.copyright用来说明网站版权信息。"></a>10.copyright用来说明网站版权信息。</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;copyright&quot;</span> <span class="attr">content</span>=<span class="string">&quot;XXX&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="11-网站只属于PC电脑端的页面"><a href="#11-网站只属于PC电脑端的页面" class="headerlink" title="11.网站只属于PC电脑端的页面"></a>11.网站只属于PC电脑端的页面</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PC站:<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;applicable-device&quot;</span> <span class="attr">content</span>=<span class="string">&quot;pc&quot;</span>&gt;</span></span><br><span class="line">手机站：<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;applicable-device&quot;</span> <span class="attr">content</span>=<span class="string">&quot;mobile&quot;</span> /&gt;</span></span><br><span class="line">响应式网页可标识：<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;applicable-device&quot;</span><span class="attr">content</span>=<span class="string">&quot;pc,mobile&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="12-用户通过百度移动搜索或者其他bai方式访问站点的PC页（首页或者内容页）时，站点将其自动适配到该PC页面对应的手机页，并为之选择合适的页面版本，前提是你需要做两套网站，一套是在pc端访问的，一套是在手机端访问的。"><a href="#12-用户通过百度移动搜索或者其他bai方式访问站点的PC页（首页或者内容页）时，站点将其自动适配到该PC页面对应的手机页，并为之选择合适的页面版本，前提是你需要做两套网站，一套是在pc端访问的，一套是在手机端访问的。" class="headerlink" title="12.用户通过百度移动搜索或者其他bai方式访问站点的PC页（首页或者内容页）时，站点将其自动适配到该PC页面对应的手机页，并为之选择合适的页面版本，前提是你需要做两套网站，一套是在pc端访问的，一套是在手机端访问的。"></a>12.用户通过百度移动搜索或者其他bai方式访问站点的PC页（首页或者内容页）时，站点将其自动适配到该PC页面对应的手机页，并为之选择合适的页面版本，前提是你需要做两套网站，一套是在pc端访问的，一套是在手机端访问的。</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;mobile-agent&quot;</span> <span class="attr">content</span>=<span class="string">&quot;format=html5;url=&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="13-代表禁止浏览器从本地计算机的缓存中访问页面内容-这样设定，访问者将无法脱机浏览。"><a href="#13-代表禁止浏览器从本地计算机的缓存中访问页面内容-这样设定，访问者将无法脱机浏览。" class="headerlink" title="13.代表禁止浏览器从本地计算机的缓存中访问页面内容,这样设定，访问者将无法脱机浏览。"></a>13.代表禁止浏览器从本地计算机的缓存中访问页面内容,这样设定，访问者将无法脱机浏览。</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;cache-control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;meta标签的应用&quot;&gt;&lt;a href=&quot;#meta标签的应用&quot; class=&quot;headerlink&quot; title=&quot;meta标签的应用&quot;&gt;&lt;/a&gt;meta标签的应用&lt;/h3&gt;&lt;h4 id=&quot;1-声明字符的编码-防止出现乱码&quot;&gt;&lt;a href=&quot;#1-声明字符的编码</summary>
      
    
    
    
    
    <category term="html" scheme="http://example.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令总结</title>
    <link href="http://example.com/2020/06/04/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2020/06/04/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-04T06:44:33.000Z</published>
    <updated>2020-12-14T11:21:30.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux常用命令总结"><a href="#Linux常用命令总结" class="headerlink" title="Linux常用命令总结"></a>Linux常用命令总结</h1><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">暂时关闭防火墙</span></span><br><span class="line">systemctl  stop  firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">永久设置防火墙状态</span></span><br><span class="line">systemctl enable firewalld.service  #打开防火墙永久性生效，重启后不会复原 </span><br><span class="line">systemctl disable firewalld.service #关闭防火墙，永久性生效，重启后不会复原 </span><br></pre></td></tr></table></figure><h2 id="ps显示进程"><a href="#ps显示进程" class="headerlink" title="ps显示进程"></a>ps显示进程</h2><p>显示进程信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ps</span><br><span class="line">ps -u root </span><br><span class="line">//显示root进程用户信息</span><br><span class="line">ps -ef </span><br><span class="line">//显示所有进程信息，连带命令行</span><br><span class="line">ps -ef|grep java </span><br><span class="line">//所有的java所有进程</span><br><span class="line">ps aux|grep java </span><br><span class="line">查看所有包含关键字java的进程，显示详细的运行信息</span><br><span class="line">ps –ef|grep tomcat </span><br><span class="line">查看所有有关tomcat的进程</span><br><span class="line">ps aux </span><br><span class="line">查看所有进程, 显示详细运行信息</span><br><span class="line">kill -9 19979 </span><br><span class="line">终止线程号位19979的进程</span><br><span class="line"></span><br><span class="line">ls -al </span><br><span class="line">查看当前目录文件，包含隐藏文件</span><br><span class="line"></span><br><span class="line">pwd </span><br><span class="line">查看当前所在目录</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查看文件大小"><a href="#查看文件大小" class="headerlink" title="查看文件大小"></a>查看文件大小</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du [选项][文件]</span><br></pre></td></tr></table></figure><blockquote><p>-a或-all 显示目录中个别文件的大小。<br>-b或-bytes 显示目录或文件大小时，以byte为单位。<br>-c或–total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。<br>-k或–kilobytes 以KB(1024bytes)为单位输出。<br>-m或–megabytes 以MB为单位输出。<br>-s或–summarize 仅显示总计，只列出最后加总的值。<br>-h或–human-readable 以K，M，G为单位，提高信息的可读性。<br>-x或–one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。<br>-L&lt;符号链接&gt;或–dereference&lt;符号链接&gt; 显示选项中所指定符号链接的源文件大小。<br>-S或–separate-dirs 显示个别目录的大小时，并不含其子目录的大小。<br>-X&lt;文件&gt;或–exclude-from=&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。<br>–exclude=&lt;目录或文件&gt; 略过指定的目录或文件。<br>-D或–dereference-args 显示指定符号链接的源文件大小。<br>-H或–si 与-h参数相同，但是K，M，G是以1000为换算单位。<br>-l或–count-links 重复计算硬件链接的文件。</p></blockquote><p>常用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh /opt</span><br></pre></td></tr></table></figure><h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h2><p>owenr、group、others三种身份各自有自己的r、w和x</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">修改权限： </span><br><span class="line">chmod 777 file.java</span><br><span class="line">//file.java的权限-rwxrwxrwx，r表示读、w表示写、x表示可执行</span><br><span class="line">r(read 读)、w(write 写)、x(execute 访问</span><br><span class="line">可以使用数字表示权限：</span><br><span class="line"></span><br><span class="line"><span class="meta">r-&gt;</span><span class="bash">4</span></span><br><span class="line"><span class="meta">w-&gt;</span><span class="bash">2</span></span><br><span class="line"><span class="meta">x-&gt;</span><span class="bash">1</span></span><br><span class="line">当文件权限为“rwxrwxrwx”时，分数是：</span><br><span class="line"></span><br><span class="line"><span class="meta">owner-&gt;</span><span class="bash">4+2+1=7</span></span><br><span class="line"></span><br><span class="line"><span class="meta">group-&gt;</span><span class="bash">4+2+1=7</span></span><br><span class="line"></span><br><span class="line"><span class="meta">others-&gt;</span><span class="bash">4+2+1=1</span></span><br><span class="line"></span><br><span class="line">此时文件的权限数字就是777</span><br></pre></td></tr></table></figure><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -tnl | grep 443 （查看443端口是否被占用）</span><br><span class="line">root用户，用netstat -pnl | grep 443 （还可显示出占用本机443端口的进程PID）</span><br></pre></td></tr></table></figure><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><p>java javac <a href="http://www.hollischuang.com/archives/105">jps</a> ,<a href="http://www.hollischuang.com/archives/481">jstat</a> ,<a href="http://www.hollischuang.com/archives/303">jmap</a>, <a href="http://www.hollischuang.com/archives/110">jstack</a></p><p>jps：显示当前所有java进程pid的命令。其他命令往往需要先通过jps命令获取java进程的pid。</p><p>jstat + pid： 用于监控虚拟机各种运行状态信息的命令行工具。他可以显示本地或远程虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据</p><p>jmap + pid：打印java堆相关的各种信息。当服务发生GC问题时，一般会使用jmap工具进行分析。</p><p>jstack + pid：打印Java栈相关各种信息。jstack用于生成java虚拟机当前时刻的线程快照。</p><h2 id="awk处理"><a href="#awk处理" class="headerlink" title="awk处理"></a>awk处理</h2><p>awk就是把文件<strong>逐行的读入</strong>，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p><p>awk是一个强大的<strong>文本分析</strong>工具，相对于grep的查找，sed的编辑，awk在其<strong>对数据分析并生成报告时</strong>，显得尤为强大。</p><p>类比： awk–SQL中的Concat grep–SQL中的Select</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;pattern + action&#125;&#x27;</span> &#123;filenames&#125; <span class="comment">//用法</span></span><br><span class="line">ls | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> <span class="comment">//用|隔开与命令连用</span></span><br><span class="line">last -n <span class="number">5</span> | awk  <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">#awk -F: &#x27;/root/&#x27; /etc/passwd //搜索/etc/passwd文件中有root关键字的所有行</span><br><span class="line"><span class="comment">//root:x:0:0:root:/root:/bin/bash</span></span><br></pre></td></tr></table></figure><p>awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,1 表 示 第 一 个 域 , 1表示第一个域,1表示第一个域,n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。</p><h2 id="sed编辑"><a href="#sed编辑" class="headerlink" title="sed编辑"></a>sed编辑</h2><p>Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。</p><p>Linux sed命令是利用script来处理文本文件。sed可依照script的指令，来处理、编辑文本文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sed -e 4a\newLine testfile <span class="comment">//在文件testfile第四行添加内容newLine</span></span><br><span class="line">nl /etc/passwd | sed <span class="string">&#x27;2d&#x27;</span> <span class="comment">//删除文件第二行</span></span><br><span class="line">nl /etc/passwd | sed <span class="string">&#x27;2,5d&#x27;</span> <span class="comment">//删除第2到5行</span></span><br><span class="line">nl /etc/passwd | sed <span class="string">&#x27;2，$d&#x27;</span> <span class="comment">//删除第2到最后行</span></span><br><span class="line">nl /etc/passwd | sed <span class="string">&#x27;2a drink tea&#x27;</span><span class="comment">//在第二行后添加行</span></span><br><span class="line"><span class="number">12345</span></span><br><span class="line">a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</span><br><span class="line">c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</span><br><span class="line">d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；</span><br><span class="line">i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</span><br><span class="line">p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</span><br><span class="line">s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 <span class="number">1</span>,20s/old/<span class="keyword">new</span>/g 就是啦！</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="grep查找行"><a href="#grep查找行" class="headerlink" title="grep查找行"></a>grep查找行</h2><p>Linux grep命令用于查找文件里符合条件的字符串。</p><p><strong>grep</strong>（global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p><p><code>grep -H &#39;spring&#39; *.xml</code> 查找所以有的包含spring的xml文件</p><p><code>grep &#39;test&#39; d*</code> 显示所有以d开头的文件中包含test的行。</p><p><code>grep &#39;test&#39; aa bb cc</code> 显示在aa，bb，cc文件中匹配test的行。</p><p><code>grep &#39;[a-z]\&#123;5\&#125;&#39; aa</code> 显示所有包含每个字符串至少有5个连续小写字符的字符串的行。</p><h2 id="sort排序"><a href="#sort排序" class="headerlink" title="sort排序"></a>sort排序</h2><p>Linux sort命令用于将文本文件内容加以排序。</p><p>sort可针对文本文件的内容，以行为单位来排序</p><p>按照每行首字母ASCII编码来排序， 汉字也可按照读音字母顺序排序，汉字行排在字母行之后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort mi.txt &#x2F;&#x2F;将mi.txt内容按行首字母的编码次序来排</span><br></pre></td></tr></table></figure><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>提取指定网页</p><ul><li>显示头信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i https://www.baidu.com</span><br></pre></td></tr></table></figure><ul><li>显示通信过程</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v www.baidu.com</span><br></pre></td></tr></table></figure><ul><li>查看议定书</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --trace-ascii output.txt https://www.baidu.com</span><br></pre></td></tr></table></figure><ul><li>查看时间</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --trace-ascii output.txt --trace-time https://www.baidu.com</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">curl http:<span class="comment">//www.linux.com &gt;&gt; linux.html  //使用linux重定向功能保存访问的网页</span></span><br><span class="line"> curl -o linux.html http:<span class="comment">//www.linux.com //使用curl的内置option:-o(小写)保存网页</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>文件下载</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl uri filename --silent|progress</span><br></pre></td></tr></table></figure><ul><li>–silent：不显示进度条</li><li>–progress：显示进度条</li></ul></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># curl https://avatar.csdnimg.cn/3/5/E/1_meituantech_1564971608.jpg -omeituan.jpg --progress</span></span><br></pre></td></tr></table></figure><ul><li>上传文件<br>语法：<code>$ curl --form upload=@localfilename --form press=OK [URL]</code></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># curl --form upload=@baidu.html --form press=OK url</span></span><br></pre></td></tr></table></figure><p>还有诸如代理，cookie等等功能。</p><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>默认是显示文本开头前10行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>显示开头前k行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">head -k &#x2F;etc&#x2F;passwd</span><br><span class="line">head -n k &#x2F;etc&#x2F;passwd（注意和下面的有-的区别）</span><br><span class="line">head -n +k &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>除最后k行外，显示剩余全部内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -n -k &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><table><thead><tr><th>命令格式</th><th>运行结果</th></tr></thead><tbody><tr><td>mv 文件名 文件名</td><td>将源文件名改为目标文件名</td></tr><tr><td>mv 文件名 目录名</td><td>将文件移动到目标目录</td></tr><tr><td>mv 目录名 目录名</td><td>目标目录已存在，将源目录 移动到目标目录；目标 目录不存在则改名</td></tr><tr><td>mv 目录名 文件名</td><td>出错</td></tr></tbody></table><h2 id="查看内核版本"><a href="#查看内核版本" class="headerlink" title="查看内核版本"></a>查看内核版本</h2><p>uname命令用于查看内核版本<br><img src="https://img-blog.csdnimg.cn/20200721133752825.png" alt="在这里插入图片描述"></p><h2 id="查看linux系统ip"><a href="#查看linux系统ip" class="headerlink" title="查看linux系统ip"></a>查看linux系统ip</h2><p>查看linux的ip地址：可以用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><h2 id="查看ip是否被占用"><a href="#查看ip是否被占用" class="headerlink" title="查看ip是否被占用"></a>查看ip是否被占用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:8080</span><br></pre></td></tr></table></figure><h2 id="uptime命令使用"><a href="#uptime命令使用" class="headerlink" title="uptime命令使用"></a>uptime命令使用</h2><p>uptime命令能够打印系统总共运行了多长时间和系统的平均负载。uptime命令可以显示的信息显示依次为：现在时间、系统已经运行了多长时间、目前有多少登陆用户、系统在过去的1分钟、5分钟和15分钟内的平均负载。</p><p>用help参数参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[shared@localhost~]$</span><span class="bash"> uptime --<span class="built_in">help</span></span></span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line"> uptime [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> -p, --pretty   show uptime in pretty format </span><br><span class="line"> -h, --help     display this help and exit </span><br><span class="line"> -s, --since    system up since </span><br><span class="line"> -V, --version  output version information and exit</span><br><span class="line"></span><br><span class="line">For more details see uptime(1).</span><br><span class="line"><span class="meta">[shared@localhost~]$</span><span class="bash"> uptime -V</span></span><br><span class="line">uptime from procps-ng 3.3.10</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Options:</p><ul><li>-p, –pretty show uptime in pretty format //比较美观的打印</li><li>-h, –help display this help and exit // 查看参数帮助</li><li>-s, –since system up since // 查看系统当前时间</li><li>-V, –version output version information and exit // 查看版本</li></ul><p><img src="https://img-blog.csdnimg.cn/20200721131423692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ0MjczOTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="telnet命令使用"><a href="#telnet命令使用" class="headerlink" title="telnet命令使用"></a>telnet命令使用</h2><p>不管在window还是linux系统要校验某台服务器是否可以ping通，都可以使用命令，如果要加上断口的，linux可以使用telnet命令<br><code>语法：telnet ip port</code>                      </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 127.0.0.1 8080</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux常用命令总结&quot;&gt;&lt;a href=&quot;#Linux常用命令总结&quot; class=&quot;headerlink&quot; title=&quot;Linux常用命令总结&quot;&gt;&lt;/a&gt;Linux常用命令总结&lt;/h1&gt;&lt;h2 id=&quot;关闭防火墙&quot;&gt;&lt;a href=&quot;#关闭防火墙&quot; class</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>vue</title>
    <link href="http://example.com/2020/05/14/vue/vue%E7%9A%84%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/"/>
    <id>http://example.com/2020/05/14/vue/vue%E7%9A%84%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/</id>
    <published>2020-05-14T00:53:33.000Z</published>
    <updated>2020-12-14T12:05:08.705Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue的异步请求"><a href="#vue的异步请求" class="headerlink" title="vue的异步请求"></a>vue的异步请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">&quot;#div&quot;</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            name:<span class="string">&quot;张三&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            <span class="function"><span class="title">send</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">// GET方式请求</span></span><br><span class="line">                <span class="comment">// axios.get(&quot;testServlet?name=&quot; + this.name)</span></span><br><span class="line">                <span class="comment">//     .then(resp =&gt; &#123;</span></span><br><span class="line">                <span class="comment">//         alert(resp.data);</span></span><br><span class="line">                <span class="comment">//     &#125;)</span></span><br><span class="line">                <span class="comment">//     .catch(error =&gt; &#123;</span></span><br><span class="line">                <span class="comment">//         alert(error);</span></span><br><span class="line">                <span class="comment">//     &#125;)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// POST方式请求</span></span><br><span class="line">                axios.post(<span class="string">&quot;testServlet&quot;</span>,<span class="string">&quot;name=&quot;</span>+<span class="built_in">this</span>.name)</span><br><span class="line">                    .then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span><br><span class="line">                        alert(resp.data);</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                        alert(error);</span><br><span class="line">                    &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;vue的异步请求&quot;&gt;&lt;a href=&quot;#vue的异步请求&quot; class=&quot;headerlink&quot; title=&quot;vue的异步请求&quot;&gt;&lt;/a&gt;vue的异步请求&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>微服务网关Gateway</title>
    <link href="http://example.com/2020/05/07/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%89%B4%E6%9D%83/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%89%B4%E6%9D%83JWT/"/>
    <id>http://example.com/2020/05/07/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%89%B4%E6%9D%83/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%89%B4%E6%9D%83JWT/</id>
    <published>2020-05-07T05:49:00.000Z</published>
    <updated>2020-12-14T12:19:20.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h2><h3 id="1-1-微服务网关概述"><a href="#1-1-微服务网关概述" class="headerlink" title="1.1 微服务网关概述"></a>1.1 微服务网关概述</h3><p>​    不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信，会有以下的问题：</p><ul><li>客户端会多次<strong>请求不同的微服务</strong>，增加了客户端的复杂性</li><li>存在<strong>跨域</strong>请求，在一定场景下处理相对复杂</li><li><strong>认证复杂</strong>，每个服务都需要独立认证</li><li><strong>难以重构</strong>，随着项目的迭代，可能需要重新划分微服务。例如，可能将多个服务合并成一个或者将一个服务拆分成多个。如果客户端直接与微服务通信，那么重构将会很难实施</li></ul><p>以上这些问题可以借助网关解决。</p><p>网关是介于<strong>客户端</strong>和<strong>服务器</strong>端之间的<strong>中间层</strong>，所有的外部请求都会先经过 网关这一层。也就是说，API 的实现方面更多的考虑业务逻辑，而安全、性能、监控可以交由 网关来做，这样既提高业务灵活性又不缺安全性，典型的架构图如图所示：</p><p><img src="images/1557824391432.png" alt="1557824391432"></p><p><strong>优点：</strong></p><ul><li><strong>安全</strong> ，只有网关系统对外进行暴露，微服务可以隐藏在内网，通过防火墙保护。</li><li><strong>易于监控</strong>。可以在网关收集监控数据并将其推送到外部系统进行分析。</li><li>易于<strong>统一认证授权</strong>。可以在网关上进行认证，然后再将请求转发到后端的微服务，而无须在每个微服务中进行认证。</li><li>减少了<strong>客户端与各个微服务</strong>之间的<strong>交互</strong>次数</li></ul><p>总结：微服务网关就是一个系统，通过暴露该微服务网关系统，方便我们进行相关的鉴权，安全控制，日志统一处理，易于监控的相关功能。</p><p>实现微服务网关的技术有很多，</p><ul><li>nginx  Nginx (engine x) 是一个高性能的<a href="https://baike.baidu.com/item/HTTP">HTTP</a>和<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488">反向代理</a>web服务器，同时也提供了IMAP/POP3/SMTP服务</li><li>zuul ,Zuul 是 Netflix 出品的一个基于 JVM 路由和服务端的负载均衡器。</li><li>spring-cloud-gateway, 是spring 出品的 基于spring 的网关项目，集成断路器，路径重写，性能比Zuul好。</li></ul><p>我们使用gateway这个网关技术，无缝衔接到基于spring cloud的微服务开发中来。</p><p>gateway官网：</p><p><a href="https://spring.io/projects/spring-cloud-gateway">https://spring.io/projects/spring-cloud-gateway</a></p><h3 id="1-2-微服务网关微服务搭建"><a href="#1-2-微服务网关微服务搭建" class="headerlink" title="1.2 微服务网关微服务搭建"></a>1.2 微服务网关微服务搭建</h3><p>​    由于我们开发的系统 有包括前台系统和后台系统，后台的系统给管理员使用。那么也需要调用各种微服务，所以我们针对管理后台搭建一个网关微服务。分析如下：</p><p><img src="images/4-1.png" alt="1557825607685"></p><p><strong>搭建步骤：</strong></p><p><img src="/2020/05/07/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%89%B4%E6%9D%83/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%89%B4%E6%9D%83JWT/images%5Cimage111.png" alt="image-20201205200402289"></p><p>（1）在yigou_gateway工程中，创建yigou_gateway_system工程，pom.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）创建包com.yigou.system, 创建引导类：GatewayApplication</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）在resources下创建application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sysgateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">goods</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://goods</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/goods/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">StripPrefix=</span> <span class="number">1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">system</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://system</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/system/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">StripPrefix=</span> <span class="number">1</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9101</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:6868/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><p>uri: lb://goods</p><p>  会根据lb的动态路由协议 动态的找到goods的服务</p></li><li><p>StripPrefix= 1</p><p>  会忽略掉第一个斜线后面的值</p></li><li><p>Path=/goods/**</p><p>  匹配的路径</p></li></ul><p>参考官方手册：</p><p><a href="https://cloud.spring.io/spring-cloud-gateway/spring-cloud-gateway.html#_stripprefix_gatewayfilter_factory">https://cloud.spring.io/spring-cloud-gateway/spring-cloud-gateway.html#_stripprefix_gatewayfilter_factory</a></p><h3 id="1-3-微服务网关跨域"><a href="#1-3-微服务网关跨域" class="headerlink" title="1.3 微服务网关跨域"></a>1.3 微服务网关跨域</h3><p>修改application.yml  ,在spring.cloud.gateway节点添加配置，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">globalcors:</span></span><br><span class="line">  <span class="attr">cors-configurations:</span></span><br><span class="line">    <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span> <span class="comment"># 匹配所有请求</span></span><br><span class="line">      <span class="attr">allowedOrigins:</span> <span class="string">&quot;*&quot;</span> <span class="comment">#跨域处理 允许所有的域</span></span><br><span class="line">      <span class="attr">allowedMethods:</span> <span class="comment"># 支持的方法</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GET</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POST</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUT</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DELETE</span></span><br></pre></td></tr></table></figure><p>最终配置文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sysgateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解决跨域的问题</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">cors-configurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span> <span class="comment"># 匹配所有请求</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="string">&quot;*&quot;</span> <span class="comment">#跨域处理 允许所有的域</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 支持的方法</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">GET</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">POST</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PUT</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">DELETE</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">goods</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://goods</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/goods/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">StripPrefix=</span> <span class="number">1</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9101</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:6868/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="1-4-微服务网关过滤器"><a href="#1-4-微服务网关过滤器" class="headerlink" title="1.4 微服务网关过滤器"></a>1.4 微服务网关过滤器</h3><p>我们可以通过网关过滤器，实现一些逻辑的处理，比如ip黑白名单拦截、特定地址的拦截等。下面的代码中做了两个过滤器，并且设定的先后顺序，只演示过滤器与运行效果。</p><p>（1）yigou_gateway_system创建IpFilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取客户端的访问ip</span></span><br><span class="line">        System.out.println(<span class="string">&quot;经过第1个过滤器IpFilter&quot;</span>);</span><br><span class="line">        ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">        InetSocketAddress remoteAddress = request.getRemoteAddress();</span><br><span class="line">        System.out.println(<span class="string">&quot;ip:&quot;</span>+remoteAddress.getHostName());</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);<span class="comment">//放行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>filter(ServerWebExchange exchange, GatewayFilterChain chain)   方法里面要执行的都是一些具体的逻辑</p><p>getOrder() 定义执行的优先级  <strong>值越小</strong> 执行的优先级就越高</p><p>（2）yigou_gateway_system创建UrlFilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取客户端的访问url</span></span><br><span class="line">        System.out.println(<span class="string">&quot;经过第2个过滤器UrlFilter&quot;</span>);</span><br><span class="line">        ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">        String url = request.getURI().getPath();</span><br><span class="line">        System.out.println(<span class="string">&quot;url:&quot;</span>+url);</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，观察控制台输出。</p><h2 id="2-网关限流"><a href="#2-网关限流" class="headerlink" title="2 网关限流"></a>2 网关限流</h2><p>​    我们之前说过，网关可以做很多的事情，比如，限流，当我们的系统被频繁的请求的时候，就有可能将系统压垮，所以为了解决这个问题，需要在每一个微服务中做限流操作，但是如果有了网关，那么就可以在网关系统做限流，因为所有的请求都需要先通过网关系统才能路由到微服务中。</p><h3 id="2-1-思路分析"><a href="#2-1-思路分析" class="headerlink" title="2.1 思路分析"></a>2.1 思路分析</h3><p><img src="images/1557909861570.png" alt="1557909861570"></p><h3 id="2-2-令牌桶算法"><a href="#2-2-令牌桶算法" class="headerlink" title="2.2 令牌桶算法"></a>2.2 令牌桶算法</h3><p>令牌桶算法是比较常见的限流算法之一，大概描述如下：<br>1）所有的请求在处理之前都需要拿到一个可用的令牌才会被处理；<br>2）根据限流大小，设置按照一定的速率往桶里添加令牌；<br>3）桶设置最大的放置令牌限制，当桶满时、新添加的令牌就被丢弃或者拒绝；<br>4）请求达到后首先要获取令牌桶中的令牌，拿着令牌才可以进行其他的业务逻辑，处理完业务逻辑之后，将令牌直接删除；<br>5）令牌桶有最低限额，当桶中的令牌达到最低限额的时候，请求处理完之后将不会删除令牌，以此保证足够的限流</p><p>如下图：</p><p><img src="images/1557910299016.png" alt="1557910299016"></p><p>这个算法的实现，有很多技术，Guava(读音: 瓜哇)是其中之一，redis客户端也有其实现。</p><h3 id="2-3-网关限流代码实现"><a href="#2-3-网关限流代码实现" class="headerlink" title="2.3 网关限流代码实现"></a>2.3 网关限流代码实现</h3><p>需求：每个ip地址1秒内只能发送1次请求，多出来的请求返回429错误。</p><p>代码实现：</p><p>（1）spring cloud gateway 默认使用<strong>redis的RateLimter限流算法</strong>来实现。所以我们要使用首先需要引入redis的依赖   </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）定义KeyResolver</p><p>在<strong>GatewayApplicatioin引导类</strong>中添加如下代码，KeyResolver用于计算某一个类型的限流的KEY也就是说，可以通过<strong>KeyResolver</strong>来指定限流的Key。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个KeyResolver</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> KeyResolver <span class="title">ipKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> KeyResolver() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">resolve</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Mono.just(exchange.getRequest().getRemoteAddress().getHostName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>just 限制</p><p>exchange.getRequest().getRemoteAddress().getHostName() 获取到客户端的访问IP</p><p>（3）修改application.yml中配置项，指定限制流量的配置以及配置Redis，</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span> <span class="comment">#请求数限流 名字不能随便写 </span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@ipKeyResolver&#125;&quot;</span> <span class="comment">#引用刚才我们在启动类下面声明的bean</span></span><br><span class="line">      <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">1</span> <span class="comment">#令牌桶每秒填充平均速率 每秒声明1个</span></span><br><span class="line">      <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">1</span> <span class="comment">#令牌桶总容量</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">        <span class="comment"># 配置Redis 127.0.0.1可以省略配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><p>修改后最终配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sysgateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">cors-configurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span> <span class="comment"># 匹配所有请求</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="string">&quot;*&quot;</span> <span class="comment">#跨域处理 允许所有的域</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 支持的方法</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">GET</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">POST</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PUT</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">DELETE</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">goods</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://goods</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/goods/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">StripPrefix=</span> <span class="number">1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span> <span class="comment">#请求数限流 名字不能随便写 </span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@ipKeyResolver&#125;&quot;</span></span><br><span class="line">            <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">1</span> <span class="comment">#令牌桶每秒填充平均速率</span></span><br><span class="line">            <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">1</span> <span class="comment">#令牌桶总容量</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">system</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://system</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/system/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">StripPrefix=</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># 配置Redis 127.0.0.1可以省略配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9101</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:6868/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>burstCapacity：令牌桶总容量。</li><li>replenishRate：令牌桶每秒填充平均速率。</li><li>key-resolver：用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象。</li></ul><p>通过在<code>replenishRate</code>和中设置相同的值来实现稳定的速率<code>burstCapacity</code>。设置<code>burstCapacity</code>高于时，可以允许临时突发<code>replenishRate</code>。在这种情况下，需要在突发之间允许速率限制器一段时间（根据<code>replenishRate</code>），因为2次连续突发将导致请求被丢弃（<code>HTTP 429 - Too Many Requests</code>）</p><p> key-resolver: “#{@userKeyResolver}” 用于通过SPEL表达式来指定使用哪一个KeyResolver.</p><p>如上配置：</p><p>表示 一秒内，允许 一个请求通过，令牌桶的填充速率也是一秒钟添加一个令牌。</p><p>最大突发状况 也只允许 一秒内有一次请求，可以根据业务来调整 。</p><p>（4）测试</p><p>启动redis </p><p>启动注册中心</p><p>启动商品微服务</p><p>启动gateway网关</p><p>打开浏览器  <a href="http://localhost:9101/goods/brand">http://localhost:9101/goods/brand</a></p><p>快速刷新，当1秒内发送多次请求，就会返回429错误。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Gateway&quot;&gt;&lt;a href=&quot;#Gateway&quot; class=&quot;headerlink&quot; title=&quot;Gateway&quot;&gt;&lt;/a&gt;Gateway&lt;/h2&gt;&lt;h3 id=&quot;1-1-微服务网关概述&quot;&gt;&lt;a href=&quot;#1-1-微服务网关概述&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="Gateway" scheme="http://example.com/tags/Gateway/"/>
    
  </entry>
  
  <entry>
    <title>Thymeleaf</title>
    <link href="http://example.com/2020/05/04/thymeleaf/Thymeleaf/"/>
    <id>http://example.com/2020/05/04/thymeleaf/Thymeleaf/</id>
    <published>2020-05-04T04:49:38.000Z</published>
    <updated>2020-12-14T12:15:13.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>Thymeleaf的介绍   si mei li fu</li><li>Thymeleaf的入门</li><li>Thymeleaf的语法及标签</li><li>搜索页面渲染</li><li>商品详情页静态化功能实现</li></ul><h2 id="1-Thymeleaf介绍"><a href="#1-Thymeleaf介绍" class="headerlink" title="1.Thymeleaf介绍"></a>1.Thymeleaf介绍</h2><p>​    thymeleaf是一个XML/XHTML/HTML5模板引擎，可用于Web与非Web环境中的应用开发。它是一个开源的Java库，基于Apache License 2.0许可，由Daniel Fernández创建，该作者还是Java加密库Jasypt的作者。</p><p>Thymeleaf提供了一个用于整合Spring MVC的可选模块，在应用开发中，你可以使用Thymeleaf来完全代替JSP或其他模板引擎，如Velocity、FreeMarker等。Thymeleaf的主要目标在于提供一种可被浏览器正确显示的、格式良好的模板创建方式，因此也可以用作静态建模。你可以使用它创建经过验证的XML与HTML模板。相对于编写逻辑或代码，开发者只需将标签属性添加到模板中即可。接下来，这些标签属性就会在DOM（文档对象模型）上执行预先制定好的逻辑。</p><p>它的特点便是：开箱即用，Thymeleaf允许您处理六种模板，每种模板称为模板模式：</p><ul><li>XML</li><li>有效的XML</li><li>XHTML</li><li>有效的XHTML</li><li>HTML5</li><li>旧版HTML5</li></ul><p>所有这些模式都指的是格式良好的XML文件，但<em>Legacy HTML5</em>模式除外，它允许您处理HTML5文件，其中包含独立（非关闭）标记，没有值的标记属性或不在引号之间写入的标记属性。为了在这种特定模式下处理文件，Thymeleaf将首先执行转换，将您的文件转换为格式良好的XML文件，这些文件仍然是完全有效的HTML5（实际上是创建HTML5代码的推荐方法）<a href="https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html#fn1">1</a>。</p><p>另请注意，验证仅适用于XML和XHTML模板。</p><p>然而，这些并不是Thymeleaf可以处理的唯一模板类型，并且用户始终能够通过指定在此模式下<em>解析</em>模板的方法和<em>编写</em>结果的方式来定义他/她自己的模式。这样，任何可以建模为DOM树（无论是否为XML）的东西都可以被Thymeleaf有效地作为模板处理。</p><p><strong>应用场景:</strong></p><p><strong>对于一些不经常发生改变  并且被频繁访问的页面  我们就可以使用Thymeleaf模板引擎技术</strong></p><p>好处:</p><ul><li><strong>加快当前用户的响应速度</strong></li><li><strong>减轻服务端的访问压力</strong></li></ul><h2 id="2-Springboot整合thymeleaf"><a href="#2-Springboot整合thymeleaf" class="headerlink" title="2.Springboot整合thymeleaf"></a>2.Springboot整合thymeleaf</h2><p>使用springboot 来集成使用Thymeleaf可以大大减少单纯使用thymleaf的代码量，所以我们接下来使用springboot集成使用thymeleaf.</p><p>实现的步骤为：</p><ul><li>创建一个sprinboot项目</li><li>添加thymeleaf的起步依赖</li><li>添加spring web的起步依赖</li><li>编写html 使用thymeleaf的语法获取变量对应后台传递的值</li><li>编写controller 设置变量的值到model中</li></ul><p>(1)创建工程</p><p>创建一个独立的工程springboot-thymeleaf,该工程为案例工程，不需要放到changgou工程中。</p><p><strong>pom.xml依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--thymeleaf配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(2)创建包com.itheima.thymeleaf.并创建启动类ThymeleafApplication</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ThymeleafApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)创建application.yml</p><p>设置thymeleaf的缓存设置，设置为false。默认加缓存的，用于测试。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>(4)控制层</p><p>创建controller用于测试后台 设置数据到model中。</p><p>创建com.itheima.controller.TestController，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 访问/test/hello  跳转到demo1页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;hello welcome&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;demo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)创建html</p><p>在resources中创建templates目录，在templates目录创建 demo.html,代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Thymeleaf的入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--输出hello数据--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;hello&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解释：</p><p><code>&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code>:这句声明使用thymeleaf标签</p><p><code>&lt;p th:text=&quot;$&#123;hello&#125;&quot;&gt;&lt;/p&gt;</code>:这句使用 th:text=”${变量名}” 表示 使用thymeleaf获取文本数据，类似于EL表达式。</p><p>(5)测试</p><p>启动系统，并在浏览器访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;test&#x2F;hello</span><br></pre></td></tr></table></figure><p><img src="images/1560936996326.png" alt="1560936996326"></p><h2 id="3-Thymeleaf基本语法"><a href="#3-Thymeleaf基本语法" class="headerlink" title="3 Thymeleaf基本语法"></a>3 Thymeleaf基本语法</h2><p>(1)th:action</p><p>定义后台控制器路径，类似<code>&lt;form&gt;</code>标签的action属性。 </p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/test/hello&#125;&quot;</span> &gt;</span>    <span class="comment">&lt;!--@&#123;...&#125; 链接url表达式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">th:name</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(2)th:each</p><p>对象遍历，功能类似jstl中的<code>&lt;c:forEach&gt;</code>标签。 </p><p>创建com.itheima.model.User,代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//..get..set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller添加数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 访问/test/hello  跳转到demo1页面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;hello welcome&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//集合数据</span></span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;深圳&quot;</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="number">2</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;北京&quot;</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="number">3</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;武汉&quot;</span>));</span><br><span class="line">    model.addAttribute(<span class="string">&quot;users&quot;</span>,users);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;demo1&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>住址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user,userStat:$&#123;users&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            下标:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userStat.index&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.address&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试效果</p><p><img src="images/1560941932553.png" alt="1560941932553"></p><p>(3)Map输出</p><p>后台添加Map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Map定义</span></span><br><span class="line">Map&lt;String,Object&gt; dataMap = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">dataMap.put(<span class="string">&quot;No&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">dataMap.put(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">model.addAttribute(<span class="string">&quot;dataMap&quot;</span>,dataMap);</span><br></pre></td></tr></table></figure><p>页面输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;map,mapStat:$&#123;dataMap&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;map&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    key:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;mapStat.current.key&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    value:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;mapStat.current.value&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    ==============================================</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试效果</p><p><img src="images/1560942024009.png" alt="1560942024009"></p><p>(4)数组输出</p><p>后台添加数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储一个数组</span></span><br><span class="line">String[] names = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>&#125;;</span><br><span class="line">model.addAttribute(<span class="string">&quot;names&quot;</span>,names);</span><br></pre></td></tr></table></figure><p>页面输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;nm,nmStat:$&#123;names&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;nmStat.count&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;nm&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    ==============================================</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试效果</p><p><img src="images/1560942589016.png" alt="1560942589016"></p><p>(5)Date输出</p><p>后台添加日期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日期</span></span><br><span class="line">model.addAttribute(<span class="string">&quot;now&quot;</span>,<span class="keyword">new</span> Date());</span><br></pre></td></tr></table></figure><p>页面输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span th:text&#x3D;&quot;$&#123;#dates.format(now,&#39;yyyy-MM-dd hh:ss:mm&#39;)&#125;&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>测试效果</p><p><img src="images/1560942631925.png" alt="1560942631925"></p><p>(6)th:if条件</p><p>后台添加年龄</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if条件</span></span><br><span class="line">model.addAttribute(<span class="string">&quot;age&quot;</span>,<span class="number">22</span>);</span><br></pre></td></tr></table></figure><p>页面输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;(age&gt;=18)&#125;&quot;</span>&gt;</span>终于长大了！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试效果</p><p><img src="images/1560942782470.png" alt="1560942782470"></p><p>(7)th:fragment 定义一个模块</p><p>可以定义一个独立的模块，创建一个footer.html代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=charset=utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>fragment<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;C&quot;</span> <span class="attr">th:fragment</span>=<span class="string">&quot;copy&quot;</span> &gt;</span></span><br><span class="line">    关于我们<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(8)th:include</p><p>可以直接引入<code>th:fragment</code>,在demo1.html中引入如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;A&quot;</span> <span class="attr">th:include</span>=<span class="string">&quot;footer::copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="images/1560943006665.png" alt="1560943006665"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Thymeleaf&quot;&gt;&lt;a href=&quot;#Thymeleaf&quot; class=&quot;headerlink&quot; title=&quot;Thymeleaf&quot;&gt;&lt;/a&gt;Thymeleaf&lt;/h1&gt;&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="页面静态化技术" scheme="http://example.com/tags/%E9%A1%B5%E9%9D%A2%E9%9D%99%E6%80%81%E5%8C%96%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>TKMybatis</title>
    <link href="http://example.com/2020/05/04/tkmapper/TKMybatis/"/>
    <id>http://example.com/2020/05/04/tkmapper/TKMybatis/</id>
    <published>2020-05-04T04:49:38.000Z</published>
    <updated>2021-01-23T09:41:25.162Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-启动类"><a href="#1-启动类" class="headerlink" title="1.启动类"></a>1.启动类</h3><p>创建包com.yinggang.goods 包下创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;dao&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GoodsApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>注意：@MapperScan是tk.mybatis.spring.annotation包下的，用于扫描Mapper接口</em></strong> </p><h2 id><a href="#" class="headerlink" title></a></h2><h3 id="2-表结构分析"><a href="#2-表结构分析" class="headerlink" title="2 表结构分析"></a>2 表结构分析</h3><p>tb_brand表</p><table><thead><tr><th>字段名称</th><th>字段含义</th><th>字段类型</th><th>字段长度</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>品牌id</td><td>INT</td><td></td><td></td></tr><tr><td>name</td><td>品牌名称</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>image</td><td>品牌图片地址</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>letter</td><td>品牌的首字母</td><td>CHAR</td><td></td><td></td></tr><tr><td>seq</td><td>排序</td><td>INT</td><td></td><td></td></tr></tbody></table><h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3 代码实现"></a>3 代码实现</h3><h4 id="3-1-findAll"><a href="#3-1-findAll" class="headerlink" title="3.1 findAll()"></a>3.1 findAll()</h4><p>（1）创建pojo包，包下创建Brand实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table(name=&quot;tb_brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Brand</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="keyword">private</span> Integer id;<span class="comment">//品牌id</span></span><br><span class="line"><span class="keyword">private</span> String name;<span class="comment">//品牌名称</span></span><br><span class="line"><span class="keyword">private</span> String image;<span class="comment">//品牌图片地址</span></span><br><span class="line"><span class="keyword">private</span> String letter;<span class="comment">//品牌的首字母</span></span><br><span class="line"><span class="keyword">private</span> Integer seq;<span class="comment">//排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getter and setter  .....(省略)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>implements Serializable 实现序列化</p><p>@Table和@Id都是JPA注解，</p><p>@Table用于配置表与实体类的映射关系，</p><p>@Id用于标识主键属性。</p><p>（2）Dao创建</p><p>创建dao.BrandMapper接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Brand</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>继承了Mapper接口，</strong>就自动实现了增删改查的常用方法。</p><p>（3）业务层</p><p>创建service.BrandService接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 查询所有品牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span>  List&lt;Brand&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建service.impl包，包下创建服务实现类 BrandServiceImpl，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrandServiceImpl</span> <span class="keyword">implements</span> <span class="title">BrandService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandMapper brandMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Brand&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brandMapper.selectAll();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）控制层</p><p>控制层  com.yinggang.goods包下创建controller包  ，包下创建类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrandController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandService brandService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Brand&gt; brandList = brandService.findAll();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK,<span class="string">&quot;查询成功&quot;</span>,brandList) ;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-根据ID查询"><a href="#3-2-根据ID查询" class="headerlink" title="3.2 根据ID查询"></a>3.2 根据ID查询</h4><p>（1） 业务层接口</p><p>修改service.BrandService接口，添加根据ID查询品牌数据方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据ID查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Brand <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><p>（2）业务层实现</p><p>修改service.impl.BrandServiceImpl新增方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据ID查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Brand <span class="title">findById</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  brandMapper.selectByPrimaryKey(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3） 控制层</p><p>BrandController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 根据ID查询品牌数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>&#123;</span><br><span class="line">    Brand brand = brandService.findById(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;查询成功&quot;</span>,brand);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-新增"><a href="#3-3-新增" class="headerlink" title="3.3 新增"></a>3.3 新增</h4><p>（1）业务层接口    修改service.BrandService，新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 新增品牌</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Brand brand)</span></span>;</span><br></pre></td></tr></table></figure><p>（2）业务层实现  修改service.impl.BrandServiceImpl，新增增加品牌方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 增加</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Brand brand)</span></span>&#123;</span><br><span class="line">    brandMapper.insertSelective(brand);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）控制层    BrandController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 新增品牌数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">add</span><span class="params">(<span class="meta">@RequestBody</span> Brand brand)</span></span>&#123;</span><br><span class="line">    brandService.add(brand);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-修改"><a href="#3-4-修改" class="headerlink" title="3.4 修改"></a>3.4 修改</h4><p>（1） 业务层接口</p><p>需改service.BrandService,添加修改品牌方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 修改品牌数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Brand brand)</span></span>;</span><br></pre></td></tr></table></figure><p>（2）业务层实现   修改service.impl.BrandServiceImpl，添加修改品牌方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Brand brand)</span></span>&#123;</span><br><span class="line">    brandMapper.updateByPrimaryKeySelective(brand);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）控制层</p><p>BrandController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 修改品牌数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping(value=&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> Brand brand,<span class="meta">@PathVariable</span> Integer id)</span></span>&#123;</span><br><span class="line">    brand.setId(id);</span><br><span class="line">    brandService.update(brand);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-删除"><a href="#3-5-删除" class="headerlink" title="3.5 删除"></a>3.5 删除</h4><p>（1）业务层接口</p><p>修改service.BrandService，添加删除品牌方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 删除品牌</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><p>（2）业务层实现  修改service.impl.BrandServiceImpl，新增删除品牌方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">    brandMapper.deleteByPrimaryKey(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）控制层  BrandController新增方法  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 根据ID删除品牌数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping(value = &quot;/&#123;id&#125;&quot; )</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>&#123;</span><br><span class="line">    brandService.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6-条件查询"><a href="#3-6-条件查询" class="headerlink" title="3.6 条件查询"></a>3.6 条件查询</h4><p>（1） 业务层接口</p><p>修改service.BrandService，增加根据条件搜索品牌方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 多条件搜索品牌方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> searchMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Brand&gt; <span class="title">findList</span><span class="params">(Map&lt;String, Object&gt; searchMap)</span></span>;</span><br></pre></td></tr></table></figure><p>（2）业务层实现  修改service.impl.BrandServiceImpl，添加根据多条件搜索品牌方法的实现，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 条件查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> searchMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Brand&gt; <span class="title">findList</span><span class="params">(Map&lt;String, Object&gt; searchMap)</span></span>&#123;</span><br><span class="line">Example example=<span class="keyword">new</span> Example(Brand.class);</span><br><span class="line">    Example.Criteria criteria = example.createCriteria();</span><br><span class="line"><span class="keyword">if</span>(searchMap!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">// 品牌名称</span></span><br><span class="line"><span class="keyword">if</span>(searchMap.get(<span class="string">&quot;name&quot;</span>)!=<span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(searchMap.get(<span class="string">&quot;name&quot;</span>)))&#123;</span><br><span class="line">criteria.andLike(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;%&quot;</span>+searchMap.get(<span class="string">&quot;name&quot;</span>)+<span class="string">&quot;%&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 品牌的首字母</span></span><br><span class="line"><span class="keyword">if</span>(searchMap.get(<span class="string">&quot;letter&quot;</span>)!=<span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(searchMap.get(<span class="string">&quot;letter&quot;</span>)))&#123;</span><br><span class="line">criteria.andEqualTo(<span class="string">&quot;letter&quot;</span>,searchMap.get(<span class="string">&quot;letter&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> brandMapper.selectByExample(example);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3） 控制层   BrandController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 多条件搜索品牌数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> searchMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/search&quot; )</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">findList</span><span class="params">(<span class="meta">@RequestParam</span> Map searchMap)</span></span>&#123;</span><br><span class="line">List&lt;Brand&gt; list = brandService.findList(searchMap);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;查询成功&quot;</span>,list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：Get请求：localhost:9011/brand/search?letter=C&amp;name=传智</strong></p><h4 id="3-7-列表分页查询"><a href="#3-7-列表分页查询" class="headerlink" title="3.7 列表分页查询"></a>3.7 列表分页查询</h4><p>（1） 业务层接口  修改service.BrandService添加分页方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Brand&gt; <span class="title">findPage</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure><p>（2）业务层实现  修改service.impl.BrandServiceImpl添加分页方法实现，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Brand&gt; <span class="title">findPage</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    PageHelper.startPage(page,size);</span><br><span class="line">    <span class="keyword">return</span> (Page&lt;Brand&gt;)brandMapper.selectAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3） 控制层 BrandController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 分页搜索实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/search/&#123;page&#125;/&#123;size&#125;&quot; )</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">findPage</span><span class="params">(<span class="meta">@PathVariable</span>  <span class="keyword">int</span> page, <span class="meta">@PathVariable</span>  <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">Page&lt;Brand&gt; pageList = brandService.findPage(page, size);</span><br><span class="line">PageResult pageResult=<span class="keyword">new</span> PageResult(pageList.getTotal(),pageList.getResult());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;查询成功&quot;</span>,pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：Get请求：localhost:9011/brand/search/1/3</strong></p><h4 id="3-8-列表条件-分页查询"><a href="#3-8-列表条件-分页查询" class="headerlink" title="3.8 列表条件+分页查询"></a>3.8 列表条件+分页查询</h4><p>（1） 业务层接口  修改service.BrandService，增加多条件分页查询方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 多条件分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> searchMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Page&lt;Brand&gt; <span class="title">findPage</span><span class="params">(Map&lt;String, Object&gt; searchMap, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure><p>（2）业务层实现  修改service.impl.BrandServiceImpl，添加多条件分页查询方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 条件+分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchMap 查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size 页大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Brand&gt; <span class="title">findPage</span><span class="params">(Map&lt;String,Object&gt; searchMap, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    PageHelper.startPage(page,size);</span><br><span class="line">    Example example=<span class="keyword">new</span> Example(Brand.class);</span><br><span class="line">    Example.Criteria criteria = example.createCriteria();</span><br><span class="line">    <span class="keyword">if</span>(searchMap!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 品牌名称</span></span><br><span class="line">        <span class="keyword">if</span>(searchMap.get(<span class="string">&quot;name&quot;</span>)!=<span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(searchMap.get(<span class="string">&quot;name&quot;</span>)))&#123;</span><br><span class="line">            criteria.andLike(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;%&quot;</span>+searchMap.get(<span class="string">&quot;name&quot;</span>)+<span class="string">&quot;%&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 品牌的首字母</span></span><br><span class="line">        <span class="keyword">if</span>(searchMap.get(<span class="string">&quot;letter&quot;</span>)!=<span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(searchMap.get(<span class="string">&quot;letter&quot;</span>)))&#123;</span><br><span class="line">            criteria.andEqualTo(<span class="string">&quot;letter&quot;</span>,searchMap.get(<span class="string">&quot;letter&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (Page&lt;Brand&gt;)brandMapper.selectByExample(example);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）控制层  BrandController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 分页搜索实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> searchMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/search/&#123;page&#125;/&#123;size&#125;&quot; )</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">findPage</span><span class="params">(<span class="meta">@RequestParam</span> Map searchMap, <span class="meta">@PathVariable</span>  <span class="keyword">int</span> page, <span class="meta">@PathVariable</span>  <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">Page&lt;Brand&gt; pageList = brandService.findPage(searchMap, page, size);</span><br><span class="line">PageResult pageResult=<span class="keyword">new</span> PageResult(pageList.getTotal(),pageList.getResult());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;查询成功&quot;</span>,pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：Get请求：localhost:9011/brand/searchPage/1/3/?letter=C</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-启动类&quot;&gt;&lt;a href=&quot;#1-启动类&quot; class=&quot;headerlink&quot; title=&quot;1.启动类&quot;&gt;&lt;/a&gt;1.启动类&lt;/h3&gt;&lt;p&gt;创建包com.yinggang.goods 包下创建启动类&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
      
    
    
    
    
    <category term="TKMybatis" scheme="http://example.com/tags/TKMybatis/"/>
    
  </entry>
  
  <entry>
    <title>EXCEL,CSV数据流写入ZIP文件</title>
    <link href="http://example.com/2020/05/04/zip/"/>
    <id>http://example.com/2020/05/04/zip/</id>
    <published>2020-05-04T04:49:38.000Z</published>
    <updated>2021-01-23T09:38:19.833Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h2><p>将数据写入到CSV文件、EXCEL文件并压缩成ZIP包进行下载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wang.yinggang.demo01.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.csv.CSVFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.csv.CSVPrinter;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> wang.yinggang.demo01.entry.MgUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/zip&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zip</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, OutputStream&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        ArrayList&lt;MgUser&gt; mgUsers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        MgUser mgUser1 = <span class="keyword">new</span> MgUser(<span class="number">001</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;19960527&quot;</span>);</span><br><span class="line">        MgUser mgUser2 = <span class="keyword">new</span> MgUser(<span class="number">002</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;19960527&quot;</span>);</span><br><span class="line">        MgUser mgUser3 = <span class="keyword">new</span> MgUser(<span class="number">003</span>, <span class="string">&quot;wangwu&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;19960527&quot;</span>);</span><br><span class="line">        MgUser mgUser4 = <span class="keyword">new</span> MgUser(<span class="number">004</span>, <span class="string">&quot;zhaoliu&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;19960527&quot;</span>);</span><br><span class="line">        MgUser mgUser5 = <span class="keyword">new</span> MgUser(<span class="number">005</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;19960527&quot;</span>);</span><br><span class="line"></span><br><span class="line">        mgUsers.add(mgUser1);</span><br><span class="line">        mgUsers.add(mgUser2);</span><br><span class="line">        mgUsers.add(mgUser3);</span><br><span class="line">        mgUsers.add(mgUser4);</span><br><span class="line">        mgUsers.add(mgUser5);</span><br><span class="line"></span><br><span class="line">        String[] rowsName = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;序号&quot;</span>, <span class="string">&quot;用户名&quot;</span>, <span class="string">&quot;密码&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;昵称&quot;</span>, <span class="string">&quot;出生年月&quot;</span>&#125;;</span><br><span class="line">        String[] str = &#123;<span class="string">&quot;id&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;gender&quot;</span>, <span class="string">&quot;nichen&quot;</span>, <span class="string">&quot;birthday&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteArrayOutputStream bos1 = getExcel(mgUsers, rowsName, str);</span><br><span class="line">            map.put(<span class="string">&quot;xlsx&quot;</span>, bos1);</span><br><span class="line"></span><br><span class="line">            ByteArrayOutputStream bos2 = getCsv(mgUsers,rowsName);</span><br><span class="line">            map.put(<span class="string">&quot;csv&quot;</span>, bos2);</span><br><span class="line"></span><br><span class="line">            downloadExcelForZip(map, UUID.randomUUID().toString() + <span class="string">&quot;.zip&quot;</span>, response);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/csv&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aa</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;MgUser&gt; mgUsers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        MgUser mgUser1 = <span class="keyword">new</span> MgUser(<span class="number">001</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;19960527&quot;</span>);</span><br><span class="line">        MgUser mgUser2 = <span class="keyword">new</span> MgUser(<span class="number">002</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;19960527&quot;</span>);</span><br><span class="line">        MgUser mgUser3 = <span class="keyword">new</span> MgUser(<span class="number">003</span>, <span class="string">&quot;wangwu&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;19960527&quot;</span>);</span><br><span class="line">        MgUser mgUser4 = <span class="keyword">new</span> MgUser(<span class="number">004</span>, <span class="string">&quot;zhaoliu&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;19960527&quot;</span>);</span><br><span class="line">        MgUser mgUser5 = <span class="keyword">new</span> MgUser(<span class="number">005</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;19960527&quot;</span>);</span><br><span class="line"></span><br><span class="line">        mgUsers.add(mgUser1);</span><br><span class="line">        mgUsers.add(mgUser2);</span><br><span class="line">        mgUsers.add(mgUser3);</span><br><span class="line">        mgUsers.add(mgUser4);</span><br><span class="line">        mgUsers.add(mgUser5);</span><br><span class="line"></span><br><span class="line">        String[] rowsName = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;序号&quot;</span>, <span class="string">&quot;用户名&quot;</span>, <span class="string">&quot;密码&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;昵称&quot;</span>, <span class="string">&quot;出生年月&quot;</span>&#125;;</span><br><span class="line">        String[] str = &#123;<span class="string">&quot;id&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;gender&quot;</span>, <span class="string">&quot;nichen&quot;</span>, <span class="string">&quot;birthday&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteArrayOutputStream bos = getCsv(mgUsers,rowsName);</span><br><span class="line"></span><br><span class="line">            download(response,bos,UUID.randomUUID().toString()+<span class="string">&quot;.csv&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/xlsx&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xlsx</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;MgUser&gt; mgUsers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        MgUser mgUser1 = <span class="keyword">new</span> MgUser(<span class="number">001</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;19960527&quot;</span>);</span><br><span class="line">        MgUser mgUser2 = <span class="keyword">new</span> MgUser(<span class="number">002</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;19960527&quot;</span>);</span><br><span class="line">        MgUser mgUser3 = <span class="keyword">new</span> MgUser(<span class="number">003</span>, <span class="string">&quot;wangwu&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;19960527&quot;</span>);</span><br><span class="line">        MgUser mgUser4 = <span class="keyword">new</span> MgUser(<span class="number">004</span>, <span class="string">&quot;zhaoliu&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;19960527&quot;</span>);</span><br><span class="line">        MgUser mgUser5 = <span class="keyword">new</span> MgUser(<span class="number">005</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;19960527&quot;</span>);</span><br><span class="line"></span><br><span class="line">        mgUsers.add(mgUser1);</span><br><span class="line">        mgUsers.add(mgUser2);</span><br><span class="line">        mgUsers.add(mgUser3);</span><br><span class="line">        mgUsers.add(mgUser4);</span><br><span class="line">        mgUsers.add(mgUser5);</span><br><span class="line"></span><br><span class="line">        String[] rowsName = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;序号&quot;</span>, <span class="string">&quot;用户名&quot;</span>, <span class="string">&quot;密码&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;昵称&quot;</span>, <span class="string">&quot;出生年月&quot;</span>&#125;;</span><br><span class="line">        String[] str = &#123;<span class="string">&quot;id&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;gender&quot;</span>, <span class="string">&quot;nichen&quot;</span>, <span class="string">&quot;birthday&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteArrayOutputStream bos = getExcel(mgUsers, rowsName, str);</span><br><span class="line"></span><br><span class="line">            download(response,bos,UUID.randomUUID().toString()+<span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list      对象集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headName  表头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> FieldName 查询的字段，(实体类的属性)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//把集合里的数据输出到Excel表格中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ByteArrayOutputStream <span class="title">getExcel</span><span class="params">(List&lt;T&gt; list, String[] headName, String[] FieldName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">        <span class="comment">//创建工作簿</span></span><br><span class="line">        HSSFSheet sheet = workbook.createSheet();</span><br><span class="line">        <span class="comment">//设置表头样式</span></span><br><span class="line">        HSSFCellStyle cellStyle = workbook.createCellStyle();</span><br><span class="line">        <span class="comment">//创建表头</span></span><br><span class="line">        HSSFRow rowHead = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headName.length; i++) &#123;</span><br><span class="line">            <span class="comment">//得到单元格+</span></span><br><span class="line">            HSSFCell cell = rowHead.createCell(i);</span><br><span class="line">            <span class="comment">//给每个单元格设置值</span></span><br><span class="line">            cell.setCellValue(headName[i]);</span><br><span class="line">            <span class="comment">//要想让列能够盛的下20个字符的话，就需要用255*20</span></span><br><span class="line">            sheet.setColumnWidth(i, <span class="number">255</span> * <span class="number">15</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置行高,30像素</span></span><br><span class="line">        rowHead.setHeightInPoints(<span class="number">30</span>);</span><br><span class="line">        <span class="keyword">int</span> rowNum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cellNum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (T stu : list) &#123;</span><br><span class="line">            rowNum++;</span><br><span class="line">            HSSFRow row = sheet.createRow(rowNum);</span><br><span class="line">            Class name = Class.forName(stu.getClass().getName());</span><br><span class="line">            <span class="keyword">for</span> (String str : FieldName) &#123;</span><br><span class="line">                HSSFCell cell = row.createCell(cellNum);</span><br><span class="line">                <span class="comment">//得到对象的get方法</span></span><br><span class="line">                String filed = <span class="string">&quot;get&quot;</span> + str.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + str.substring(<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//获取方法的信息</span></span><br><span class="line">                Method md = name.getMethod(filed);</span><br><span class="line">                <span class="comment">//激活方法</span></span><br><span class="line">                Object invoke = md.invoke(stu);</span><br><span class="line">                <span class="keyword">if</span> (invoke != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    cell.setCellValue(invoke.toString());</span><br><span class="line">                &#125;</span><br><span class="line">                cellNum++;</span><br><span class="line">            &#125;</span><br><span class="line">            cellNum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        FileOutputStream fos = new FileOutputStream(path);</span></span><br><span class="line"><span class="comment">//        workbook.write(fos);</span></span><br><span class="line"><span class="comment">//        fos.close();</span></span><br><span class="line"><span class="comment">//        workbook.close();</span></span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        workbook.write(bos);</span><br><span class="line">        <span class="keyword">return</span> bos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteArrayOutputStream <span class="title">getCsv</span><span class="params">(ArrayList&lt;MgUser&gt; mgUsers,String[] rowsName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CSVFormat csvFormat = CSVFormat.DEFAULT.withHeader(rowsName);</span><br><span class="line">        File tempFile = File.createTempFile(<span class="string">&quot;vehicle&quot;</span>, <span class="string">&quot;.csv&quot;</span>);</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(tempFile);</span><br><span class="line">        CSVPrinter csvPrinter = <span class="keyword">new</span> CSVPrinter(<span class="keyword">new</span> OutputStreamWriter(fileOutputStream), csvFormat);</span><br><span class="line">        <span class="keyword">for</span> (MgUser mgUser : mgUsers) &#123;</span><br><span class="line">            csvPrinter.printRecord(mgUser.getId(),mgUser.getUsername(),mgUser.getPassword(),mgUser.getGender(),mgUser.getNichen(),mgUser.getBirthday());</span><br><span class="line">        &#125;</span><br><span class="line">        csvPrinter.flush();</span><br><span class="line">        csvPrinter.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(tempFile);</span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">while</span> ((n = fis.read(b)) != -<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            bos.write(b, <span class="number">0</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bos;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    /**</span></span><br><span class="line"><span class="comment">//     * 以压缩包的方式下载excel</span></span><br><span class="line"><span class="comment">//     * @param response</span></span><br><span class="line"><span class="comment">//     * @param workbookMap</span></span><br><span class="line"><span class="comment">//     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">downloadExcelForZip</span><span class="params">(Map&lt;String, OutputStream&gt; map, String zipName, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 文件名外的双引号处理firefox的空格截断问题</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/*&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + <span class="keyword">new</span> String(zipName.getBytes(<span class="string">&quot;gb2312&quot;</span>), <span class="string">&quot;ISO8859-1&quot;</span>));</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            ServletOutputStream os = response.getOutputStream();</span><br><span class="line">            <span class="comment">//OutputStream os = new FileOutputStream(&quot;C:\\Users\\admin\\Desktop\\1\\&quot;+zipName);</span></span><br><span class="line">            ZipOutputStream out = <span class="keyword">new</span> ZipOutputStream(os);</span><br><span class="line">            <span class="keyword">for</span> (String fileName : map.keySet()) &#123;</span><br><span class="line">                ByteArrayOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;xlsx&quot;</span>.equals(fileName))&#123;</span><br><span class="line">                    bos = (ByteArrayOutputStream) map.get(<span class="string">&quot;xlsx&quot;</span>);</span><br><span class="line">                    ZipEntry entry = <span class="keyword">new</span> ZipEntry(UUID.randomUUID().toString() + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line">                    out.putNextEntry(entry);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;csv&quot;</span>.equals(fileName))&#123;</span><br><span class="line">                    bos = (ByteArrayOutputStream) map.get(<span class="string">&quot;csv&quot;</span>);</span><br><span class="line">                    ZipEntry entry = <span class="keyword">new</span> ZipEntry(UUID.randomUUID().toString() + <span class="string">&quot;.csv&quot;</span>);</span><br><span class="line">                    out.putNextEntry(entry);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//这里讲一下，workBook.write会指定关闭数据流，如果这里直接用workbook.write(out)，下次就会抛出out已被关闭的异常，所有用ByteArrayOutputStream来拷贝一下。</span></span><br><span class="line">                bos.writeTo(out);</span><br><span class="line">                <span class="comment">// 关闭输入流</span></span><br><span class="line">                out.closeEntry();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">                out.flush();</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(HttpServletResponse response,ByteArrayOutputStream baos,String filename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        response.reset();</span><br><span class="line">        response.setContentType(response.getContentType());</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>,</span><br><span class="line">                <span class="string">&quot;attachment; filename=&quot;</span>+<span class="keyword">new</span> String(filename.getBytes()));</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = baos.toByteArray();</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Length&quot;</span>, String.valueOf(bytes.length));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">        bos = <span class="keyword">new</span> BufferedOutputStream(response.getOutputStream());</span><br><span class="line">        bos.write(bytes);</span><br><span class="line">        bos.close();</span><br><span class="line">        baos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-仓库地址"><a href="#2-仓库地址" class="headerlink" title="2.仓库地址"></a>2.仓库地址</h2><p><a href="https://gitee.com/cardioid/zip.git">https://gitee.com/cardioid/zip.git</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-代码&quot;&gt;&lt;a href=&quot;#1-代码&quot; class=&quot;headerlink&quot; title=&quot;1.代码&quot;&gt;&lt;/a&gt;1.代码&lt;/h2&gt;&lt;p&gt;将数据写入到CSV文件、EXCEL文件并压缩成ZIP包进行下载&lt;/p&gt;
&lt;figure class=&quot;highlight j</summary>
      
    
    
    
    
    <category term="IO流" scheme="http://example.com/tags/IO%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>lua入门</title>
    <link href="http://example.com/2020/04/06/Lua%E8%84%9A%E6%9C%AC/"/>
    <id>http://example.com/2020/04/06/Lua%E8%84%9A%E6%9C%AC/</id>
    <published>2020-04-06T09:40:03.000Z</published>
    <updated>2020-12-14T12:21:22.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lua介绍"><a href="#Lua介绍" class="headerlink" title="Lua介绍"></a>Lua介绍</h2><h3 id="1-lua是什么"><a href="#1-lua是什么" class="headerlink" title="1 lua是什么"></a>1 lua是什么</h3><p>​    Lua 是一个小巧的<a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80">脚本语言</a>。它是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个由Roberto Ierusalimschy、Waldemar Celes 和 Luiz Henrique de Figueiredo三人所组成的研究小组于1993年开发的。 其设计目的是为了通过灵活嵌入应用程序中从而为应用程序提供灵活的扩展和定制功能。Lua由标准C编写而成，几乎在所有操作系统和平台上都可以编译，运行。Lua并没有提供强大的库，这是由它的定位决定的。所以Lua不适合作为开发独立应用程序的语言。Lua 有一个同时进行的JIT项目，提供在特定平台上的即时编译功能。</p><p>简单来说：</p><p>​    Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p><p><strong>lua 语言具有以下特性</strong></p><ul><li>支持面向过程(procedure-oriented)编程和函数式编程(functional programming)；</li><li>自动内存管理；只提供了一种通用类型的表（table），用它可以实现数组，哈希表，集合，对象；</li><li>语言内置模式匹配；闭包(closure)；函数也可以看做一个值；提供多线程（协同进程，并非操作系统所支持的线程）支持；</li><li>通过闭包和table可以很方便地支持面向对象编程所需要的一些关键机制，比如数据抽象，虚函数，继承和重载等。</li></ul><p><strong>应用场景</strong></p><ul><li>游戏开发</li><li>独立应用脚本</li><li>Web 应用脚本</li><li>扩展和数据库插件如：MySQL Proxy 和 MySQL WorkBench</li><li>安全系统，如入侵检测系统</li><li>redis中嵌套调用实现类似事务的功能</li><li>web容器中应用处理一些过滤 缓存等等的逻辑，例如nginx。 </li></ul><h3 id="2-lua的安装"><a href="#2-lua的安装" class="headerlink" title="2 lua的安装"></a>2 lua的安装</h3><p>有linux版本的安装也有mac版本的安装。。我们采用linux版本的安装，首先我们准备一个linux虚拟机。</p><p>安装步骤,在linux系统中执行下面的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc</span><br><span class="line"></span><br><span class="line">yum install libtermcap-devel ncurses-devel libevent-devel readline-devel</span><br><span class="line"></span><br><span class="line">curl -R -O http://www.lua.org/ftp/lua-5.3.5.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxf lua-5.3.5.tar.gz</span><br><span class="line"></span><br><span class="line">cd lua-5.3.5</span><br><span class="line"></span><br><span class="line">make linux test</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="3-快速入门"><a href="#3-快速入门" class="headerlink" title="3 快速入门"></a>3 快速入门</h3><p>创建hello.lua文件，内容为</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>保存。执行命令</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lua helloworld.lua</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br></pre></td></tr></table></figure><h3 id="4-LUA的基本语法"><a href="#4-LUA的基本语法" class="headerlink" title="4 LUA的基本语法"></a>4 LUA的基本语法</h3><ul><li>lua有交互式编程和脚本式编程。</li></ul><ul><li>交互式编程就是直接输入语法，就能执行。</li></ul><ul><li>脚本式编程需要编写脚本文件，然后再执行。</li></ul><p>一般采用脚本式编程。（例如：编写一个hello.lua的文件，输入文件内容，并执行lua hell.lua即可）</p><h4 id="4-1-注释"><a href="#4-1-注释" class="headerlink" title="4.1 注释"></a>4.1 注释</h4><p>单行注释：两个减号是单行注释:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--</span></span><br></pre></td></tr></table></figure><p>多行注释：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment"> 多行注释</span></span><br><span class="line"><span class="comment"> 多行注释</span></span><br><span class="line"><span class="comment"> --]]</span></span><br></pre></td></tr></table></figure><h4 id="4-2-关键字"><a href="#4-2-关键字" class="headerlink" title="4.2 关键字"></a>4.2 关键字</h4><p>关键字就好比java中的 break if else等等一样的效果。lua的关键字如下：</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>and</td><td>break</td><td>do</td><td>else</td></tr><tr><td>elseif</td><td>end</td><td>false</td><td>for</td></tr><tr><td>function</td><td>if</td><td>in</td><td>local</td></tr><tr><td>nil</td><td>not</td><td>or</td><td>repeat</td></tr><tr><td>return</td><td>then</td><td>true</td><td>until</td></tr><tr><td>while</td><td></td><td></td><td></td></tr></tbody></table><h4 id="4-3-定义变量"><a href="#4-3-定义变量" class="headerlink" title="4.3 定义变量"></a>4.3 定义变量</h4><p>全局变量，默认的情况下，定义一个变量都是全局变量，</p><p>如果要用局部变量 需要声明为local.例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 全局变量赋值</span></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line"><span class="comment">-- 局部变量赋值</span></span><br><span class="line"><span class="keyword">local</span> b=<span class="number">2</span> </span><br></pre></td></tr></table></figure><p>如果变量没有初始化：则 它的值为nil 这和java中的null不同。</p><h4 id="4-4-Lua中的数据类型"><a href="#4-4-Lua中的数据类型" class="headerlink" title="4.4 Lua中的数据类型"></a>4.4 Lua中的数据类型</h4><p>Lua 是动态类型语言，变量不要类型定义,只需要为变量赋值。 值可以存储在变量中，作为参数传递或结果返回。</p><p>Lua 中有 8 个基本类型分别为：nil、boolean、number、string、userdata、function、thread 和 table。</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>nil</td><td>这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）。</td></tr><tr><td>boolean</td><td>包含两个值：false和true。</td></tr><tr><td>number</td><td>表示双精度类型的实浮点数</td></tr><tr><td>string</td><td>字符串由一对双引号或单引号来表示</td></tr><tr><td>function</td><td>由 C 或 Lua 编写的函数</td></tr><tr><td>userdata</td><td>表示任意存储在变量中的C数据结构</td></tr><tr><td>thread</td><td>表示执行的独立线路，用于执行协同程序</td></tr><tr><td>table</td><td>Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以是数字、字符串或表类型。在 Lua 里，table 的创建是通过”构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。</td></tr></tbody></table><h4 id="4-5-流程控制"><a href="#4-5-流程控制" class="headerlink" title="4.5 流程控制"></a>4.5 流程控制</h4><p>如下：类似于if else </p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[ 0 为 true ]</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;0 为 true&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;0 不为true&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="4-6-函数"><a href="#4-6-函数" class="headerlink" title="4.6 函数"></a>4.6 函数</h4><p>lua中也可以定义函数，类似于java中的方法。例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[ 函数返回两个值的最大值 --]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span><span class="params">(num1, num2)</span></span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (num1 &gt; num2) <span class="keyword">then</span></span><br><span class="line">      result = num1;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      result = num2;</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> result; </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 调用函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;两值比较最大值为 &quot;</span>,<span class="built_in">max</span>(<span class="number">10</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;两值比较最大值为 &quot;</span>,<span class="built_in">max</span>(<span class="number">5</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure><p>执行之后的结果：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">两值比较最大值为     <span class="number">10</span></span><br><span class="line">两值比较最大值为     <span class="number">6</span></span><br></pre></td></tr></table></figure><h4 id="4-7-require-函数"><a href="#4-7-require-函数" class="headerlink" title="4.7 require 函数"></a>4.7 require 函数</h4><p>require 用于 引入其他的模块，类似于java中的类要引用别的类的效果。</p><p>用法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span> <span class="string">&quot;&lt;模块名&gt;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Lua介绍&quot;&gt;&lt;a href=&quot;#Lua介绍&quot; class=&quot;headerlink&quot; title=&quot;Lua介绍&quot;&gt;&lt;/a&gt;Lua介绍&lt;/h2&gt;&lt;h3 id=&quot;1-lua是什么&quot;&gt;&lt;a href=&quot;#1-lua是什么&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="lua" scheme="http://example.com/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>fastjson</title>
    <link href="http://example.com/2020/04/06/fastjson/"/>
    <id>http://example.com/2020/04/06/fastjson/</id>
    <published>2020-04-06T09:40:03.000Z</published>
    <updated>2020-12-14T12:20:22.737Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象转Json</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">ClassToJson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">user.setName(<span class="string">&quot;王二麻子&quot;</span>);</span><br><span class="line">String json = JSON.toJSONString(user);</span><br><span class="line"><span class="keyword">return</span> json;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Json转对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">JsonToClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String classJson = ClassToJson();</span><br><span class="line">User user = JSON.parseObject(classJson,User.class);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//List转Json</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">ListToJson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;王一麻子&quot;</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;王二麻子&quot;</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;王三麻子&quot;</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">&quot;4&quot;</span>,<span class="string">&quot;王四麻子&quot;</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">&quot;5&quot;</span>,<span class="string">&quot;王五麻子&quot;</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">&quot;6&quot;</span>,<span class="string">&quot;王六麻子&quot;</span>));</span><br><span class="line">String json = JSON.toJSONString(userList);</span><br><span class="line"><span class="keyword">return</span> json;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Json转List</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;User&gt; <span class="title">JsonToList</span><span class="params">()</span></span>&#123;</span><br><span class="line">String listJson = ListToJson();</span><br><span class="line">List&lt;User&gt; userList = JSON.parseArray(listJson,User.class);</span><br><span class="line"><span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//parse这个方法比较通用,但是无法精确泛型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">JsonToList2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String listJson = ListToJson();</span><br><span class="line">List userList = (List)JSON.parse(listJson);</span><br><span class="line"><span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Map转Json</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">MapToJson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String,User&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;大哥&quot;</span>, <span class="keyword">new</span> User(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;李狗蛋子&quot;</span>));</span><br><span class="line">map.put(<span class="string">&quot;二哥&quot;</span>, <span class="keyword">new</span> User(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;李猫蛋子&quot;</span>));</span><br><span class="line">map.put(<span class="string">&quot;三哥&quot;</span>, <span class="keyword">new</span> User(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;李竹鼠蛋子&quot;</span>));</span><br><span class="line">String json = JSON.toJSONString(map);</span><br><span class="line"><span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Json转Map</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">JsonToMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String mapJson = MapToJson();</span><br><span class="line">Map map = (Map)JSON.parseObject(mapJson,Map.class);</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通用的方法,但是无法确定泛型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">JsonToMap2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String mapJson = MapToJson();</span><br><span class="line"><span class="comment">//这2中写法都非常通用</span></span><br><span class="line"><span class="comment">//Map map = (Map)JSON.parse(mapJson);</span></span><br><span class="line">Map map = JSON.parseObject(mapJson);</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(ClassToJson());<span class="comment">//对象转Json</span></span><br><span class="line">System.out.println(JsonToClass());<span class="comment">//Json转对象</span></span><br><span class="line">System.out.println(ListToJson());<span class="comment">//List转Json</span></span><br><span class="line">JsonToList().forEach(x-&gt;System.out.println(x));<span class="comment">//Json转List集合</span></span><br><span class="line">System.out.println(MapToJson());<span class="comment">//Map转Json</span></span><br><span class="line">JsonToMap().forEach((x,y) -&gt; &#123;System.out.println(x+<span class="string">&quot;:&quot;</span>+y);&#125;);<span class="comment">//Json转Map</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String name</span><br><span class="line"><span class="comment">//set get tostring..</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
    <category term="fastjson" scheme="http://example.com/tags/fastjson/"/>
    
  </entry>
  
  <entry>
    <title>公共异常处理</title>
    <link href="http://example.com/2020/04/06/%E5%85%AC%E5%85%B1%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2020/04/06/%E5%85%AC%E5%85%B1%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2020-04-06T09:40:03.000Z</published>
    <updated>2020-12-14T12:21:54.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="公共异常处理"><a href="#公共异常处理" class="headerlink" title="公共异常处理"></a>公共异常处理</h2><p>为了使我们的代码更容易维护，我们创建一个类集中处理异常</p><p>在handler包下创建公共异常处理类BaseExceptionHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一异常处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span> <span class="comment">//声明该类是一个增强类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">error</span><span class="params">( Exception e)</span> </span>&#123;</span><br><span class="line">        e.printStackTrace();        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, StatusCode.ERROR, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;公共异常处理&quot;&gt;&lt;a href=&quot;#公共异常处理&quot; class=&quot;headerlink&quot; title=&quot;公共异常处理&quot;&gt;&lt;/a&gt;公共异常处理&lt;/h2&gt;&lt;p&gt;为了使我们的代码更容易维护，我们创建一个类集中处理异常&lt;/p&gt;
&lt;p&gt;在handler包下创建公共异常处理类</summary>
      
    
    
    
    
    <category term="项目" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>分布式ID生成解决方案</title>
    <link href="http://example.com/2020/03/04/%E5%88%86%E5%B8%83%E5%BC%8Fid/%E5%88%86%E5%B8%83%E5%BC%8Fid/"/>
    <id>http://example.com/2020/03/04/%E5%88%86%E5%B8%83%E5%BC%8Fid/%E5%88%86%E5%B8%83%E5%BC%8Fid/</id>
    <published>2020-03-04T02:49:37.000Z</published>
    <updated>2020-12-14T12:17:11.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式ID生成解决方案"><a href="#分布式ID生成解决方案" class="headerlink" title="分布式ID生成解决方案"></a>分布式ID生成解决方案</h2><h3 id="1-分布式ID生成解决方案"><a href="#1-分布式ID生成解决方案" class="headerlink" title="1 分布式ID生成解决方案"></a>1 分布式ID生成解决方案</h3><h4 id="1-1-UUID"><a href="#1-1-UUID" class="headerlink" title="1.1 UUID"></a>1.1 UUID</h4><p>常见的方式。可以利用数据库也可以利用程序生成，一般来说保证id全局唯一。</p><p>优点：</p><p>1）简单，代码方便。</p><p>2）生成ID性能非常好，基本不会有性能问题。</p><p>3）全局唯一，在遇见数据迁移，系统数据合并，或者数据库变更等情况下，可以从容应对。</p><p> 缺点：</p><p>1）<strong>没有排序</strong>，无法保证趋势递增。</p><p>2）UUID往往是使用<strong>字符串存储</strong>，<strong>查询的效率</strong>比较低。</p><p>3）<strong>存储空间比较大</strong>，如果是海量数据库，就需要考虑存储量的问题。</p><p>4）<strong>传输数据量</strong>大</p><p>5）<strong>不可读</strong>。</p><h4 id="1-2-Redis"><a href="#1-2-Redis" class="headerlink" title="1.2 Redis"></a>1.2 Redis</h4><p>当使用数据库来生成ID性能不够要求的时候，我们可以尝试使用Redis来生成ID。这主要依赖于Redis是单线程的，所以也可以用生成全局唯一的ID。可以用Redis的原子操作 INCR和INCRBY来实现。</p><p>优点：</p><p>1）不依赖于数据库，灵活方便，且性能优于数据库。</p><p>2）数字ID天然排序，对分页或者需要排序的结果很有帮助。</p><p>缺点：</p><p>1）如果系统中没有Redis，还需要<strong>引入新的组件</strong>，增加系统复杂度。</p><p>2）需要编码和配置的工作量比较大。</p><p>3）<strong>网络传输</strong>造成性能下降。</p><h4 id="1-3-开源算法snowflake"><a href="#1-3-开源算法snowflake" class="headerlink" title="1.3 开源算法snowflake"></a>1.3 开源算法snowflake</h4><p> snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：</p><p>使用：</p><p>41bit作为毫秒数，</p><p>10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），</p><p>12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），</p><p>最后还有一个符号位，永远是0</p><p><img src="/2020/03/04/%E5%88%86%E5%B8%83%E5%BC%8Fid/%E5%88%86%E5%B8%83%E5%BC%8Fid/4-2.png"></p><h3 id="2-snowflake快速入门"><a href="#2-snowflake快速入门" class="headerlink" title="2 snowflake快速入门"></a>2 snowflake快速入门</h3><h4 id="2-1-快速入门"><a href="#2-1-快速入门" class="headerlink" title="2.1 快速入门"></a>2.1 快速入门</h4><p>（1）新建工程，将资料/工具类下的IdWorker.java拷贝到工程中。</p><p>（2）编写代码</p><p>5个bit是数据中心，5个bit的机器ID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IdWorker idWorker=<span class="keyword">new</span> IdWorker(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">long</span> id = idWorker.nextId();</span><br><span class="line">    System.out.println(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-配置分布式ID生成器"><a href="#2-2-配置分布式ID生成器" class="headerlink" title="2.2 配置分布式ID生成器"></a>2.2 配置分布式ID生成器</h4><p>（1）IdWorker.java拷贝到yigou_common工程com.yigou.util包中</p><p>（2）yigou_service_goods的application.yml添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">workerId:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">datacenterId:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>（3）修改GoodsApplication，增加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;workerId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer workerId;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;datacenterId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer datacenterId;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IdWorker <span class="title">idWorker</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IdWorker(workerId,datacenterId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;分布式ID生成解决方案&quot;&gt;&lt;a href=&quot;#分布式ID生成解决方案&quot; class=&quot;headerlink&quot; title=&quot;分布式ID生成解决方案&quot;&gt;&lt;/a&gt;分布式ID生成解决方案&lt;/h2&gt;&lt;h3 id=&quot;1-分布式ID生成解决方案&quot;&gt;&lt;a href=&quot;#1-分布</summary>
      
    
    
    
    
    <category term="分布式ID" scheme="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8FID/"/>
    
  </entry>
  
  <entry>
    <title>对文件AES加密</title>
    <link href="http://example.com/2020/01/23/%E5%AF%B9%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86/"/>
    <id>http://example.com/2020/01/23/%E5%AF%B9%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86/</id>
    <published>2020-01-23T01:49:38.000Z</published>
    <updated>2021-01-23T12:09:10.208Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AESUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Key key1 = getKey(<span class="string">&quot;admin&quot;</span>);<span class="comment">//加密key</span></span><br><span class="line">        Key key2 = getKey(<span class="string">&quot;admin&quot;</span>);<span class="comment">//加密key</span></span><br><span class="line">        String sZipPath = <span class="string">&quot;C:\\Users\\admin\\Desktop\\test\\aa.doc&quot;</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\admin\\Desktop\\test\\aa.doc&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes1 = changeFileToByte(sZipPath);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes2 = fileConvertToByteArray(file);</span><br><span class="line">        <span class="keyword">byte</span>[] decBytes1 = getEncCode(bytes2,key1);</span><br><span class="line">        <span class="keyword">byte</span>[] decBytes2 = getDecCode(decBytes1,key2);</span><br><span class="line"></span><br><span class="line">        createFile(bytes2, <span class="string">&quot;C:\\Users\\admin\\Desktop\\test\\&quot;</span>, <span class="string">&quot;原文件.doc&quot;</span>);</span><br><span class="line">        createFile(decBytes1, <span class="string">&quot;C:\\Users\\admin\\Desktop\\test\\&quot;</span>, <span class="string">&quot;加密文件.doc&quot;</span>);</span><br><span class="line">        createFile(decBytes2, <span class="string">&quot;C:\\Users\\admin\\Desktop\\test\\&quot;</span>, <span class="string">&quot;解密文件.doc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;文件转换成byte数组&gt;</span></span><br><span class="line"><span class="comment">     * &lt;功能详细描述&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] changeFileToByte(String sPath) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(sPath);</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1000</span>];</span><br><span class="line">            <span class="keyword">int</span> n;</span><br><span class="line">            <span class="comment">//每次从fis读1000个长度到b中，fis中读完就会返回-1</span></span><br><span class="line">            <span class="keyword">while</span> ((n = fis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(b, <span class="number">0</span>, n);</span><br><span class="line">            &#125;</span><br><span class="line">            fis.close();</span><br><span class="line">            bos.close();</span><br><span class="line">            buffer = bos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buffer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createFile</span><span class="params">(<span class="keyword">byte</span>[] bfile, String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        File file = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File dir = <span class="keyword">new</span> File(filePath);</span><br><span class="line">            <span class="keyword">if</span> (!dir.exists() &amp;&amp; dir.isDirectory()) &#123;<span class="comment">//判断文件目录是否存在</span></span><br><span class="line">                dir.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            file = <span class="keyword">new</span> File(filePath + <span class="string">&quot;\\&quot;</span> + fileName);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">            bos.write(bfile);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把一个文件转化为byte字节数组。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] fileConvertToByteArray(File file) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            data = baos.toByteArray();</span><br><span class="line">            fis.close();</span><br><span class="line">            baos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Key <span class="title">getKey</span><span class="params">(String strKey)</span> </span>&#123;</span><br><span class="line">        Key key = <span class="keyword">null</span>;</span><br><span class="line">        Security.addProvider(<span class="keyword">new</span> com.sun.crypto.provider.SunJCE());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//这个是密匙生成器，多种算法通用的。</span></span><br><span class="line">            KeyGenerator keyGen = KeyGenerator.getInstance(<span class="string">&quot;AES&quot;</span>);</span><br><span class="line">            <span class="comment">// 使用用户输入的key，按照长度128初始化密匙生成器</span></span><br><span class="line">            keyGen.init(<span class="number">128</span>, <span class="keyword">new</span> SecureRandom(strKey.getBytes()));</span><br><span class="line">            key = keyGen.generateKey();</span><br><span class="line">            keyGen = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] getEncCode(<span class="keyword">byte</span>[] str,Key key) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] enc = <span class="keyword">null</span>;</span><br><span class="line">        Cipher c;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                c = Cipher.getInstance(<span class="string">&quot;AES&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    c.init(Cipher.ENCRYPT_MODE, key);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 加密，保存到enc</span></span><br><span class="line">                        enc = c.doFinal(str);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            c = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> enc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] getDecCode(<span class="keyword">byte</span>[] enc,Key key) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] dec = <span class="keyword">null</span>;</span><br><span class="line">        Cipher c;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = Cipher.getInstance(<span class="string">&quot;AES&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                c.init(Cipher.DECRYPT_MODE, key);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 解密,保存到dec</span></span><br><span class="line">                    dec = c.doFinal(enc);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            c = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dec;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
    <category term="AES加密Bytes流" scheme="http://example.com/tags/AES%E5%8A%A0%E5%AF%86Bytes%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>onlyoffice</title>
    <link href="http://example.com/2020/01/23/onlyoffice/"/>
    <id>http://example.com/2020/01/23/onlyoffice/</id>
    <published>2020-01-22T18:49:13.000Z</published>
    <updated>2021-01-23T09:36:45.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="onlyoffice-服务端的安装"><a href="#onlyoffice-服务端的安装" class="headerlink" title="onlyoffice 服务端的安装"></a>onlyoffice 服务端的安装</h1><ol><li>拉取镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull onlyoffice/documentserver</span><br></pre></td></tr></table></figure><p>​    </p><p>  2.创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t -d -p 8085:80 --restart=always \</span><br><span class="line">    -v /app/onlyoffice/DocumentServer/logs:/var/log/onlyoffice  \</span><br><span class="line">    -v /app/onlyoffice/DocumentServer/data:/var/www/onlyoffice/Data  \</span><br><span class="line">    -v /app/onlyoffice/DocumentServer/lib:/var/lib/onlyoffice \</span><br><span class="line">    -v /app/onlyoffice/DocumentServer/db:/var/lib/postgresql  onlyoffice/documentserver</span><br></pre></td></tr></table></figure><p>之前二步即可 </p><p>创建实例检查是否可用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec 55aa23804ae8 sudo supervisorctl start ds:example</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec 55aa23804ae8 sudo sed &#x27;s,autostart=false,autostart=true,&#x27; -i /etc/supervisor/conf.d/ds-example.conf</span><br></pre></td></tr></table></figure><p>onlyoffice 配置地址不可用localhost 或127.0.0.1 必须要用电脑本机地址</p><p>因为本地服务是调用另一个Server</p><p>进入容器<br>docker exec -i -t 55aa23804ae8 /bin/bash</p><h1 id="onlyoffice客户端"><a href="#onlyoffice客户端" class="headerlink" title="onlyoffice客户端"></a>onlyoffice客户端</h1><h2 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1.pom.xml"></a>1.pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- servlet 依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tomcat 的支持.--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-controller"><a href="#2-controller" class="headerlink" title="2.controller"></a>2.controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">aa</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/d&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">downExcel</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\tiger\\aaa1.doc&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果文件存在，则进行下载</span></span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            <span class="comment">// 配置文件下载</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">            <span class="comment">// 下载文件能正常显示中文</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(<span class="string">&quot;aaa1.doc&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="comment">// 实现文件下载</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">            BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">                bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">                OutputStream os = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> i = bis.read(buffer);</span><br><span class="line">                <span class="keyword">while</span> (i != -<span class="number">1</span>) &#123;</span><br><span class="line">                    os.write(buffer, <span class="number">0</span>, i);</span><br><span class="line">                    i = bis.read(buffer);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;Download  successfully!&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;successfully&quot;</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Download  failed!&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;failed&quot;</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bis.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        fis.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存修改后的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/docx/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveWord</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PrintWriter writer = response.getWriter();</span><br><span class="line">            String body = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Scanner scanner = <span class="keyword">new</span> Scanner(request.getInputStream());</span><br><span class="line">                scanner.useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                body = scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                scanner.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                writer.write(<span class="string">&quot;get request.getInputStream error:&quot;</span> + ex.getMessage());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (body.isEmpty()) &#123;</span><br><span class="line">                writer.write(<span class="string">&quot;empty request.getInputStream&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            JSONObject jsonObj = JSON.parseObject(body);</span><br><span class="line">            <span class="keyword">int</span> status = (Integer) jsonObj.get(<span class="string">&quot;status&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> saved = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (status == <span class="number">2</span> || status == <span class="number">3</span>)<span class="comment">//MustSave, Corrupted</span></span><br><span class="line">            &#123;</span><br><span class="line">                String downloadUri = (String) jsonObj.get(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    URL url = <span class="keyword">new</span> URL(downloadUri);</span><br><span class="line">                    java.net.HttpURLConnection connection = (java.net.HttpURLConnection) url.openConnection();</span><br><span class="line">                    InputStream stream = connection.getInputStream();</span><br><span class="line">                    <span class="keyword">if</span> (stream == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Stream is null&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 从请求中获取要覆盖的文件参数定义&quot;path&quot;</span></span><br><span class="line">                    String path = request.getParameter(<span class="string">&quot;path&quot;</span>);</span><br><span class="line">                    System.err.println(<span class="string">&quot;====路径:&quot;</span>+path);</span><br><span class="line">                    File savedFile = <span class="keyword">new</span> File(path);</span><br><span class="line">                    <span class="keyword">try</span> (FileOutputStream out = <span class="keyword">new</span> FileOutputStream(savedFile)) &#123;</span><br><span class="line">                        <span class="keyword">int</span> read;</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                        <span class="keyword">while</span> ((read = stream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                            out.write(bytes, <span class="number">0</span>, read);</span><br><span class="line">                        &#125;</span><br><span class="line">                        out.flush();</span><br><span class="line">                    &#125;</span><br><span class="line">                    connection.disconnect();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    saved = <span class="number">1</span>;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;编辑完成--------------11111&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;&#123;\&quot;error\&quot;:&quot;</span> + saved + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-main"><a href="#3-main" class="headerlink" title="3.main"></a>3.main</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-resource-gt-templates"><a href="#4-resource-gt-templates" class="headerlink" title="4.resource-&gt;templates"></a>4.resource-&gt;templates</h2><ul><li>index.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dubbo2.5.4案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;form action=&quot;#&quot; th:action=&quot;@&#123;/initOrder&#125;&quot; method=&quot;get&quot;&gt;</span></span><br><span class="line"><span class="comment">    输入编号：&lt;input type=&quot;text&quot; name=&quot;uid&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;input type=&quot;submit&quot; value=&quot;查询&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;/form&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;fileEdit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://172.16.1.125:8081/web-apps/apps/api/documents/api.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 调用js创建预览对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> DocsAPI.DocEditor(<span class="string">&quot;fileEdit&quot;</span>, <span class="comment">// 元素id</span></span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">            <span class="string">&quot;document&quot;</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;permissions&quot;</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;edit&quot;</span>: <span class="literal">true</span>,</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="string">&quot;fileType&quot;</span>: <span class="string">&quot;docx&quot;</span>, <span class="comment">// 展示文件的类型</span></span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;title&quot;</span>: <span class="string">&quot;页面展示的文件名称&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;url&quot;</span>:<span class="string">&quot;http://10.10.10.22:8080/d&quot;</span> <span class="comment">//读取文件进行展示</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="string">&quot;documentType&quot;</span>: <span class="string">&quot;text&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">&quot;editorConfig&quot;</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;lang&quot;</span> : <span class="string">&quot;zh-CN&quot;</span>,</span></span><br><span class="line"><span class="javascript"><span class="comment">// 回调接口，用于编辑后实现保存的功能,(关闭页面5秒左右会触发)</span></span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;callbackUrl&quot;</span>: <span class="string">&quot;http://10.10.10.22:8080/docx/save?path=D:/tiger/aaa1.doc&quot;</span> <span class="comment">//保存文件的接口?path=告诉保存接口需要覆盖的文件</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="string">&quot;height&quot;</span>: <span class="string">&quot;1300px&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">&quot;width&quot;</span>: <span class="string">&quot;100%&quot;</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-jsp修改"><a href="#5-jsp修改" class="headerlink" title="5.jsp修改"></a>5.jsp修改</h2><h3 id="1-pom文件jsp的依赖"><a href="#1-pom文件jsp的依赖" class="headerlink" title="1.pom文件jsp的依赖"></a>1.pom文件jsp的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash; servlet 依赖 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;jstl&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash; tomcat 的支持.&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;scope&gt;test&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;exclusions&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;exclusion&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;/exclusion&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;/exclusions&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入springBoot 内嵌的Tomcat对JSP的解析包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jsp--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jstl--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>target/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">excludeArtifactIds</span>&gt;</span></span><br><span class="line">                                junit</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">excludeArtifactIds</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">overWriteSnapshots</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overWriteSnapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-webapp-WEB-INF-index-jsp"><a href="#2-webapp-WEB-INF-index-jsp" class="headerlink" title="2.webapp\WEB-INF\index.jsp"></a>2.webapp\WEB-INF\index.jsp</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span><span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;GOD&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--&lt;form action=<span class="string">&quot;#&quot;</span> th:action=<span class="string">&quot;@&#123;/initOrder&#125;&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    输入编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;uid&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;查询&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;fileEdit&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://172.16.1.125:8081/web-apps/apps/api/documents/api.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 调用js创建预览对象</span></span><br><span class="line">    <span class="keyword">new</span> DocsAPI.DocEditor(<span class="string">&quot;fileEdit&quot;</span>, <span class="comment">// 元素id</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;document&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;permissions&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;edit&quot;</span>: <span class="keyword">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;fileType&quot;</span>: <span class="string">&quot;docx&quot;</span>, <span class="comment">// 展示文件的类型</span></span><br><span class="line">                <span class="string">&quot;title&quot;</span>: <span class="string">&quot;页面展示的文件名称&quot;</span>,</span><br><span class="line">                <span class="string">&quot;url&quot;</span>:<span class="string">&quot;http://172.16.1.1:8080/d&quot;</span> <span class="comment">//读取文件进行展示</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;documentType&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">            <span class="string">&quot;editorConfig&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;lang&quot;</span> : <span class="string">&quot;zh-CN&quot;</span>,</span><br><span class="line"><span class="comment">// 回调接口，用于编辑后实现保存的功能,(关闭页面5秒左右会触发)</span></span><br><span class="line">                <span class="string">&quot;callbackUrl&quot;</span>: <span class="string">&quot;http://172.16.1.1:8080/docx/save?path=D:/tiger/aaa1.doc&quot;</span> <span class="comment">//保存文件的接口?path=告诉保存接口需要覆盖的文件</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;height&quot;</span>: <span class="string">&quot;1300px&quot;</span>,</span><br><span class="line">            <span class="string">&quot;width&quot;</span>: <span class="string">&quot;100%&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="3-乱码解决"><a href="#3-乱码解决" class="headerlink" title="3.乱码解决"></a>3.乱码解决</h3><p>把从url中读取的流拷一份出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">IOUtils.copy(is,bos);<span class="comment">//package org.apache.tomcat.util.http.fileupload;</span></span><br><span class="line">ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br></pre></td></tr></table></figure><p>这样stream.available()获取到的长度就是准确的，文档也就不会乱码损坏了</p><h2 id="6-代码地址"><a href="#6-代码地址" class="headerlink" title="6.代码地址"></a>6.代码地址</h2><p><a href="https://gitee.com/cardioid/onlyoffice.git">https://gitee.com/cardioid/onlyoffice.git</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;onlyoffice-服务端的安装&quot;&gt;&lt;a href=&quot;#onlyoffice-服务端的安装&quot; class=&quot;headerlink&quot; title=&quot;onlyoffice 服务端的安装&quot;&gt;&lt;/a&gt;onlyoffice 服务端的安装&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;拉取镜像</summary>
      
    
    
    
    
    <category term="onlyoffice" scheme="http://example.com/tags/onlyoffice/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之单例模式</title>
    <link href="http://example.com/2020/01/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2020/01/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-01-22T03:48:33.000Z</published>
    <updated>2020-12-14T11:54:03.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="1-单例模式的定义"><a href="#1-单例模式的定义" class="headerlink" title="1 单例模式的定义"></a>1 单例模式的定义</h3><ul><li><p>单例模式是指确保一个类在任何的情况下都绝对只有一个实例，并提供一个全局访问点</p><p>ServletContext ServletConfig AplicationContext DBPool</p></li><li><p>隐藏所有的构造方法</p></li><li><p>属于创建型模式</p></li></ul><p>优点：保证一个类只有一个实例，并提供一个访问它的全局访问点常用于重量级对象，这个类创建对象是耗时，耗内存和复杂的单例模式的好处 保证对象在内存中仅有一个，减少内存开销</p><h3 id="2-单例模式常见写法"><a href="#2-单例模式常见写法" class="headerlink" title="2.单例模式常见写法"></a>2.单例模式常见写法</h3><h4 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h4><ul><li>构造方法私有</li><li>返回一个实例</li><li>创建一个静态的实例</li></ul><p>在 单例类首次加载时候就创建实例</p><p>优点：线程安全的</p><p>饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以天生是线程安全的</p><p>缺点：浪费内存空间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式单例类.在类初始化时，已经自行实例化 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton1 single = <span class="keyword">new</span> Singleton1();</span><br><span class="line">    <span class="comment">//静态工厂方法 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式单例类.在类初始化时，已经自行实例化 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton1 single;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        single = <span class="keyword">new</span> Singleton1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态工厂方法 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="懒汉式单例"><a href="#懒汉式单例" class="headerlink" title="懒汉式单例"></a>懒汉式单例</h4><p>被外部类调用时才创建实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//懒汉式单例类.在第一次调用的时候实例化自己 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton single=<span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//静态工厂方法 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;  </span><br><span class="line">             single = <span class="keyword">new</span> Singleton();</span><br><span class="line">         &#125;  </span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒汉式单例的实现没有考虑线程安全问题，它是线程不安全的</p><p>测试一下</p><p>ExectorThread.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wang.yinggang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExectorThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() +<span class="string">&quot;---&quot;</span>+instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>singletonTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wang.yinggang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singletonTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Thread thread01 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ExectorThread());</span><br><span class="line">        Thread thread02 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ExectorThread());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        thread01.start();</span><br><span class="line">        thread02.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;线程启动完毕&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">线程启动完毕</span><br><span class="line">Thread-1---wang.yinggang.Singleton@75dd38ba</span><br><span class="line">Thread-2---wang.yinggang.Singleton@75dd38ba</span><br></pre></td></tr></table></figure><p>两个线程再抢cpu 可能同时抢到 可能一前一后</p><p>多运行几次，结果有可能不同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">线程启动完毕</span><br><span class="line">Thread-2---wang.yinggang.Singleton@51219e67</span><br><span class="line">Thread-1---wang.yinggang.Singleton@7b1ad871</span><br></pre></td></tr></table></figure><p>如何避免线程安全的问题</p><ul><li>线程安全解决办法1：</li></ul><p>方法上加同步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//适中的方案</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;  </span><br><span class="line">             single = <span class="keyword">new</span> Singleton();</span><br><span class="line">         &#125;  </span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>synchronized在1.8之后性能优化了不少 不可避免的还是存在一些性能的问题</p><p>方法被static修饰 导致 整个类可能被锁住</p><ul><li><p>线程安全解决办法2：</p><p>双重检查锁定</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//适中的方案</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">             single = <span class="keyword">new</span> Singleton();</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        cpu执行的时候会转换成jvm指令进行智行</span></span><br><span class="line"><span class="comment">                        指令冲排序问题 volatile</span></span><br><span class="line"><span class="comment">                        </span></span><br><span class="line"><span class="comment">                        1.分配内存给这个对象</span></span><br><span class="line"><span class="comment">                        2.初始化对象</span></span><br><span class="line"><span class="comment">                        3.将初始化的对象和内存的地址建立关联，进行赋值</span></span><br><span class="line"><span class="comment">                        4.用户初次访问</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                        </span><br><span class="line">                      </span><br><span class="line">                    &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">         &#125;  </span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>线程安全解决办法3：</p><p>静态内部类方式</p><p>懒汉式单例写法 性能是最优</p><p>实现了线程安全，又避免了同步带来的性能影响</p></li></ul><p>  单例模式的缺点</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>缺点1：可以会被发射攻击</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">return</span> LazyHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>反射解决办法：</p><p>抛一个异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(LazyHolder.INSTANCE != <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;不允许创建多个实例&quot;</span>)；</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">return</span> LazyHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>情况</p><p>序列化会通过反射调用无参数的构造方法创建一个新的对象。</p><p>序列化破坏单例模式的解决办法</p><ul><li>重写readResolve方法 覆盖反序列化出来的对象</li><li>创建了两次 发生在jvm层 相对来说比较安全的</li><li></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注册式单例"><a href="#注册式单例" class="headerlink" title="注册式单例"></a>注册式单例</h4><p>​        有两种：一种式枚举登记，一种是容器缓存</p><h5 id="枚举式单例"><a href="#枚举式单例" class="headerlink" title="枚举式单例"></a>枚举式单例</h5><p>​    从jdk层面就为枚举不被序列化和反射破坏来保驾护航</p><ul><li>立即加载</li><li>线程安全</li><li>实现简单</li><li>序列化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBConnection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        EnumSingleton.SingletonClass con1 = EnumSingleton.INSTANCE.getInstance();</span><br><span class="line">        EnumSingleton.SingletonClass con2 = EnumSingleton.INSTANCE.getInstance();</span><br><span class="line">        System.out.println(con1 == con2);</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">EnumSingleton</span> </span>&#123;</span><br><span class="line">        INSTANCE;<span class="comment">// 枚举里的属性相当于Singleton的实例</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> SingletonClass instance;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">EnumSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonClass();</span><br><span class="line">            System.out.println(<span class="string">&quot;call EnumSingleton()&quot;</span>);</span><br><span class="line">        &#125;   </span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> SingletonClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;   </span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> </span>&#123;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>z</p><h3 id="3-登记式单例（不常用）"><a href="#3-登记式单例（不常用）" class="headerlink" title="3.登记式单例（不常用）"></a>3.登记式单例（不常用）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类似Spring里面的方法，将类名注册，下次从里面直接获取。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Singleton3&gt; map = <span class="keyword">new</span> HashMap&lt;String,Singleton3&gt;();</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        Singleton3 single = <span class="keyword">new</span> Singleton3();</span><br><span class="line">        map.put(single.getClass().getName(), single);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//保护的默认构造子</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Singleton3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//静态工厂方法,返还此类惟一的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(name == <span class="keyword">null</span>) &#123;</span><br><span class="line">            name = Singleton3.class.getName();</span><br><span class="line">            System.out.println(<span class="string">&quot;name == null&quot;</span>+<span class="string">&quot;---&gt;name=&quot;</span>+name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(map.get(name) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                map.put(name, (Singleton3) Class.forName(name).newInstance());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一个示意性的商业方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">about</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, I am RegSingleton.&quot;</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton3 single3 = Singleton3.getInstance(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(single3.about());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;h2 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
